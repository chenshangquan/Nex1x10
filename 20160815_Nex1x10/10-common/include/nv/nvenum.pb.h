// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvenum.proto

#ifndef PROTOBUF_nvenum_2eproto__INCLUDED
#define PROTOBUF_nvenum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace nv {

// Internal implementation detail -- do not call these.
void MTMSG_API protobuf_AddDesc_nvenum_2eproto();
void protobuf_AssignDesc_nvenum_2eproto();
void protobuf_ShutdownFile_nvenum_2eproto();


enum EmNvSysStartMod {
  emNvSysStartMod_By_lib = 0,
  emNvSysStartMod_By_Dll = 1,
  emNvSysStartMod_By_Process = 2,
  emNvSysStartMod_End = 3
};
MTMSG_API bool EmNvSysStartMod_IsValid(int value);
const EmNvSysStartMod EmNvSysStartMod_MIN = emNvSysStartMod_By_lib;
const EmNvSysStartMod EmNvSysStartMod_MAX = emNvSysStartMod_End;
const int EmNvSysStartMod_ARRAYSIZE = EmNvSysStartMod_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvSysStartMod_descriptor();
inline const ::std::string& EmNvSysStartMod_Name(EmNvSysStartMod value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvSysStartMod_descriptor(), value);
}
inline bool EmNvSysStartMod_Parse(
    const ::std::string& name, EmNvSysStartMod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvSysStartMod>(
    EmNvSysStartMod_descriptor(), name, value);
}
enum EmNvSysStartModFromUI {
  emNvSysStart_By_Dll = 0,
  emNvSysStart_By_Process = 1,
  emNvSysStart_End = 2
};
MTMSG_API bool EmNvSysStartModFromUI_IsValid(int value);
const EmNvSysStartModFromUI EmNvSysStartModFromUI_MIN = emNvSysStart_By_Dll;
const EmNvSysStartModFromUI EmNvSysStartModFromUI_MAX = emNvSysStart_End;
const int EmNvSysStartModFromUI_ARRAYSIZE = EmNvSysStartModFromUI_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvSysStartModFromUI_descriptor();
inline const ::std::string& EmNvSysStartModFromUI_Name(EmNvSysStartModFromUI value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvSysStartModFromUI_descriptor(), value);
}
inline bool EmNvSysStartModFromUI_Parse(
    const ::std::string& name, EmNvSysStartModFromUI* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvSysStartModFromUI>(
    EmNvSysStartModFromUI_descriptor(), name, value);
}
enum EmNvSysSrvState {
  emNvSysSrvState_Idle = 0,
  emNvSysSrvState_Binded = 1,
  emNvSysSrvState_Running = 2,
  emNvSysSrvState_Stop = 3,
  emNvSysSrvState_Err = 4
};
MTMSG_API bool EmNvSysSrvState_IsValid(int value);
const EmNvSysSrvState EmNvSysSrvState_MIN = emNvSysSrvState_Idle;
const EmNvSysSrvState EmNvSysSrvState_MAX = emNvSysSrvState_Err;
const int EmNvSysSrvState_ARRAYSIZE = EmNvSysSrvState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvSysSrvState_descriptor();
inline const ::std::string& EmNvSysSrvState_Name(EmNvSysSrvState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvSysSrvState_descriptor(), value);
}
inline bool EmNvSysSrvState_Parse(
    const ::std::string& name, EmNvSysSrvState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvSysSrvState>(
    EmNvSysSrvState_descriptor(), name, value);
}
enum EmNvSysKeepLiveState {
  emNvSysKLState_Ready = 0,
  emNvSysKLState_Alive = 1,
  emNvSysKLState_Err = 2
};
MTMSG_API bool EmNvSysKeepLiveState_IsValid(int value);
const EmNvSysKeepLiveState EmNvSysKeepLiveState_MIN = emNvSysKLState_Ready;
const EmNvSysKeepLiveState EmNvSysKeepLiveState_MAX = emNvSysKLState_Err;
const int EmNvSysKeepLiveState_ARRAYSIZE = EmNvSysKeepLiveState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvSysKeepLiveState_descriptor();
inline const ::std::string& EmNvSysKeepLiveState_Name(EmNvSysKeepLiveState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvSysKeepLiveState_descriptor(), value);
}
inline bool EmNvSysKeepLiveState_Parse(
    const ::std::string& name, EmNvSysKeepLiveState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvSysKeepLiveState>(
    EmNvSysKeepLiveState_descriptor(), name, value);
}
enum EmNvIpAddrType {
  emNvIpV4 = 0,
  emNvIpV6 = 1
};
MTMSG_API bool EmNvIpAddrType_IsValid(int value);
const EmNvIpAddrType EmNvIpAddrType_MIN = emNvIpV4;
const EmNvIpAddrType EmNvIpAddrType_MAX = emNvIpV6;
const int EmNvIpAddrType_ARRAYSIZE = EmNvIpAddrType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvIpAddrType_descriptor();
inline const ::std::string& EmNvIpAddrType_Name(EmNvIpAddrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvIpAddrType_descriptor(), value);
}
inline bool EmNvIpAddrType_Parse(
    const ::std::string& name, EmNvIpAddrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvIpAddrType>(
    EmNvIpAddrType_descriptor(), name, value);
}
enum EmNvAliasType {
  emNvBegin = 0,
  emNvE164 = 1,
  emNvAlias = 2,
  emNvEmail = 3,
  emNvEpID = 4,
  emNvGKID = 5
};
MTMSG_API bool EmNvAliasType_IsValid(int value);
const EmNvAliasType EmNvAliasType_MIN = emNvBegin;
const EmNvAliasType EmNvAliasType_MAX = emNvGKID;
const int EmNvAliasType_ARRAYSIZE = EmNvAliasType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvAliasType_descriptor();
inline const ::std::string& EmNvAliasType_Name(EmNvAliasType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvAliasType_descriptor(), value);
}
inline bool EmNvAliasType_Parse(
    const ::std::string& name, EmNvAliasType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvAliasType>(
    EmNvAliasType_descriptor(), name, value);
}
enum EmNvAddrType {
  emNvAddrIP = 0,
  emNvAddrE164 = 1,
  emNvAddrAlias = 2,
  emNvDialNum = 3,
  emNvSipAddr = 4,
  emNvAddrMoid = 5
};
MTMSG_API bool EmNvAddrType_IsValid(int value);
const EmNvAddrType EmNvAddrType_MIN = emNvAddrIP;
const EmNvAddrType EmNvAddrType_MAX = emNvAddrMoid;
const int EmNvAddrType_ARRAYSIZE = EmNvAddrType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvAddrType_descriptor();
inline const ::std::string& EmNvAddrType_Name(EmNvAddrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvAddrType_descriptor(), value);
}
inline bool EmNvAddrType_Parse(
    const ::std::string& name, EmNvAddrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvAddrType>(
    EmNvAddrType_descriptor(), name, value);
}
enum EmNvChanType {
  emNvChanRecvAudio = 0,
  emNvChanRecvVideo = 1,
  emNvChanTypeEnd = 12
};
MTMSG_API bool EmNvChanType_IsValid(int value);
const EmNvChanType EmNvChanType_MIN = emNvChanRecvAudio;
const EmNvChanType EmNvChanType_MAX = emNvChanTypeEnd;
const int EmNvChanType_ARRAYSIZE = EmNvChanType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvChanType_descriptor();
inline const ::std::string& EmNvChanType_Name(EmNvChanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvChanType_descriptor(), value);
}
inline bool EmNvChanType_Parse(
    const ::std::string& name, EmNvChanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvChanType>(
    EmNvChanType_descriptor(), name, value);
}
enum EmNvModel {
  emNv_ModelBegin = 0,
  emNv_Mode_Imix = 1,
  emNv_Mode_QuickShare = 2,
  emNv_Mode_Imix_S1 = 3,
  emNv_Mode_Imix_D1 = 4,
  emNv_Mode_Imix_S0 = 5,
  emNv_Mode_Imix_D0 = 6
};
MTMSG_API bool EmNvModel_IsValid(int value);
const EmNvModel EmNvModel_MIN = emNv_ModelBegin;
const EmNvModel EmNvModel_MAX = emNv_Mode_Imix_D0;
const int EmNvModel_ARRAYSIZE = EmNvModel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvModel_descriptor();
inline const ::std::string& EmNvModel_Name(EmNvModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvModel_descriptor(), value);
}
inline bool EmNvModel_Parse(
    const ::std::string& name, EmNvModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvModel>(
    EmNvModel_descriptor(), name, value);
}
enum EmNvCodecComponent {
  emNvVidMainEncoder = 0,
  emNvVidMainDecoder = 1,
  emNvAudMainEncoder = 2,
  emNvAudMainDecoder = 3,
  emNvCodecInvalid = 20
};
MTMSG_API bool EmNvCodecComponent_IsValid(int value);
const EmNvCodecComponent EmNvCodecComponent_MIN = emNvVidMainEncoder;
const EmNvCodecComponent EmNvCodecComponent_MAX = emNvCodecInvalid;
const int EmNvCodecComponent_ARRAYSIZE = EmNvCodecComponent_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvCodecComponent_descriptor();
inline const ::std::string& EmNvCodecComponent_Name(EmNvCodecComponent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvCodecComponent_descriptor(), value);
}
inline bool EmNvCodecComponent_Parse(
    const ::std::string& name, EmNvCodecComponent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvCodecComponent>(
    EmNvCodecComponent_descriptor(), name, value);
}
enum EmNvCodecComponentIndex {
  emNv1st = 0,
  emNv2nd = 1,
  emNv3rd = 2,
  emNv4th = 3,
  emNv5th = 4,
  emNv6th = 5,
  emNv7th = 6,
  emNv8th = 7,
  emNv9th = 8
};
MTMSG_API bool EmNvCodecComponentIndex_IsValid(int value);
const EmNvCodecComponentIndex EmNvCodecComponentIndex_MIN = emNv1st;
const EmNvCodecComponentIndex EmNvCodecComponentIndex_MAX = emNv9th;
const int EmNvCodecComponentIndex_ARRAYSIZE = EmNvCodecComponentIndex_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvCodecComponentIndex_descriptor();
inline const ::std::string& EmNvCodecComponentIndex_Name(EmNvCodecComponentIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvCodecComponentIndex_descriptor(), value);
}
inline bool EmNvCodecComponentIndex_Parse(
    const ::std::string& name, EmNvCodecComponentIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvCodecComponentIndex>(
    EmNvCodecComponentIndex_descriptor(), name, value);
}
enum EmNvVidFormat {
  emNvVH261 = 0,
  emNvVH262 = 1,
  emNvVH263 = 2,
  emNvVH263plus = 3,
  emNvVH264 = 4,
  emNvVMPEG4 = 5,
  emNvVH265 = 6,
  emNvVEnd = 7
};
MTMSG_API bool EmNvVidFormat_IsValid(int value);
const EmNvVidFormat EmNvVidFormat_MIN = emNvVH261;
const EmNvVidFormat EmNvVidFormat_MAX = emNvVEnd;
const int EmNvVidFormat_ARRAYSIZE = EmNvVidFormat_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvVidFormat_descriptor();
inline const ::std::string& EmNvVidFormat_Name(EmNvVidFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvVidFormat_descriptor(), value);
}
inline bool EmNvVidFormat_Parse(
    const ::std::string& name, EmNvVidFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvVidFormat>(
    EmNvVidFormat_descriptor(), name, value);
}
enum EmNvAudFormat {
  emNvAG711a = 0,
  emNvAG711u = 1,
  emNvAG722 = 2,
  emNvAG7231 = 3,
  emNvAG728 = 4,
  emNvAG729 = 5,
  emNvAMP3 = 6,
  emNvAG721 = 7,
  emNvAG7221 = 8,
  emNvAG719 = 9,
  emNvAMpegAACLC = 10,
  emNvAMpegAACLD = 11,
  emNvAOpus = 12,
  emNvAudEnd = 13
};
MTMSG_API bool EmNvAudFormat_IsValid(int value);
const EmNvAudFormat EmNvAudFormat_MIN = emNvAG711a;
const EmNvAudFormat EmNvAudFormat_MAX = emNvAudEnd;
const int EmNvAudFormat_ARRAYSIZE = EmNvAudFormat_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvAudFormat_descriptor();
inline const ::std::string& EmNvAudFormat_Name(EmNvAudFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvAudFormat_descriptor(), value);
}
inline bool EmNvAudFormat_Parse(
    const ::std::string& name, EmNvAudFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvAudFormat>(
    EmNvAudFormat_descriptor(), name, value);
}
enum EmNvResolution {
  emNvResAuto = 0,
  emNvSQCIF = 1,
  emNvQCIF = 2,
  emNvCIF = 3,
  emNv2CIF = 4,
  emNv4CIF = 5,
  emNv16CIF = 6,
  emNvVGA352x240 = 7,
  emNv2SIF = 8,
  emNvVGA704x480 = 9,
  emNvVGA640x480 = 10,
  emNvVGA800x600 = 11,
  emNvVGA1024x768 = 12,
  emNvVWCIF = 13,
  emNvVSQCIF112x96 = 14,
  emNvVSQCIF96x80 = 15,
  emNvVW4CIF = 16,
  emNvHD720p1280x720 = 17,
  emNvVGA1280x1024 = 18,
  emNvVGA1600x1200 = 19,
  emNvHD1080i1920x1080 = 20,
  emNvHD1080p1920x1080 = 21,
  emNvVGA1280x800 = 22,
  emNvVGA1440x900 = 23,
  emNvVGA1280x960 = 24,
  emNvV1440x816 = 25,
  emNv1280x720 = 26,
  emNvV960x544 = 27,
  emNvV640x368 = 28,
  emNvV480x272 = 29,
  emNv384x272 = 30,
  emNv640x544 = 31,
  emNv320x272 = 32,
  emNv_720_960x544 = 33,
  emNv_720_864x480 = 34,
  emNv_720_640x368 = 35,
  emNv_720_432x240 = 36,
  emNv_720_320x192 = 37,
  emNvVGA480x352 = 38,
  emNvHD480i720x480 = 39,
  emNvHD480p720x480 = 40,
  emNvHD576i720x576 = 41,
  emNvHD576p720x576 = 42,
  emNvVGA1280x768 = 43,
  emNvVGA1366x768 = 44,
  emNvVGA1280x854 = 45,
  emNvVGA1680x1050 = 46,
  emNvVGA1920x1200 = 47,
  emNvV3840x2160 = 48,
  emNv1280x600 = 49,
  emNv1360x768 = 50,
  emNvVResEnd = 100
};
MTMSG_API bool EmNvResolution_IsValid(int value);
const EmNvResolution EmNvResolution_MIN = emNvResAuto;
const EmNvResolution EmNvResolution_MAX = emNvVResEnd;
const int EmNvResolution_ARRAYSIZE = EmNvResolution_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvResolution_descriptor();
inline const ::std::string& EmNvResolution_Name(EmNvResolution value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvResolution_descriptor(), value);
}
inline bool EmNvResolution_Parse(
    const ::std::string& name, EmNvResolution* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvResolution>(
    EmNvResolution_descriptor(), name, value);
}
enum EmNvPathType {
  emNvPathTypeBgn = 1,
  emNvPathConfig = 2,
  emNvPathLog = 3,
  emNvDataLog = 4,
  emNvPathTypeEnd = 255
};
MTMSG_API bool EmNvPathType_IsValid(int value);
const EmNvPathType EmNvPathType_MIN = emNvPathTypeBgn;
const EmNvPathType EmNvPathType_MAX = emNvPathTypeEnd;
const int EmNvPathType_ARRAYSIZE = EmNvPathType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvPathType_descriptor();
inline const ::std::string& EmNvPathType_Name(EmNvPathType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvPathType_descriptor(), value);
}
inline bool EmNvPathType_Parse(
    const ::std::string& name, EmNvPathType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvPathType>(
    EmNvPathType_descriptor(), name, value);
}
enum EmNvFile {
  emNvFileBegin = 0,
  emNvConfigFile = 1,
  emNvDebugConfigFile = 2,
  emNvStaticPicFile = 3,
  emNvUpgradeStateFile = 4,
  emNvMcLicenseFile = 5,
  emNvKdvlogCfgFile = 6,
  emNvCorruptConfigFile = 7,
  emNvExceptionFile = 8,
  emNvLogFile = 9,
  emNvFileEnd = 255
};
MTMSG_API bool EmNvFile_IsValid(int value);
const EmNvFile EmNvFile_MIN = emNvFileBegin;
const EmNvFile EmNvFile_MAX = emNvFileEnd;
const int EmNvFile_ARRAYSIZE = EmNvFile_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvFile_descriptor();
inline const ::std::string& EmNvFile_Name(EmNvFile value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvFile_descriptor(), value);
}
inline bool EmNvFile_Parse(
    const ::std::string& name, EmNvFile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvFile>(
    EmNvFile_descriptor(), name, value);
}
enum EmNvUpgradeType {
  emNvSusUpgrade = 0,
  emNvLocalUpgrade = 1,
  emNvNvcUpgrade = 2
};
MTMSG_API bool EmNvUpgradeType_IsValid(int value);
const EmNvUpgradeType EmNvUpgradeType_MIN = emNvSusUpgrade;
const EmNvUpgradeType EmNvUpgradeType_MAX = emNvNvcUpgrade;
const int EmNvUpgradeType_ARRAYSIZE = EmNvUpgradeType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvUpgradeType_descriptor();
inline const ::std::string& EmNvUpgradeType_Name(EmNvUpgradeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvUpgradeType_descriptor(), value);
}
inline bool EmNvUpgradeType_Parse(
    const ::std::string& name, EmNvUpgradeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvUpgradeType>(
    EmNvUpgradeType_descriptor(), name, value);
}
enum EmNvUpgradeNotify {
  emNvFileCheckBgn = 0,
  emNvWholeUpgradeBgn = 1,
  emNvFileCheckSuccess = 2,
  emNvWholeUpgradeSuccess = 3,
  emNvUnknownErr = 4,
  emNvInvalidFileErr = 5,
  emNvLoadXmlFileErr = 6,
  emNvFileCheckErr = 7,
  emNvSysMountBakErr = 8,
  emNvUpgradeDriverModuleErr = 9,
  emNvUpgradeAppModuleErr = 10,
  emNvUpgradeExeModuleErr = 11
};
MTMSG_API bool EmNvUpgradeNotify_IsValid(int value);
const EmNvUpgradeNotify EmNvUpgradeNotify_MIN = emNvFileCheckBgn;
const EmNvUpgradeNotify EmNvUpgradeNotify_MAX = emNvUpgradeExeModuleErr;
const int EmNvUpgradeNotify_ARRAYSIZE = EmNvUpgradeNotify_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvUpgradeNotify_descriptor();
inline const ::std::string& EmNvUpgradeNotify_Name(EmNvUpgradeNotify value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvUpgradeNotify_descriptor(), value);
}
inline bool EmNvUpgradeNotify_Parse(
    const ::std::string& name, EmNvUpgradeNotify* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvUpgradeNotify>(
    EmNvUpgradeNotify_descriptor(), name, value);
}
enum EmNvServerType {
  emNvAPS = 0,
  emNvXNU = 1,
  emNvSUS = 2,
  emNvNMS = 3,
  emNvNTS = 4,
  emNvSIP = 5,
  emNvNonH323 = 6,
  emNvStdH323 = 7,
  emNvNTP = 8,
  emNvVOD = 9,
  emNvMoMeeting = 10,
  emNvMoPlatform = 11,
  emNvVRS = 12,
  emNvDCS = 13,
  emNvServerTypeEnd = 14
};
MTMSG_API bool EmNvServerType_IsValid(int value);
const EmNvServerType EmNvServerType_MIN = emNvAPS;
const EmNvServerType EmNvServerType_MAX = emNvServerTypeEnd;
const int EmNvServerType_ARRAYSIZE = EmNvServerType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvServerType_descriptor();
inline const ::std::string& EmNvServerType_Name(EmNvServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvServerType_descriptor(), value);
}
inline bool EmNvServerType_Parse(
    const ::std::string& name, EmNvServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvServerType>(
    EmNvServerType_descriptor(), name, value);
}
enum EmNvServerState {
  emNvIdle = 0,
  emNvDnsQuerying = 1,
  emNvLogging_In = 2,
  emNvLogin_Succ = 3,
  emNvLogging_Out = 4,
  emNvDisconnected = 5,
  emNvLogin_Err = 6
};
MTMSG_API bool EmNvServerState_IsValid(int value);
const EmNvServerState EmNvServerState_MIN = emNvIdle;
const EmNvServerState EmNvServerState_MAX = emNvLogin_Err;
const int EmNvServerState_ARRAYSIZE = EmNvServerState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvServerState_descriptor();
inline const ::std::string& EmNvServerState_Name(EmNvServerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvServerState_descriptor(), value);
}
inline bool EmNvServerState_Parse(
    const ::std::string& name, EmNvServerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvServerState>(
    EmNvServerState_descriptor(), name, value);
}
enum EmNvUpgradeVerLevel {
  emNvUpgradeLevelForced = 0,
  emNvUpgradeLevelSuggested = 1,
  emNvUpgradeLevelNormal = 2
};
MTMSG_API bool EmNvUpgradeVerLevel_IsValid(int value);
const EmNvUpgradeVerLevel EmNvUpgradeVerLevel_MIN = emNvUpgradeLevelForced;
const EmNvUpgradeVerLevel EmNvUpgradeVerLevel_MAX = emNvUpgradeLevelNormal;
const int EmNvUpgradeVerLevel_ARRAYSIZE = EmNvUpgradeVerLevel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvUpgradeVerLevel_descriptor();
inline const ::std::string& EmNvUpgradeVerLevel_Name(EmNvUpgradeVerLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvUpgradeVerLevel_descriptor(), value);
}
inline bool EmNvUpgradeVerLevel_Parse(
    const ::std::string& name, EmNvUpgradeVerLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvUpgradeVerLevel>(
    EmNvUpgradeVerLevel_descriptor(), name, value);
}
enum EmNvUpgradeReleaseAttr {
  emNvUpgradeAttr = 0,
  emNvUpgradeAttrCommon = 1,
  emNvUpgradeAttrRecommend = 2,
  emNvUpgradeAttrGray = 4
};
MTMSG_API bool EmNvUpgradeReleaseAttr_IsValid(int value);
const EmNvUpgradeReleaseAttr EmNvUpgradeReleaseAttr_MIN = emNvUpgradeAttr;
const EmNvUpgradeReleaseAttr EmNvUpgradeReleaseAttr_MAX = emNvUpgradeAttrGray;
const int EmNvUpgradeReleaseAttr_ARRAYSIZE = EmNvUpgradeReleaseAttr_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvUpgradeReleaseAttr_descriptor();
inline const ::std::string& EmNvUpgradeReleaseAttr_Name(EmNvUpgradeReleaseAttr value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvUpgradeReleaseAttr_descriptor(), value);
}
inline bool EmNvUpgradeReleaseAttr_Parse(
    const ::std::string& name, EmNvUpgradeReleaseAttr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvUpgradeReleaseAttr>(
    EmNvUpgradeReleaseAttr_descriptor(), name, value);
}
enum EmNvNvcType {
  emNvUnkownT = 0,
  emNvNvcT = 1,
  emNvPcdvT = 2,
  emNvNctT = 3,
  emNvQuickShareT = 4,
  emNvSystemUpgrade = 5,
  emNvSystemSetting = 6,
  emNvSystemToolbar = 7,
  emNvScreenDrawing = 8,
  emNvContainer = 9,
  emNvPADUpgrade = 10
};
MTMSG_API bool EmNvNvcType_IsValid(int value);
const EmNvNvcType EmNvNvcType_MIN = emNvUnkownT;
const EmNvNvcType EmNvNvcType_MAX = emNvPADUpgrade;
const int EmNvNvcType_ARRAYSIZE = EmNvNvcType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvNvcType_descriptor();
inline const ::std::string& EmNvNvcType_Name(EmNvNvcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvNvcType_descriptor(), value);
}
inline bool EmNvNvcType_Parse(
    const ::std::string& name, EmNvNvcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvNvcType>(
    EmNvNvcType_descriptor(), name, value);
}
enum EmNvNetAdapterWorkType {
  emNvNetAdapterWorkType_None = 0,
  emNvNetAdapterWorkType_Wifi = 1,
  emNvNetAdapterWorkType_PPPoE = 2,
  emNvNetAdapterWorkType_MobileData = 3,
  emNvNetAdapterWorkType_EthnetCard1 = 4,
  emNvNetAdapterWorkType_EthnetCard2 = 5,
  emNvNetAdapterWorkType_E1 = 6
};
MTMSG_API bool EmNvNetAdapterWorkType_IsValid(int value);
const EmNvNetAdapterWorkType EmNvNetAdapterWorkType_MIN = emNvNetAdapterWorkType_None;
const EmNvNetAdapterWorkType EmNvNetAdapterWorkType_MAX = emNvNetAdapterWorkType_E1;
const int EmNvNetAdapterWorkType_ARRAYSIZE = EmNvNetAdapterWorkType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvNetAdapterWorkType_descriptor();
inline const ::std::string& EmNvNetAdapterWorkType_Name(EmNvNetAdapterWorkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvNetAdapterWorkType_descriptor(), value);
}
inline bool EmNvNetAdapterWorkType_Parse(
    const ::std::string& name, EmNvNetAdapterWorkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvNetAdapterWorkType>(
    EmNvNetAdapterWorkType_descriptor(), name, value);
}
enum EmNvRemoteType {
  emNvRemoteTypeUnknown = 0,
  emNvRemoteTypeShortBlack = 1,
  emNvRemoteTypeLongBlack = 2,
  emNvRemoteTypeSilver = 3,
  emNvRemoteTypeV3CamCtrl = 4,
  emNvRemoteTypeSkyWalker = 5
};
MTMSG_API bool EmNvRemoteType_IsValid(int value);
const EmNvRemoteType EmNvRemoteType_MIN = emNvRemoteTypeUnknown;
const EmNvRemoteType EmNvRemoteType_MAX = emNvRemoteTypeSkyWalker;
const int EmNvRemoteType_ARRAYSIZE = EmNvRemoteType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvRemoteType_descriptor();
inline const ::std::string& EmNvRemoteType_Name(EmNvRemoteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvRemoteType_descriptor(), value);
}
inline bool EmNvRemoteType_Parse(
    const ::std::string& name, EmNvRemoteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvRemoteType>(
    EmNvRemoteType_descriptor(), name, value);
}
enum EmNvRemoteScanCode {
  emNvScanCode0 = 0,
  emNvScanCode1 = 1,
  emNvScanCode2 = 2,
  emNvScanCode3 = 3,
  emNvScanCode4 = 4,
  emNvScanCode5 = 5,
  emNvScanCode6 = 6,
  emNvScanCode7 = 7,
  emNvScanCode8 = 8,
  emNvScanCode9 = 9,
  emNvScanCodePoint = 10,
  emNvScanCodeSharp = 11,
  emNvScanCodeMenu = 12,
  emNvScanCodeBackspace = 13,
  emNvScanCodeEnter = 14,
  emNvScanCodeUp = 15,
  emNvScanCodeDown = 16,
  emNvScanCodeLeft = 17,
  emNvScanCodeRight = 18,
  emNvScanCodePower = 19,
  emNvScanCodeMainVSrc = 20,
  emNvScanCodeAV = 21,
  emNvScanCodeFarCtrl = 22,
  emNvScanCodeMute = 23,
  emNvScanCodeQuiet = 24,
  emNvScanCodeVGA = 25,
  emNvScanCodeS = 26,
  emNvScanCodeShotSnap = 27,
  emNvScanCodeVolumeUp = 28,
  emNvScanCodeVolumeDown = 29,
  emNvScanCodeConnect = 30,
  emNvScanCodeDisconnect = 31,
  emNvScanCodeDirectory = 32,
  emNvScanCodePipEnable = 33,
  emNvScanCodePipAdjust = 34,
  emNvScanCodeSelfTest = 35,
  emNvScanCodeAutoFocus = 36,
  emNvScanCodeNearZoom = 37,
  emNvScanCodeFarZoom = 38,
  emNvScanCodePreSave = 39,
  emNvScanCodePreMove = 40,
  emNvScanCodeChairReq = 41,
  emNvScanCodeSpeakReq = 42,
  emNvScanCodeQuitReq = 43,
  emNvScanCodeState = 44,
  emNvScanCodeHotLeft = 45,
  emNvScanCodeHotCenter = 46,
  emNvScanCodeHotRight = 47,
  emNvScanCodeHelp = 48,
  emNvScanCodeBrightUp = 49,
  emNvScanCodeBrightDown = 50,
  emNvScanCodeDual = 51,
  emNvScanCodeReturn = 52,
  emNvScanCodeFunc = 53,
  emNvScanCodeSearch = 54,
  emNvScanCodeNull = 98,
  emNvScanCodeInvalid = 99
};
MTMSG_API bool EmNvRemoteScanCode_IsValid(int value);
const EmNvRemoteScanCode EmNvRemoteScanCode_MIN = emNvScanCode0;
const EmNvRemoteScanCode EmNvRemoteScanCode_MAX = emNvScanCodeInvalid;
const int EmNvRemoteScanCode_ARRAYSIZE = EmNvRemoteScanCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvRemoteScanCode_descriptor();
inline const ::std::string& EmNvRemoteScanCode_Name(EmNvRemoteScanCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvRemoteScanCode_descriptor(), value);
}
inline bool EmNvRemoteScanCode_Parse(
    const ::std::string& name, EmNvRemoteScanCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvRemoteScanCode>(
    EmNvRemoteScanCode_descriptor(), name, value);
}
enum EmNvStopBits {
  emNv1StopBit = 0,
  emNv1HalfStopBit = 1,
  emNv2StopBit = 2
};
MTMSG_API bool EmNvStopBits_IsValid(int value);
const EmNvStopBits EmNvStopBits_MIN = emNv1StopBit;
const EmNvStopBits EmNvStopBits_MAX = emNv2StopBit;
const int EmNvStopBits_ARRAYSIZE = EmNvStopBits_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvStopBits_descriptor();
inline const ::std::string& EmNvStopBits_Name(EmNvStopBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvStopBits_descriptor(), value);
}
inline bool EmNvStopBits_Parse(
    const ::std::string& name, EmNvStopBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvStopBits>(
    EmNvStopBits_descriptor(), name, value);
}
enum EmNvParityCheck {
  emNvNoCheck = 0,
  emNvOddCheck = 1,
  emNvEvenCheck = 2
};
MTMSG_API bool EmNvParityCheck_IsValid(int value);
const EmNvParityCheck EmNvParityCheck_MIN = emNvNoCheck;
const EmNvParityCheck EmNvParityCheck_MAX = emNvEvenCheck;
const int EmNvParityCheck_ARRAYSIZE = EmNvParityCheck_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvParityCheck_descriptor();
inline const ::std::string& EmNvParityCheck_Name(EmNvParityCheck value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvParityCheck_descriptor(), value);
}
inline bool EmNvParityCheck_Parse(
    const ::std::string& name, EmNvParityCheck* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvParityCheck>(
    EmNvParityCheck_descriptor(), name, value);
}
enum EmNvSerialType {
  emNvRS232_0 = 0,
  emNvRS232_1 = 1,
  emNvRS232_2 = 2,
  emNvRS232_3 = 3,
  emNvRS232_4 = 4,
  emNvRS232_5 = 5,
  emNvRS232_6 = 6,
  emNvRS232_7 = 7
};
MTMSG_API bool EmNvSerialType_IsValid(int value);
const EmNvSerialType EmNvSerialType_MIN = emNvRS232_0;
const EmNvSerialType EmNvSerialType_MAX = emNvRS232_7;
const int EmNvSerialType_ARRAYSIZE = EmNvSerialType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvSerialType_descriptor();
inline const ::std::string& EmNvSerialType_Name(EmNvSerialType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvSerialType_descriptor(), value);
}
inline bool EmNvSerialType_Parse(
    const ::std::string& name, EmNvSerialType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvSerialType>(
    EmNvSerialType_descriptor(), name, value);
}
enum EmNvAlarmCode {
  emNvAlarmFileSysErr = 1010,
  emNvAlarmSysBusy = 1011,
  emNvAlarmFanErr = 1016,
  emNvAlarmTempHigh = 1017,
  emNvAlarmVoltageHigh = 1018
};
MTMSG_API bool EmNvAlarmCode_IsValid(int value);
const EmNvAlarmCode EmNvAlarmCode_MIN = emNvAlarmFileSysErr;
const EmNvAlarmCode EmNvAlarmCode_MAX = emNvAlarmVoltageHigh;
const int EmNvAlarmCode_ARRAYSIZE = EmNvAlarmCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvAlarmCode_descriptor();
inline const ::std::string& EmNvAlarmCode_Name(EmNvAlarmCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvAlarmCode_descriptor(), value);
}
inline bool EmNvAlarmCode_Parse(
    const ::std::string& name, EmNvAlarmCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvAlarmCode>(
    EmNvAlarmCode_descriptor(), name, value);
}
enum EmNvEthInterfaceMode {
  emNvEthInterfaceModeBackup = 0,
  emNvEthInterfaceModeMulti = 1
};
MTMSG_API bool EmNvEthInterfaceMode_IsValid(int value);
const EmNvEthInterfaceMode EmNvEthInterfaceMode_MIN = emNvEthInterfaceModeBackup;
const EmNvEthInterfaceMode EmNvEthInterfaceMode_MAX = emNvEthInterfaceModeMulti;
const int EmNvEthInterfaceMode_ARRAYSIZE = EmNvEthInterfaceMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvEthInterfaceMode_descriptor();
inline const ::std::string& EmNvEthInterfaceMode_Name(EmNvEthInterfaceMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvEthInterfaceMode_descriptor(), value);
}
inline bool EmNvEthInterfaceMode_Parse(
    const ::std::string& name, EmNvEthInterfaceMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvEthInterfaceMode>(
    EmNvEthInterfaceMode_descriptor(), name, value);
}
enum EmNvSystemFileType {
  emNvFileNormal = 0,
  emNvFileDirectory = 1,
  emNvFileLink = 2,
  emNvFilePipe = 3
};
MTMSG_API bool EmNvSystemFileType_IsValid(int value);
const EmNvSystemFileType EmNvSystemFileType_MIN = emNvFileNormal;
const EmNvSystemFileType EmNvSystemFileType_MAX = emNvFilePipe;
const int EmNvSystemFileType_ARRAYSIZE = EmNvSystemFileType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvSystemFileType_descriptor();
inline const ::std::string& EmNvSystemFileType_Name(EmNvSystemFileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvSystemFileType_descriptor(), value);
}
inline bool EmNvSystemFileType_Parse(
    const ::std::string& name, EmNvSystemFileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvSystemFileType>(
    EmNvSystemFileType_descriptor(), name, value);
}
enum EmNvFileCopyErr {
  emNvCopySuccess = 0,
  emNvCopyUnknownErr = 1,
  emNvCopyNoSpace = 2,
  emNvCopySrcFileNotFound = 3,
  emNvCopyDstPathNotFound = 4,
  emNvCopyStop = 5
};
MTMSG_API bool EmNvFileCopyErr_IsValid(int value);
const EmNvFileCopyErr EmNvFileCopyErr_MIN = emNvCopySuccess;
const EmNvFileCopyErr EmNvFileCopyErr_MAX = emNvCopyStop;
const int EmNvFileCopyErr_ARRAYSIZE = EmNvFileCopyErr_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvFileCopyErr_descriptor();
inline const ::std::string& EmNvFileCopyErr_Name(EmNvFileCopyErr value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvFileCopyErr_descriptor(), value);
}
inline bool EmNvFileCopyErr_Parse(
    const ::std::string& name, EmNvFileCopyErr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvFileCopyErr>(
    EmNvFileCopyErr_descriptor(), name, value);
}
enum EmNvDisplayRatio {
  emNvDR4to3 = 0,
  emNvDR16to9 = 1,
  emNvDRAuto = 2
};
MTMSG_API bool EmNvDisplayRatio_IsValid(int value);
const EmNvDisplayRatio EmNvDisplayRatio_MIN = emNvDR4to3;
const EmNvDisplayRatio EmNvDisplayRatio_MAX = emNvDRAuto;
const int EmNvDisplayRatio_ARRAYSIZE = EmNvDisplayRatio_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvDisplayRatio_descriptor();
inline const ::std::string& EmNvDisplayRatio_Name(EmNvDisplayRatio value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvDisplayRatio_descriptor(), value);
}
inline bool EmNvDisplayRatio_Parse(
    const ::std::string& name, EmNvDisplayRatio* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvDisplayRatio>(
    EmNvDisplayRatio_descriptor(), name, value);
}
enum EmNvCallState {
  emNvCallIdle = 0,
  emNvCallIng = 1,
  emNvCallConnected = 2
};
MTMSG_API bool EmNvCallState_IsValid(int value);
const EmNvCallState EmNvCallState_MIN = emNvCallIdle;
const EmNvCallState EmNvCallState_MAX = emNvCallConnected;
const int EmNvCallState_ARRAYSIZE = EmNvCallState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvCallState_descriptor();
inline const ::std::string& EmNvCallState_Name(EmNvCallState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvCallState_descriptor(), value);
}
inline bool EmNvCallState_Parse(
    const ::std::string& name, EmNvCallState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvCallState>(
    EmNvCallState_descriptor(), name, value);
}
enum EmNvVideoOutPutMode {
  emNvVOM_HD_ORIGIN = 0,
  emNvVOM_HD_720P50 = 1,
  emNvVOM_HD_720P60 = 2,
  emNvVOM_HD_1080P24 = 3,
  emNvVOM_HD_1080P25 = 4,
  emNvVOM_HD_1080P30 = 5,
  emNvVOM_HD_1080P50 = 6,
  emNvVOM_HD_1080P60 = 7,
  emNvVOM_HD_XGA60 = 8,
  emNvVOM_HD_SXGA60 = 9,
  emNvVOM_HD_WXGA1280x800_60 = 10,
  emNvVOM_HD_WXGA1366x768_60 = 11,
  emNvVOM_HD_WSXGA60 = 12,
  emNvVOM_HD_WSXGAPLUS60 = 13,
  emNvVOM_HD_2160P30 = 14,
  emNvVOM_HD_2160P60 = 15
};
MTMSG_API bool EmNvVideoOutPutMode_IsValid(int value);
const EmNvVideoOutPutMode EmNvVideoOutPutMode_MIN = emNvVOM_HD_ORIGIN;
const EmNvVideoOutPutMode EmNvVideoOutPutMode_MAX = emNvVOM_HD_2160P60;
const int EmNvVideoOutPutMode_ARRAYSIZE = EmNvVideoOutPutMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvVideoOutPutMode_descriptor();
inline const ::std::string& EmNvVideoOutPutMode_Name(EmNvVideoOutPutMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvVideoOutPutMode_descriptor(), value);
}
inline bool EmNvVideoOutPutMode_Parse(
    const ::std::string& name, EmNvVideoOutPutMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvVideoOutPutMode>(
    EmNvVideoOutPutMode_descriptor(), name, value);
}
enum EmNvAacChnlNum {
  emNvCnNumCust = 0,
  emNvCnNum1 = 1,
  emNvCnNum2 = 2,
  emNvCnNum3 = 4,
  emNvCnNum4 = 8,
  emNvCnNum5 = 16,
  emNvCnNum5dot1 = 32,
  emNvCnNum7dot1 = 64
};
MTMSG_API bool EmNvAacChnlNum_IsValid(int value);
const EmNvAacChnlNum EmNvAacChnlNum_MIN = emNvCnNumCust;
const EmNvAacChnlNum EmNvAacChnlNum_MAX = emNvCnNum7dot1;
const int EmNvAacChnlNum_ARRAYSIZE = EmNvAacChnlNum_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvAacChnlNum_descriptor();
inline const ::std::string& EmNvAacChnlNum_Name(EmNvAacChnlNum value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvAacChnlNum_descriptor(), value);
}
inline bool EmNvAacChnlNum_Parse(
    const ::std::string& name, EmNvAacChnlNum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvAacChnlNum>(
    EmNvAacChnlNum_descriptor(), name, value);
}
enum EmNvAacSampFreq {
  emNvASF96000 = 0,
  emNvASF88200 = 1,
  emNvASF64000 = 2,
  emNvASF48000 = 3,
  emNvASF44100 = 4,
  emNvASF32000 = 5,
  emNvASF24000 = 6,
  emNvASF22050 = 7,
  emNvASF16000 = 8,
  emNvASF12000 = 9,
  emNvASF11025 = 10,
  emNvASF8000 = 11
};
MTMSG_API bool EmNvAacSampFreq_IsValid(int value);
const EmNvAacSampFreq EmNvAacSampFreq_MIN = emNvASF96000;
const EmNvAacSampFreq EmNvAacSampFreq_MAX = emNvASF8000;
const int EmNvAacSampFreq_ARRAYSIZE = EmNvAacSampFreq_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvAacSampFreq_descriptor();
inline const ::std::string& EmNvAacSampFreq_Name(EmNvAacSampFreq value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvAacSampFreq_descriptor(), value);
}
inline bool EmNvAacSampFreq_Parse(
    const ::std::string& name, EmNvAacSampFreq* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvAacSampFreq>(
    EmNvAacSampFreq_descriptor(), name, value);
}
enum EmNvH264AdditionalModes {
  emNvModeNone = 0,
  emNvModeRCD0 = 64,
  emNvModeSBP = 32,
  emNvModeSHP = 16
};
MTMSG_API bool EmNvH264AdditionalModes_IsValid(int value);
const EmNvH264AdditionalModes EmNvH264AdditionalModes_MIN = emNvModeNone;
const EmNvH264AdditionalModes EmNvH264AdditionalModes_MAX = emNvModeRCD0;
const int EmNvH264AdditionalModes_ARRAYSIZE = EmNvH264AdditionalModes_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvH264AdditionalModes_descriptor();
inline const ::std::string& EmNvH264AdditionalModes_Name(EmNvH264AdditionalModes value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvH264AdditionalModes_descriptor(), value);
}
inline bool EmNvH264AdditionalModes_Parse(
    const ::std::string& name, EmNvH264AdditionalModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvH264AdditionalModes>(
    EmNvH264AdditionalModes_descriptor(), name, value);
}
enum EmNvH264Profile {
  emNvInvalid = 0,
  emNvBaseline = 1,
  emNvMain = 2,
  emNvExtended = 4,
  emNvHigh = 8,
  emNvHigh10 = 16,
  emNvHigh422 = 32,
  emNvHigh444 = 64
};
MTMSG_API bool EmNvH264Profile_IsValid(int value);
const EmNvH264Profile EmNvH264Profile_MIN = emNvInvalid;
const EmNvH264Profile EmNvH264Profile_MAX = emNvHigh444;
const int EmNvH264Profile_ARRAYSIZE = EmNvH264Profile_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvH264Profile_descriptor();
inline const ::std::string& EmNvH264Profile_Name(EmNvH264Profile value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvH264Profile_descriptor(), value);
}
inline bool EmNvH264Profile_Parse(
    const ::std::string& name, EmNvH264Profile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvH264Profile>(
    EmNvH264Profile_descriptor(), name, value);
}
enum EmNvH265Profile {
  emNvProfileMain = 0,
  emNvProfileMain10 = 1,
  emNvProfileMainStill = 2
};
MTMSG_API bool EmNvH265Profile_IsValid(int value);
const EmNvH265Profile EmNvH265Profile_MIN = emNvProfileMain;
const EmNvH265Profile EmNvH265Profile_MAX = emNvProfileMainStill;
const int EmNvH265Profile_ARRAYSIZE = EmNvH265Profile_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvH265Profile_descriptor();
inline const ::std::string& EmNvH265Profile_Name(EmNvH265Profile value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvH265Profile_descriptor(), value);
}
inline bool EmNvH265Profile_Parse(
    const ::std::string& name, EmNvH265Profile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvH265Profile>(
    EmNvH265Profile_descriptor(), name, value);
}
enum EmNvLostPackStrategy {
  emNvLPSQualityFirst = 0,
  emNvLPSSpeedSlow = 1,
  emNvLPSSpeedNormal = 2,
  emNvLPSSpeedFast = 3
};
MTMSG_API bool EmNvLostPackStrategy_IsValid(int value);
const EmNvLostPackStrategy EmNvLostPackStrategy_MIN = emNvLPSQualityFirst;
const EmNvLostPackStrategy EmNvLostPackStrategy_MAX = emNvLPSSpeedFast;
const int EmNvLostPackStrategy_ARRAYSIZE = EmNvLostPackStrategy_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvLostPackStrategy_descriptor();
inline const ::std::string& EmNvLostPackStrategy_Name(EmNvLostPackStrategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvLostPackStrategy_descriptor(), value);
}
inline bool EmNvLostPackStrategy_Parse(
    const ::std::string& name, EmNvLostPackStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvLostPackStrategy>(
    EmNvLostPackStrategy_descriptor(), name, value);
}
enum EmNvPiPMode {
  emNvPiPClose = 1,
  emNvPIPLeftRight = 2,
  emNvPiPRightBottom = 3,
  emNvPiPLeftBottom = 4,
  emNvPiPLeftTop = 5,
  emNvPiPRightTop = 6,
  emNvPiPTwoSmallLeftInOneBig = 7,
  emNvPiPTwoSmallRightInOneBig = 8,
  emNvPiPOneBigAndTwoSmall = 9,
  emNvPiPThree = 10
};
MTMSG_API bool EmNvPiPMode_IsValid(int value);
const EmNvPiPMode EmNvPiPMode_MIN = emNvPiPClose;
const EmNvPiPMode EmNvPiPMode_MAX = emNvPiPThree;
const int EmNvPiPMode_ARRAYSIZE = EmNvPiPMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvPiPMode_descriptor();
inline const ::std::string& EmNvPiPMode_Name(EmNvPiPMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvPiPMode_descriptor(), value);
}
inline bool EmNvPiPMode_Parse(
    const ::std::string& name, EmNvPiPMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvPiPMode>(
    EmNvPiPMode_descriptor(), name, value);
}
enum EmNvHDLastDisplay {
  emNvLD_LastFrame = 0,
  emNvLD_BlueScreen = 1,
  emNvLD_StaticBMP = 2,
  emNvLD_CustomBMP = 3
};
MTMSG_API bool EmNvHDLastDisplay_IsValid(int value);
const EmNvHDLastDisplay EmNvHDLastDisplay_MIN = emNvLD_LastFrame;
const EmNvHDLastDisplay EmNvHDLastDisplay_MAX = emNvLD_CustomBMP;
const int EmNvHDLastDisplay_ARRAYSIZE = EmNvHDLastDisplay_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvHDLastDisplay_descriptor();
inline const ::std::string& EmNvHDLastDisplay_Name(EmNvHDLastDisplay value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvHDLastDisplay_descriptor(), value);
}
inline bool EmNvHDLastDisplay_Parse(
    const ::std::string& name, EmNvHDLastDisplay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvHDLastDisplay>(
    EmNvHDLastDisplay_descriptor(), name, value);
}
enum EmNvResizeMode {
  emNvBlackEdge = 0,
  emNvCutEdge = 1,
  emNvNoProportionally = 2
};
MTMSG_API bool EmNvResizeMode_IsValid(int value);
const EmNvResizeMode EmNvResizeMode_MIN = emNvBlackEdge;
const EmNvResizeMode EmNvResizeMode_MAX = emNvNoProportionally;
const int EmNvResizeMode_ARRAYSIZE = EmNvResizeMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvResizeMode_descriptor();
inline const ::std::string& EmNvResizeMode_Name(EmNvResizeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvResizeMode_descriptor(), value);
}
inline bool EmNvResizeMode_Parse(
    const ::std::string& name, EmNvResizeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvResizeMode>(
    EmNvResizeMode_descriptor(), name, value);
}
enum EmNvHDImageNoise {
  emNvImageNoise_Disable = 0,
  emNvImageNoise_Low = 1,
  emNvImageNoise_Med = 2,
  emNvImageNoise_High = 3,
  emNvImageNoise_UltraHigh = 4
};
MTMSG_API bool EmNvHDImageNoise_IsValid(int value);
const EmNvHDImageNoise EmNvHDImageNoise_MIN = emNvImageNoise_Disable;
const EmNvHDImageNoise EmNvHDImageNoise_MAX = emNvImageNoise_UltraHigh;
const int EmNvHDImageNoise_ARRAYSIZE = EmNvHDImageNoise_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvHDImageNoise_descriptor();
inline const ::std::string& EmNvHDImageNoise_Name(EmNvHDImageNoise value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvHDImageNoise_descriptor(), value);
}
inline bool EmNvHDImageNoise_Parse(
    const ::std::string& name, EmNvHDImageNoise* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvHDImageNoise>(
    EmNvHDImageNoise_descriptor(), name, value);
}
enum EmNvLocalSoundIndex {
  emNvSound1st = 0,
  emNvSound2nd = 1,
  emNvSound3rd = 2,
  emNvSound4th = 3,
  emNvSound5th = 4,
  emNvSound6th = 5,
  emNvSound7th = 6,
  emNvSound8th = 7,
  emNvSound9th = 8
};
MTMSG_API bool EmNvLocalSoundIndex_IsValid(int value);
const EmNvLocalSoundIndex EmNvLocalSoundIndex_MIN = emNvSound1st;
const EmNvLocalSoundIndex EmNvLocalSoundIndex_MAX = emNvSound9th;
const int EmNvLocalSoundIndex_ARRAYSIZE = EmNvLocalSoundIndex_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvLocalSoundIndex_descriptor();
inline const ::std::string& EmNvLocalSoundIndex_Name(EmNvLocalSoundIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvLocalSoundIndex_descriptor(), value);
}
inline bool EmNvLocalSoundIndex_Parse(
    const ::std::string& name, EmNvLocalSoundIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvLocalSoundIndex>(
    EmNvLocalSoundIndex_descriptor(), name, value);
}
enum EmNvUISynchronizeReason {
  emNvSynchronize_Upgrade = 0,
  emNvSynchronize_BeginDspSleep = 1,
  emNvSynchronize_CancelDspSleeep = 2,
  emNvSynchronize_RecountAutoSleepTime = 3
};
MTMSG_API bool EmNvUISynchronizeReason_IsValid(int value);
const EmNvUISynchronizeReason EmNvUISynchronizeReason_MIN = emNvSynchronize_Upgrade;
const EmNvUISynchronizeReason EmNvUISynchronizeReason_MAX = emNvSynchronize_RecountAutoSleepTime;
const int EmNvUISynchronizeReason_ARRAYSIZE = EmNvUISynchronizeReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvUISynchronizeReason_descriptor();
inline const ::std::string& EmNvUISynchronizeReason_Name(EmNvUISynchronizeReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvUISynchronizeReason_descriptor(), value);
}
inline bool EmNvUISynchronizeReason_Parse(
    const ::std::string& name, EmNvUISynchronizeReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvUISynchronizeReason>(
    EmNvUISynchronizeReason_descriptor(), name, value);
}
enum EmNvVideoOutPort {
  emNv_OUT_HDMI0 = 0,
  emNv_OUT_HDMI1 = 1
};
MTMSG_API bool EmNvVideoOutPort_IsValid(int value);
const EmNvVideoOutPort EmNvVideoOutPort_MIN = emNv_OUT_HDMI0;
const EmNvVideoOutPort EmNvVideoOutPort_MAX = emNv_OUT_HDMI1;
const int EmNvVideoOutPort_ARRAYSIZE = EmNvVideoOutPort_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvVideoOutPort_descriptor();
inline const ::std::string& EmNvVideoOutPort_Name(EmNvVideoOutPort value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvVideoOutPort_descriptor(), value);
}
inline bool EmNvVideoOutPort_Parse(
    const ::std::string& name, EmNvVideoOutPort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvVideoOutPort>(
    EmNvVideoOutPort_descriptor(), name, value);
}
enum EmNvVideoInPort {
  emNv_IN_HDMI0 = 0,
  emNv_IN_HDMI1 = 1,
  emNv_IN_HDMI2 = 2,
  emNv_IN_DSP_VP = 3,
  emNv_IN_OSD_VP = 4
};
MTMSG_API bool EmNvVideoInPort_IsValid(int value);
const EmNvVideoInPort EmNvVideoInPort_MIN = emNv_IN_HDMI0;
const EmNvVideoInPort EmNvVideoInPort_MAX = emNv_IN_OSD_VP;
const int EmNvVideoInPort_ARRAYSIZE = EmNvVideoInPort_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvVideoInPort_descriptor();
inline const ::std::string& EmNvVideoInPort_Name(EmNvVideoInPort value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvVideoInPort_descriptor(), value);
}
inline bool EmNvVideoInPort_Parse(
    const ::std::string& name, EmNvVideoInPort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvVideoInPort>(
    EmNvVideoInPort_descriptor(), name, value);
}
enum EmNvImixVidSrcType {
  emNv_Vid_Invalid = 0,
  emNv_Vid_IMIX = 1,
  emNv_Vid_OPS = 2,
  emNv_Vid_TV_HDMI = 3,
  emNv_Vid_MT = 4,
  emNv_Vid_VGA = 5,
  emNv_Vid_HDMI = 6,
  emNv_Vid_QuickShare1 = 7,
  emNv_Vid_QuickShare2 = 8,
  emNv_Vid_QuickShare3 = 9,
  emNv_Vid_QuickShare4 = 10,
  emNv_Vid_QuickShare5 = 11,
  emNv_Vid_QuickShare6 = 12,
  emNv_Vid_QuickShare7 = 13,
  emNv_Vid_QuickShare8 = 14,
  emNv_Vid_DLNA = 15,
  emNv_Vid_ScreenDraw = 16,
  emNv_Vid_UDisk1 = 17,
  emNv_Vid_UDisk2 = 18,
  emNv_Vid_LocalEcho = 19
};
MTMSG_API bool EmNvImixVidSrcType_IsValid(int value);
const EmNvImixVidSrcType EmNvImixVidSrcType_MIN = emNv_Vid_Invalid;
const EmNvImixVidSrcType EmNvImixVidSrcType_MAX = emNv_Vid_LocalEcho;
const int EmNvImixVidSrcType_ARRAYSIZE = EmNvImixVidSrcType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvImixVidSrcType_descriptor();
inline const ::std::string& EmNvImixVidSrcType_Name(EmNvImixVidSrcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvImixVidSrcType_descriptor(), value);
}
inline bool EmNvImixVidSrcType_Parse(
    const ::std::string& name, EmNvImixVidSrcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvImixVidSrcType>(
    EmNvImixVidSrcType_descriptor(), name, value);
}
enum EmNvMtSvType {
  emNv_MtSv_Hdmi = 0,
  emNv_MtSv_Vga = 1
};
MTMSG_API bool EmNvMtSvType_IsValid(int value);
const EmNvMtSvType EmNvMtSvType_MIN = emNv_MtSv_Hdmi;
const EmNvMtSvType EmNvMtSvType_MAX = emNv_MtSv_Vga;
const int EmNvMtSvType_ARRAYSIZE = EmNvMtSvType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvMtSvType_descriptor();
inline const ::std::string& EmNvMtSvType_Name(EmNvMtSvType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvMtSvType_descriptor(), value);
}
inline bool EmNvMtSvType_Parse(
    const ::std::string& name, EmNvMtSvType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvMtSvType>(
    EmNvMtSvType_descriptor(), name, value);
}
enum EmNvApiMode {
  emNvLocMode = 0,
  emNvRnvMode = 1
};
MTMSG_API bool EmNvApiMode_IsValid(int value);
const EmNvApiMode EmNvApiMode_MIN = emNvLocMode;
const EmNvApiMode EmNvApiMode_MAX = emNvRnvMode;
const int EmNvApiMode_ARRAYSIZE = EmNvApiMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvApiMode_descriptor();
inline const ::std::string& EmNvApiMode_Name(EmNvApiMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvApiMode_descriptor(), value);
}
inline bool EmNvApiMode_Parse(
    const ::std::string& name, EmNvApiMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvApiMode>(
    EmNvApiMode_descriptor(), name, value);
}
enum EmNvSleepFailReason {
  emNvSFRNoError = 0,
  emNvSFRProtectionTime = 1,
  emNvSFRMonitor = 2,
  emNvSFRInConf = 3,
  emNvSFRLoop = 4,
  emNvSFRRibbonTest = 5,
  emNvSFRSnapView = 6,
  emNvSFRVrs = 7,
  emNvSFRUpgrade = 8,
  emNvSFRSusUpgrade = 9,
  emNvSFRNetCap = 10,
  emNvSFRAddrbook = 11,
  emNvSFRSnapExport = 12,
  emNvSFRInConfByPower = 30,
  emNvSFRInSysUpGrade = 31,
  emNvSFRInQkupgrade = 32
};
MTMSG_API bool EmNvSleepFailReason_IsValid(int value);
const EmNvSleepFailReason EmNvSleepFailReason_MIN = emNvSFRNoError;
const EmNvSleepFailReason EmNvSleepFailReason_MAX = emNvSFRInQkupgrade;
const int EmNvSleepFailReason_ARRAYSIZE = EmNvSleepFailReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvSleepFailReason_descriptor();
inline const ::std::string& EmNvSleepFailReason_Name(EmNvSleepFailReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvSleepFailReason_descriptor(), value);
}
inline bool EmNvSleepFailReason_Parse(
    const ::std::string& name, EmNvSleepFailReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvSleepFailReason>(
    EmNvSleepFailReason_descriptor(), name, value);
}
enum EmNvTimeZone {
  emNvTimeZone_GMT = 0,
  emNvTimeZone_UTC = 1,
  emNvTimeZone_ECT = 2,
  emNvTimeZone_EET = 3,
  emNvTimeZone_ART = 4,
  emNvTimeZone_EAT = 5,
  emNvTimeZone_MET = 6,
  emNvTimeZone_NET = 7,
  emNvTimeZone_PLT = 8,
  emNvTimeZone_IST = 9,
  emNvTimeZone_BST = 10,
  emNvTimeZone_VST = 11,
  emNvTimeZone_CTT = 12,
  emNvTimeZone_JST = 13,
  emNvTimeZone_ACT = 14,
  emNvTimeZone_AET = 15,
  emNvTimeZone_SST = 16,
  emNvTimeZone_NST = 17,
  emNvTimeZone_MIT = 18,
  emNvTimeZone_HST = 19,
  emNvTimeZone_AST = 20,
  emNvTimeZone_PST = 21,
  emNvTimeZone_PNT = 22,
  emNvTimeZone_MST = 23,
  emNvTimeZone_CST = 24,
  emNvTimeZone_EST = 25,
  emNvTimeZone_IET = 26,
  emNvTimeZone_PRT = 27,
  emNvTimeZone_CNT = 28,
  emNvTimeZone_AGT = 29,
  emNvTimeZone_BET = 30,
  emNvTimeZone_CAT = 31
};
MTMSG_API bool EmNvTimeZone_IsValid(int value);
const EmNvTimeZone EmNvTimeZone_MIN = emNvTimeZone_GMT;
const EmNvTimeZone EmNvTimeZone_MAX = emNvTimeZone_CAT;
const int EmNvTimeZone_ARRAYSIZE = EmNvTimeZone_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvTimeZone_descriptor();
inline const ::std::string& EmNvTimeZone_Name(EmNvTimeZone value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvTimeZone_descriptor(), value);
}
inline bool EmNvTimeZone_Parse(
    const ::std::string& name, EmNvTimeZone* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvTimeZone>(
    EmNvTimeZone_descriptor(), name, value);
}
enum EmNvDevRegUpdateSer {
  emNvDevInvalid = 0,
  emNvIMIX = 1,
  emNvTPad = 2,
  emNvQuickShare = 3,
  emNvPower = 4
};
MTMSG_API bool EmNvDevRegUpdateSer_IsValid(int value);
const EmNvDevRegUpdateSer EmNvDevRegUpdateSer_MIN = emNvDevInvalid;
const EmNvDevRegUpdateSer EmNvDevRegUpdateSer_MAX = emNvPower;
const int EmNvDevRegUpdateSer_ARRAYSIZE = EmNvDevRegUpdateSer_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvDevRegUpdateSer_descriptor();
inline const ::std::string& EmNvDevRegUpdateSer_Name(EmNvDevRegUpdateSer value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvDevRegUpdateSer_descriptor(), value);
}
inline bool EmNvDevRegUpdateSer_Parse(
    const ::std::string& name, EmNvDevRegUpdateSer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvDevRegUpdateSer>(
    EmNvDevRegUpdateSer_descriptor(), name, value);
}
enum EmNvUpdateType {
  emNvUpdateForced = 0,
  emNvUpdateSelected = 1
};
MTMSG_API bool EmNvUpdateType_IsValid(int value);
const EmNvUpdateType EmNvUpdateType_MIN = emNvUpdateForced;
const EmNvUpdateType EmNvUpdateType_MAX = emNvUpdateSelected;
const int EmNvUpdateType_ARRAYSIZE = EmNvUpdateType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvUpdateType_descriptor();
inline const ::std::string& EmNvUpdateType_Name(EmNvUpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvUpdateType_descriptor(), value);
}
inline bool EmNvUpdateType_Parse(
    const ::std::string& name, EmNvUpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvUpdateType>(
    EmNvUpdateType_descriptor(), name, value);
}
enum EmNvCnLoginUpdateRet {
  emNvCnLoginUpdateInvalid = 0,
  emNvCnLoginUpdateFail = 1,
  emNvCnLoginUpdateSuccess = 2
};
MTMSG_API bool EmNvCnLoginUpdateRet_IsValid(int value);
const EmNvCnLoginUpdateRet EmNvCnLoginUpdateRet_MIN = emNvCnLoginUpdateInvalid;
const EmNvCnLoginUpdateRet EmNvCnLoginUpdateRet_MAX = emNvCnLoginUpdateSuccess;
const int EmNvCnLoginUpdateRet_ARRAYSIZE = EmNvCnLoginUpdateRet_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvCnLoginUpdateRet_descriptor();
inline const ::std::string& EmNvCnLoginUpdateRet_Name(EmNvCnLoginUpdateRet value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvCnLoginUpdateRet_descriptor(), value);
}
inline bool EmNvCnLoginUpdateRet_Parse(
    const ::std::string& name, EmNvCnLoginUpdateRet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvCnLoginUpdateRet>(
    EmNvCnLoginUpdateRet_descriptor(), name, value);
}
enum EmNvScreenColorTemperature {
  emNvCT_Standard = 0,
  emNvCT_Rathercold = 1,
  emNvCT_Warm = 2
};
MTMSG_API bool EmNvScreenColorTemperature_IsValid(int value);
const EmNvScreenColorTemperature EmNvScreenColorTemperature_MIN = emNvCT_Standard;
const EmNvScreenColorTemperature EmNvScreenColorTemperature_MAX = emNvCT_Warm;
const int EmNvScreenColorTemperature_ARRAYSIZE = EmNvScreenColorTemperature_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvScreenColorTemperature_descriptor();
inline const ::std::string& EmNvScreenColorTemperature_Name(EmNvScreenColorTemperature value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvScreenColorTemperature_descriptor(), value);
}
inline bool EmNvScreenColorTemperature_Parse(
    const ::std::string& name, EmNvScreenColorTemperature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvScreenColorTemperature>(
    EmNvScreenColorTemperature_descriptor(), name, value);
}
enum EmNvScreenType {
  emNvSc_Right = 0,
  emNvSc_Left = 1
};
MTMSG_API bool EmNvScreenType_IsValid(int value);
const EmNvScreenType EmNvScreenType_MIN = emNvSc_Right;
const EmNvScreenType EmNvScreenType_MAX = emNvSc_Left;
const int EmNvScreenType_ARRAYSIZE = EmNvScreenType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvScreenType_descriptor();
inline const ::std::string& EmNvScreenType_Name(EmNvScreenType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvScreenType_descriptor(), value);
}
inline bool EmNvScreenType_Parse(
    const ::std::string& name, EmNvScreenType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvScreenType>(
    EmNvScreenType_descriptor(), name, value);
}
enum EmNvSubModel {
  emNvSubModelBegin = 0,
  emNvSub_NEX1110A_55 = 1,
  emNvSub_NEX1110A_65 = 2,
  emNvSub_NEX1110A_75 = 3,
  emNvSub_NEX1210A_55 = 4,
  emNvSub_NEX1210A_65 = 5,
  emNvSub_NEX1210A_75 = 6,
  emNvSub_NEX1110B_55 = 7,
  emNvSub_NEX1210B_55 = 8,
  emNvSub_NEX1110A_55T = 9,
  emNvSub_NEX1110A_65T = 10,
  emNvSub_NEX1110A_75T = 11,
  emNvSub_NEX1210A_55T = 12,
  emNvSub_NEX1210A_65T = 13,
  emNvSub_NEX1210A_75T = 14,
  emNvSub_NEX1210H_75 = 15,
  emNvSub_NEX1210H_75T = 16,
  emNvSub_NEX1310E_75 = 17
};
MTMSG_API bool EmNvSubModel_IsValid(int value);
const EmNvSubModel EmNvSubModel_MIN = emNvSubModelBegin;
const EmNvSubModel EmNvSubModel_MAX = emNvSub_NEX1310E_75;
const int EmNvSubModel_ARRAYSIZE = EmNvSubModel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvSubModel_descriptor();
inline const ::std::string& EmNvSubModel_Name(EmNvSubModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvSubModel_descriptor(), value);
}
inline bool EmNvSubModel_Parse(
    const ::std::string& name, EmNvSubModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvSubModel>(
    EmNvSubModel_descriptor(), name, value);
}
enum EmNvTvDisplayRatio {
  emNvTvDR16to9 = 0,
  emNvTvDRFull = 1,
  emNvTvDR4to3 = 2
};
MTMSG_API bool EmNvTvDisplayRatio_IsValid(int value);
const EmNvTvDisplayRatio EmNvTvDisplayRatio_MIN = emNvTvDR16to9;
const EmNvTvDisplayRatio EmNvTvDisplayRatio_MAX = emNvTvDR4to3;
const int EmNvTvDisplayRatio_ARRAYSIZE = EmNvTvDisplayRatio_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvTvDisplayRatio_descriptor();
inline const ::std::string& EmNvTvDisplayRatio_Name(EmNvTvDisplayRatio value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvTvDisplayRatio_descriptor(), value);
}
inline bool EmNvTvDisplayRatio_Parse(
    const ::std::string& name, EmNvTvDisplayRatio* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvTvDisplayRatio>(
    EmNvTvDisplayRatio_descriptor(), name, value);
}
enum EmNvViewReason {
  emNvView_Success = 0,
  emNvView_NoSignal = 1,
  emNvView_Offline = 2,
  emNvView_UnknowReason = 3,
  emNvView_NotViewed = 4,
  emNvView_OverFormat = 5,
  emNvView_OpsNoSignal = 6
};
MTMSG_API bool EmNvViewReason_IsValid(int value);
const EmNvViewReason EmNvViewReason_MIN = emNvView_Success;
const EmNvViewReason EmNvViewReason_MAX = emNvView_OpsNoSignal;
const int EmNvViewReason_ARRAYSIZE = EmNvViewReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvViewReason_descriptor();
inline const ::std::string& EmNvViewReason_Name(EmNvViewReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvViewReason_descriptor(), value);
}
inline bool EmNvViewReason_Parse(
    const ::std::string& name, EmNvViewReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvViewReason>(
    EmNvViewReason_descriptor(), name, value);
}
enum EmNvEncodeMode {
  emNvQualityFirst = 0,
  emNvSpeedFirst = 1
};
MTMSG_API bool EmNvEncodeMode_IsValid(int value);
const EmNvEncodeMode EmNvEncodeMode_MIN = emNvQualityFirst;
const EmNvEncodeMode EmNvEncodeMode_MAX = emNvSpeedFirst;
const int EmNvEncodeMode_ARRAYSIZE = EmNvEncodeMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvEncodeMode_descriptor();
inline const ::std::string& EmNvEncodeMode_Name(EmNvEncodeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvEncodeMode_descriptor(), value);
}
inline bool EmNvEncodeMode_Parse(
    const ::std::string& name, EmNvEncodeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvEncodeMode>(
    EmNvEncodeMode_descriptor(), name, value);
}
enum EmNvPowerTurnOffReason {
  emNvTurnOffReason_Success = 0,
  emNvTurnOffReason_Upgrade = 1,
  emNvTurnOffReason_OpsFailed = 2,
  emNvTurnOffReason_Conf = 3,
  emNvTurnOffReason_QkUpgrade = 4
};
MTMSG_API bool EmNvPowerTurnOffReason_IsValid(int value);
const EmNvPowerTurnOffReason EmNvPowerTurnOffReason_MIN = emNvTurnOffReason_Success;
const EmNvPowerTurnOffReason EmNvPowerTurnOffReason_MAX = emNvTurnOffReason_QkUpgrade;
const int EmNvPowerTurnOffReason_ARRAYSIZE = EmNvPowerTurnOffReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvPowerTurnOffReason_descriptor();
inline const ::std::string& EmNvPowerTurnOffReason_Name(EmNvPowerTurnOffReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvPowerTurnOffReason_descriptor(), value);
}
inline bool EmNvPowerTurnOffReason_Parse(
    const ::std::string& name, EmNvPowerTurnOffReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvPowerTurnOffReason>(
    EmNvPowerTurnOffReason_descriptor(), name, value);
}
enum EmNvAudPortIn {
  emNvAudIn_HDMI0 = 0,
  emNvAudIn_HDMI1 = 1,
  emNvAudIn_HDMI2 = 2,
  emNvAudIn_HDMI3 = 3,
  emNvAudIn_RCA = 4,
  emNvAudIn_HDMI4 = 5
};
MTMSG_API bool EmNvAudPortIn_IsValid(int value);
const EmNvAudPortIn EmNvAudPortIn_MIN = emNvAudIn_HDMI0;
const EmNvAudPortIn EmNvAudPortIn_MAX = emNvAudIn_HDMI4;
const int EmNvAudPortIn_ARRAYSIZE = EmNvAudPortIn_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvAudPortIn_descriptor();
inline const ::std::string& EmNvAudPortIn_Name(EmNvAudPortIn value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvAudPortIn_descriptor(), value);
}
inline bool EmNvAudPortIn_Parse(
    const ::std::string& name, EmNvAudPortIn* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvAudPortIn>(
    EmNvAudPortIn_descriptor(), name, value);
}
enum EmNvAudPortOut {
  emNvAudOut_HDMI0 = 0,
  emNvAudOut_HDMI1 = 1,
  emNvAudOut_JACK_3mm5 = 2
};
MTMSG_API bool EmNvAudPortOut_IsValid(int value);
const EmNvAudPortOut EmNvAudPortOut_MIN = emNvAudOut_HDMI0;
const EmNvAudPortOut EmNvAudPortOut_MAX = emNvAudOut_JACK_3mm5;
const int EmNvAudPortOut_ARRAYSIZE = EmNvAudPortOut_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvAudPortOut_descriptor();
inline const ::std::string& EmNvAudPortOut_Name(EmNvAudPortOut value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvAudPortOut_descriptor(), value);
}
inline bool EmNvAudPortOut_Parse(
    const ::std::string& name, EmNvAudPortOut* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvAudPortOut>(
    EmNvAudPortOut_descriptor(), name, value);
}
enum EmNvPingErrcode {
  emNvPingReply = 0,
  emNvPingTimeout = 1,
  emNvPingError = 2,
  emNvPingNetUnreach = 3
};
MTMSG_API bool EmNvPingErrcode_IsValid(int value);
const EmNvPingErrcode EmNvPingErrcode_MIN = emNvPingReply;
const EmNvPingErrcode EmNvPingErrcode_MAX = emNvPingNetUnreach;
const int EmNvPingErrcode_ARRAYSIZE = EmNvPingErrcode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvPingErrcode_descriptor();
inline const ::std::string& EmNvPingErrcode_Name(EmNvPingErrcode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvPingErrcode_descriptor(), value);
}
inline bool EmNvPingErrcode_Parse(
    const ::std::string& name, EmNvPingErrcode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvPingErrcode>(
    EmNvPingErrcode_descriptor(), name, value);
}
enum EmNVSerialMode {
  emRS232 = 0,
  emRS422 = 1,
  emRS485 = 2,
  emSerialInfrared = 3,
  emRJ11 = 4
};
MTMSG_API bool EmNVSerialMode_IsValid(int value);
const EmNVSerialMode EmNVSerialMode_MIN = emRS232;
const EmNVSerialMode EmNVSerialMode_MAX = emRJ11;
const int EmNVSerialMode_ARRAYSIZE = EmNVSerialMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNVSerialMode_descriptor();
inline const ::std::string& EmNVSerialMode_Name(EmNVSerialMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNVSerialMode_descriptor(), value);
}
inline bool EmNVSerialMode_Parse(
    const ::std::string& name, EmNVSerialMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNVSerialMode>(
    EmNVSerialMode_descriptor(), name, value);
}
enum EmEthnetWorkMode {
  emEthModeAuto = 0,
  emEthMode10MFull = 1,
  emEthMode10MHalf = 2,
  emEthMode100MFull = 3,
  emEthMode100MHalf = 4,
  emEthMode1000MFull = 5,
  emEthMode1000MHalf = 6
};
MTMSG_API bool EmEthnetWorkMode_IsValid(int value);
const EmEthnetWorkMode EmEthnetWorkMode_MIN = emEthModeAuto;
const EmEthnetWorkMode EmEthnetWorkMode_MAX = emEthMode1000MHalf;
const int EmEthnetWorkMode_ARRAYSIZE = EmEthnetWorkMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEthnetWorkMode_descriptor();
inline const ::std::string& EmEthnetWorkMode_Name(EmEthnetWorkMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEthnetWorkMode_descriptor(), value);
}
inline bool EmEthnetWorkMode_Parse(
    const ::std::string& name, EmEthnetWorkMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEthnetWorkMode>(
    EmEthnetWorkMode_descriptor(), name, value);
}
enum EmEthInterfaceMode {
  emEthInterfaceModeBackup = 0,
  emEthInterfaceModeMulti = 1
};
MTMSG_API bool EmEthInterfaceMode_IsValid(int value);
const EmEthInterfaceMode EmEthInterfaceMode_MIN = emEthInterfaceModeBackup;
const EmEthInterfaceMode EmEthInterfaceMode_MAX = emEthInterfaceModeMulti;
const int EmEthInterfaceMode_ARRAYSIZE = EmEthInterfaceMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEthInterfaceMode_descriptor();
inline const ::std::string& EmEthInterfaceMode_Name(EmEthInterfaceMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEthInterfaceMode_descriptor(), value);
}
inline bool EmEthInterfaceMode_Parse(
    const ::std::string& name, EmEthInterfaceMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEthInterfaceMode>(
    EmEthInterfaceMode_descriptor(), name, value);
}
enum EmEthStartupResult {
  emEthStartupSuccess = 0,
  emEthStartupFail = 1
};
MTMSG_API bool EmEthStartupResult_IsValid(int value);
const EmEthStartupResult EmEthStartupResult_MIN = emEthStartupSuccess;
const EmEthStartupResult EmEthStartupResult_MAX = emEthStartupFail;
const int EmEthStartupResult_ARRAYSIZE = EmEthStartupResult_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEthStartupResult_descriptor();
inline const ::std::string& EmEthStartupResult_Name(EmEthStartupResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEthStartupResult_descriptor(), value);
}
inline bool EmEthStartupResult_Parse(
    const ::std::string& name, EmEthStartupResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEthStartupResult>(
    EmEthStartupResult_descriptor(), name, value);
}
enum EmEthnetParamType {
  emType_SetIpAndMask = 0,
  emType_SetMacAddress = 1,
  emType_SetAllParam = 2,
  emType_SetSecondIp = 3
};
MTMSG_API bool EmEthnetParamType_IsValid(int value);
const EmEthnetParamType EmEthnetParamType_MIN = emType_SetIpAndMask;
const EmEthnetParamType EmEthnetParamType_MAX = emType_SetSecondIp;
const int EmEthnetParamType_ARRAYSIZE = EmEthnetParamType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEthnetParamType_descriptor();
inline const ::std::string& EmEthnetParamType_Name(EmEthnetParamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEthnetParamType_descriptor(), value);
}
inline bool EmEthnetParamType_Parse(
    const ::std::string& name, EmEthnetParamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEthnetParamType>(
    EmEthnetParamType_descriptor(), name, value);
}
enum EmNvVidResResizeMode {
  emNvPanoramicLift = 0,
  emNvFullScreenMid = 1
};
MTMSG_API bool EmNvVidResResizeMode_IsValid(int value);
const EmNvVidResResizeMode EmNvVidResResizeMode_MIN = emNvPanoramicLift;
const EmNvVidResResizeMode EmNvVidResResizeMode_MAX = emNvFullScreenMid;
const int EmNvVidResResizeMode_ARRAYSIZE = EmNvVidResResizeMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvVidResResizeMode_descriptor();
inline const ::std::string& EmNvVidResResizeMode_Name(EmNvVidResResizeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvVidResResizeMode_descriptor(), value);
}
inline bool EmNvVidResResizeMode_Parse(
    const ::std::string& name, EmNvVidResResizeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvVidResResizeMode>(
    EmNvVidResResizeMode_descriptor(), name, value);
}
enum EmNvIfaceInstruction {
  emNvIface_Invalid = 0,
  emNvIface_Hdmi1_Has = 1,
  emNvIface_Hdmi1_No = 2,
  emNvIface_Hdmi2_Has = 3,
  emNvIface_Hdmi2_No = 4
};
MTMSG_API bool EmNvIfaceInstruction_IsValid(int value);
const EmNvIfaceInstruction EmNvIfaceInstruction_MIN = emNvIface_Invalid;
const EmNvIfaceInstruction EmNvIfaceInstruction_MAX = emNvIface_Hdmi2_No;
const int EmNvIfaceInstruction_ARRAYSIZE = EmNvIfaceInstruction_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvIfaceInstruction_descriptor();
inline const ::std::string& EmNvIfaceInstruction_Name(EmNvIfaceInstruction value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvIfaceInstruction_descriptor(), value);
}
inline bool EmNvIfaceInstruction_Parse(
    const ::std::string& name, EmNvIfaceInstruction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvIfaceInstruction>(
    EmNvIfaceInstruction_descriptor(), name, value);
}
enum EmMtVer {
  enNVMtX300 = 0,
  enNvMtX500 = 1,
  enNvMtX700 = 2
};
MTMSG_API bool EmMtVer_IsValid(int value);
const EmMtVer EmMtVer_MIN = enNVMtX300;
const EmMtVer EmMtVer_MAX = enNvMtX700;
const int EmMtVer_ARRAYSIZE = EmMtVer_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtVer_descriptor();
inline const ::std::string& EmMtVer_Name(EmMtVer value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtVer_descriptor(), value);
}
inline bool EmMtVer_Parse(
    const ::std::string& name, EmMtVer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtVer>(
    EmMtVer_descriptor(), name, value);
}
enum EmNvHintCode {
  emNvHintBegin = 0,
  emNvFailtoSendDual = 1,
  emNvFailtoRecvDual = 2,
  emNvFailtoVodLogin = 3,
  emNvDHCPTimeOut = 4,
  emNvPPPoEAuthorError = 5,
  emNvPPPoEAgentError = 6,
  emNvPPPoETimeOutError = 7,
  emNvPPPoELinkDownError = 8,
  emNvPPPoEGeneralError = 9,
  emNvFailtoSendDualAsReject = 10,
  emNvCallRateNotValidForMc = 11,
  emNvDualResNotMatchConfRes = 12,
  emNvSuccedetoSendDual = 13,
  emNvSuccedetoRecvDual = 14,
  emNvSateMtNoP2pPermission = 15,
  emNvH323UpLoadBitrateLessThan64Ind = 16,
  emNvH323DownLoadBitrateLessThan64Ind = 17,
  emNvAssVidHasNoSignal = 18,
  emNvBePolledNext = 30,
  emNvHintNoOpenDSChnnlNonSpeaker = 31,
  emNvHintNoOpenDSChnnlNonCap = 32,
  emNvHintNoOpenDSChnnlBRLow64 = 33,
  emNvHintNoOpenDSChnnlFECType = 34,
  emNvHintNoOpenDSChnnlNonMp = 35,
  emNvHintNoOpenDSChnnlEncryptMode = 36,
  emNvHintNoOpenDSChnnlOverSatDCastChnNum = 37,
  emNvHintNoOpenFSChnnlNonCap = 38,
  emNvHintNoOpenFSChnnlBRLow64 = 39,
  emNvHintNoOpenFSChnnlEncrpytMode = 40,
  emNvHintNoOpenFSChnnlFECType = 41,
  emNvHintNoOpenFSChnnlNonMp = 42,
  emNvHintNoOpenFSChnnlBROverflow = 43,
  emNvHintNoOpenFSChnnlBothH263plus = 44,
  emNvHintNoOpenFSChnnlFormat = 45,
  emNvHintNoOpenFSChnnlFPS = 46,
  emNvHintBRLessThanConf = 47,
  emNvHintBRLargerThanConf = 48,
  emNvHintNoSupportOprForNoAuth = 49,
  emNvHintQueueConfNoIdleServer = 50,
  emNvHintQueueConfAllocatedServer = 51,
  emNvHintOldStackNotSupportSpecVip = 52,
  emNvHintOldStackNotSupportModifyDumb = 53,
  emNvHintOldStackNotSupportModifyConfPwd = 54,
  emNvHintOldStackNotSupportModifyConfNoDisturb = 55,
  emNvHintOldStackNotSupportModifyDuration = 56,
  emNvHintOldStackNotSupportModifyConfName = 57,
  emNvHintOldStackNotSupportSetAssStreamSendMod = 58,
  emNvHintAssVideoSourceIsSwitch = 59
};
MTMSG_API bool EmNvHintCode_IsValid(int value);
const EmNvHintCode EmNvHintCode_MIN = emNvHintBegin;
const EmNvHintCode EmNvHintCode_MAX = emNvHintAssVideoSourceIsSwitch;
const int EmNvHintCode_ARRAYSIZE = EmNvHintCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvHintCode_descriptor();
inline const ::std::string& EmNvHintCode_Name(EmNvHintCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvHintCode_descriptor(), value);
}
inline bool EmNvHintCode_Parse(
    const ::std::string& name, EmNvHintCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvHintCode>(
    EmNvHintCode_descriptor(), name, value);
}
enum EmNvTvInputSelect {
  enNvTvInvalid = 0,
  enNvTvHdmi1 = 1,
  enNvTvHdmi2 = 2
};
MTMSG_API bool EmNvTvInputSelect_IsValid(int value);
const EmNvTvInputSelect EmNvTvInputSelect_MIN = enNvTvInvalid;
const EmNvTvInputSelect EmNvTvInputSelect_MAX = enNvTvHdmi2;
const int EmNvTvInputSelect_ARRAYSIZE = EmNvTvInputSelect_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvTvInputSelect_descriptor();
inline const ::std::string& EmNvTvInputSelect_Name(EmNvTvInputSelect value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvTvInputSelect_descriptor(), value);
}
inline bool EmNvTvInputSelect_Parse(
    const ::std::string& name, EmNvTvInputSelect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvTvInputSelect>(
    EmNvTvInputSelect_descriptor(), name, value);
}
enum EmNvZoomMode {
  enNV_ZOOM_FILLBLACK = 0,
  enNV_ZOOM_CUT = 1,
  enNV_ZOOM_SCALE = 2
};
MTMSG_API bool EmNvZoomMode_IsValid(int value);
const EmNvZoomMode EmNvZoomMode_MIN = enNV_ZOOM_FILLBLACK;
const EmNvZoomMode EmNvZoomMode_MAX = enNV_ZOOM_SCALE;
const int EmNvZoomMode_ARRAYSIZE = EmNvZoomMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvZoomMode_descriptor();
inline const ::std::string& EmNvZoomMode_Name(EmNvZoomMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvZoomMode_descriptor(), value);
}
inline bool EmNvZoomMode_Parse(
    const ::std::string& name, EmNvZoomMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvZoomMode>(
    EmNvZoomMode_descriptor(), name, value);
}
enum EmNvScreen {
  enNV_Screen_Brightness = 0,
  enNV_Screen_Contrast = 1,
  enNV_Screen_Saturation = 2,
  enNV_Screen_Clarity = 3,
  enNV_Screen_Colortemp = 4,
  enNV_Screen_Displayratio = 5
};
MTMSG_API bool EmNvScreen_IsValid(int value);
const EmNvScreen EmNvScreen_MIN = enNV_Screen_Brightness;
const EmNvScreen EmNvScreen_MAX = enNV_Screen_Displayratio;
const int EmNvScreen_ARRAYSIZE = EmNvScreen_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvScreen_descriptor();
inline const ::std::string& EmNvScreen_Name(EmNvScreen value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvScreen_descriptor(), value);
}
inline bool EmNvScreen_Parse(
    const ::std::string& name, EmNvScreen* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvScreen>(
    EmNvScreen_descriptor(), name, value);
}
enum EmNvVidLabel {
  emNvVidLabBegin = 0,
  emNvPcStreamVidLab = 1,
  emNvVideoStreamVidLab = 2
};
MTMSG_API bool EmNvVidLabel_IsValid(int value);
const EmNvVidLabel EmNvVidLabel_MIN = emNvVidLabBegin;
const EmNvVidLabel EmNvVidLabel_MAX = emNvVideoStreamVidLab;
const int EmNvVidLabel_ARRAYSIZE = EmNvVidLabel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvVidLabel_descriptor();
inline const ::std::string& EmNvVidLabel_Name(EmNvVidLabel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvVidLabel_descriptor(), value);
}
inline bool EmNvVidLabel_Parse(
    const ::std::string& name, EmNvVidLabel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvVidLabel>(
    EmNvVidLabel_descriptor(), name, value);
}
enum EmNvMiniVidPos {
  emNvMini_RightBottom = 0,
  emNvMini_LeftBottom = 1,
  emNvMini_LeftTop = 2,
  emNvMini_RightTop = 3
};
MTMSG_API bool EmNvMiniVidPos_IsValid(int value);
const EmNvMiniVidPos EmNvMiniVidPos_MIN = emNvMini_RightBottom;
const EmNvMiniVidPos EmNvMiniVidPos_MAX = emNvMini_RightTop;
const int EmNvMiniVidPos_ARRAYSIZE = EmNvMiniVidPos_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvMiniVidPos_descriptor();
inline const ::std::string& EmNvMiniVidPos_Name(EmNvMiniVidPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvMiniVidPos_descriptor(), value);
}
inline bool EmNvMiniVidPos_Parse(
    const ::std::string& name, EmNvMiniVidPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvMiniVidPos>(
    EmNvMiniVidPos_descriptor(), name, value);
}
enum EmNvCallStatApi {
  emNvCallIdle_Api = 0,
  emNvCallRasConfJoining_Api = 1,
  emNvCallRasConfCreating_Api = 2,
  emNvCallOuting_Api = 3,
  emNvCallIncoming_Api = 4,
  emNvCallAccepted_Api = 5,
  emNvCallHanging_Api = 6,
  emNvCallConnected_Api = 7,
  emNvCallP2P_Api = 8,
  emNvCallMCU_Api = 9
};
MTMSG_API bool EmNvCallStatApi_IsValid(int value);
const EmNvCallStatApi EmNvCallStatApi_MIN = emNvCallIdle_Api;
const EmNvCallStatApi EmNvCallStatApi_MAX = emNvCallMCU_Api;
const int EmNvCallStatApi_ARRAYSIZE = EmNvCallStatApi_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvCallStatApi_descriptor();
inline const ::std::string& EmNvCallStatApi_Name(EmNvCallStatApi value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvCallStatApi_descriptor(), value);
}
inline bool EmNvCallStatApi_Parse(
    const ::std::string& name, EmNvCallStatApi* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvCallStatApi>(
    EmNvCallStatApi_descriptor(), name, value);
}
enum EmNvCallingType {
  emNvJoinConf_Api = 0,
  emNvCreateConf_Api = 1,
  emNvOutCall_Api = 2,
  emNvIncomingCall_Api = 3
};
MTMSG_API bool EmNvCallingType_IsValid(int value);
const EmNvCallingType EmNvCallingType_MIN = emNvJoinConf_Api;
const EmNvCallingType EmNvCallingType_MAX = emNvIncomingCall_Api;
const int EmNvCallingType_ARRAYSIZE = EmNvCallingType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvCallingType_descriptor();
inline const ::std::string& EmNvCallingType_Name(EmNvCallingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvCallingType_descriptor(), value);
}
inline bool EmNvCallingType_Parse(
    const ::std::string& name, EmNvCallingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvCallingType>(
    EmNvCallingType_descriptor(), name, value);
}
enum EmNvCallProtocol {
  emNvProtocolBegin_Api = 0,
  emNv323_Api = 1,
  emNvsip_Api = 2,
  emNvsat_Api = 3,
  emNvtip_Api = 4
};
MTMSG_API bool EmNvCallProtocol_IsValid(int value);
const EmNvCallProtocol EmNvCallProtocol_MIN = emNvProtocolBegin_Api;
const EmNvCallProtocol EmNvCallProtocol_MAX = emNvtip_Api;
const int EmNvCallProtocol_ARRAYSIZE = EmNvCallProtocol_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvCallProtocol_descriptor();
inline const ::std::string& EmNvCallProtocol_Name(EmNvCallProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvCallProtocol_descriptor(), value);
}
inline bool EmNvCallProtocol_Parse(
    const ::std::string& name, EmNvCallProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvCallProtocol>(
    EmNvCallProtocol_descriptor(), name, value);
}
enum EmNvCallDisReason {
  emDisconnectNv_Busy_Api = 0,
  emDisconnectNv_Normal_Api = 1,
  emDisconnectNv_Rejected_Api = 2,
  emDisconnectNv_Unreachable_Api = 3,
  emDisconnectNv_Local_Api = 4,
  emDisconnectNv_Unknown_Api = 5,
  emDisconnectNv_custom_Api = 6,
  emDisconnectNv_AdaptiveBusy_Api = 7,
  emDisconnectNv_Occupy_Api = 8,
  emDisconnectNv_Joinconftimeout_Api = 20,
  emDisconnectNv_Createconftimeout_Api = 21,
  emDisconnectNv_Nomediaresource_Api = 22,
  emDisconnectNv_Exceedmaxinconfmtnum_Api = 23,
  emDisconnectNv_Exceedmaxconfnum_Api = 24,
  emDisconnectNv_EncrypeErr_Api = 25,
  emDisconnectNv_P2Ptimeout_Api = 26,
  emDisconnectNv_MccDrop_Api = 27,
  emDisconnectNv_ChairDrop_Api = 28,
  emDisconnectNv_MMcuDrop_Api = 29,
  emDisconnectNv_ConfRelease_Api = 30,
  emDisconnectNv_PeerInConf_Api = 31,
  emDisconnectNv_PeerNoDisturb_Api = 32,
  emDisconnectNv_NotInPeerContact_Api = 33,
  emDisconnectNv_PeerNoP2PPermission_Api = 34,
  emDisconnectNv_PeerOnSleeping_Api = 35,
  emDisconnectNv_ConfAutoRelease_Api = 36,
  emDisconnectNv_REASON_BUSYEXT_Api = 37,
  emDisconnectNv_REASON_REMOTERECONNECT_Api = 38,
  emDisconnectNv_CallNumExceed_Api = 39,
  emDisconnectNv_NotRegedToCallFailed_Api = 40,
  emDisconnectNv_LocalVodPlaying_Api = 41,
  emDisconnectNv_SecCrtNotFind_Api = 42,
  emDisconnectNv_SecCrtVerifyFail_Api = 43,
  emDisconnectNv_SecCrtExpired_Api = 44,
  emDisconnectNv_SecCrtFormatError_Api = 45,
  emDisconnectNv_SecLoadCertFailed_Api = 46,
  emDisconnectNv_SecEncTypeError_Api = 47,
  emDisconnectNv_AuthenticationErr_Api = 48,
  emDisconnectNv_MtHasInConf_Api = 49,
  emDisconnectNv_End = 100
};
MTMSG_API bool EmNvCallDisReason_IsValid(int value);
const EmNvCallDisReason EmNvCallDisReason_MIN = emDisconnectNv_Busy_Api;
const EmNvCallDisReason EmNvCallDisReason_MAX = emDisconnectNv_End;
const int EmNvCallDisReason_ARRAYSIZE = EmNvCallDisReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvCallDisReason_descriptor();
inline const ::std::string& EmNvCallDisReason_Name(EmNvCallDisReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvCallDisReason_descriptor(), value);
}
inline bool EmNvCallDisReason_Parse(
    const ::std::string& name, EmNvCallDisReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvCallDisReason>(
    EmNvCallDisReason_descriptor(), name, value);
}
enum NvEndpointType {
  emNvEndpointTypeUnknown_Api = 0,
  emNvEndpointTypeMT_Api = 1,
  emNvEndpointTypeMCU_Api = 2,
  emNvEndpointTypeGK_Api = 4
};
MTMSG_API bool NvEndpointType_IsValid(int value);
const NvEndpointType NvEndpointType_MIN = emNvEndpointTypeUnknown_Api;
const NvEndpointType NvEndpointType_MAX = emNvEndpointTypeGK_Api;
const int NvEndpointType_ARRAYSIZE = NvEndpointType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* NvEndpointType_descriptor();
inline const ::std::string& NvEndpointType_Name(NvEndpointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NvEndpointType_descriptor(), value);
}
inline bool NvEndpointType_Parse(
    const ::std::string& name, NvEndpointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NvEndpointType>(
    NvEndpointType_descriptor(), name, value);
}
enum EmNvVideoPort_Api {
  emNvVidInvalid_Api = 0,
  emNvVidMultiView_Api = 1,
  emNvVidInnerCamera_Api = 2,
  emNvVidDVI1_Api = 3,
  emNvVidDVI2_Api = 4,
  emNvVidDVI3_Api = 5,
  emNvVidDVI4_Api = 6,
  emNvVidHDMI1_Api = 7,
  emNvVidHDMI2_Api = 8,
  emNvVidHDMI3_Api = 9,
  emNvVidHDMI4_Api = 10,
  emNvVidYPbPr1_Api = 11,
  emNvVidYPbPr2_Api = 12,
  emNvVidYPbPr3_Api = 13,
  emNvVidYPbPr4_Api = 14,
  emNvVidVGA1_Api = 15,
  emNvVidVGA2_Api = 16,
  emNvVidVGA3_Api = 17,
  emNvVidVGA4_Api = 18,
  emNvVidC1_Api = 19,
  emNvVidC2_Api = 20,
  emNvVidC3_Api = 21,
  emNvVidS1_Api = 22,
  emNvVidS2_Api = 23,
  emNvVidS3_Api = 24,
  emNvVidHDBaseT1_Api = 25,
  emNvVidHDBaseT2_Api = 26,
  emNvVidHDBaseT3_Api = 27,
  emNvVidHDBaseT4_Api = 28,
  emNvVidSDI1_Api = 29,
  emNvVidSDI2_Api = 30,
  emNvVidSDI3_Api = 31,
  emNvVidSDI4_Api = 32
};
MTMSG_API bool EmNvVideoPort_Api_IsValid(int value);
const EmNvVideoPort_Api EmNvVideoPort_Api_MIN = emNvVidInvalid_Api;
const EmNvVideoPort_Api EmNvVideoPort_Api_MAX = emNvVidSDI4_Api;
const int EmNvVideoPort_Api_ARRAYSIZE = EmNvVideoPort_Api_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvVideoPort_Api_descriptor();
inline const ::std::string& EmNvVideoPort_Api_Name(EmNvVideoPort_Api value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvVideoPort_Api_descriptor(), value);
}
inline bool EmNvVideoPort_Api_Parse(
    const ::std::string& name, EmNvVideoPort_Api* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvVideoPort_Api>(
    EmNvVideoPort_Api_descriptor(), name, value);
}
enum EmNvVideoOutType_Api {
  emVOTNv_Invalid_Api = 0,
  emVOTNv_DVI1_Api = 1,
  emVOTNv_DVI2_Api = 2,
  emVOTNv_DVI3_Api = 3,
  emVOTNv_DVI4_Api = 4,
  emVOTNv_HDMI1_Api = 5,
  emVOTNv_HDMI2_Api = 6,
  emVOTNv_HDMI3_Api = 7,
  emVOTNv_HDMI4_Api = 8,
  emVOTNv_YPbPr1_Api = 9,
  emVOTNv_YPbPr2_Api = 10,
  emVOTNv_YPbPr3_Api = 11,
  emVOTNv_YPbPr4_Api = 12,
  emVOTNv_VGA1_Api = 13,
  emVOTNv_VGA2_Api = 14,
  emVOTNv_VGA3_Api = 15,
  emVOTNv_VGA4_Api = 16,
  emVOTNv_SDI1_Api = 17,
  emVOTNv_SDI2_Api = 18,
  emVOTNv_SDI3_Api = 19,
  emVOTNv_SDI4_Api = 20,
  emVOTNv_C1_Api = 21,
  emVOTNv_C2_Api = 22,
  emVOTNv_C3_Api = 23
};
MTMSG_API bool EmNvVideoOutType_Api_IsValid(int value);
const EmNvVideoOutType_Api EmNvVideoOutType_Api_MIN = emVOTNv_Invalid_Api;
const EmNvVideoOutType_Api EmNvVideoOutType_Api_MAX = emVOTNv_C3_Api;
const int EmNvVideoOutType_Api_ARRAYSIZE = EmNvVideoOutType_Api_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvVideoOutType_Api_descriptor();
inline const ::std::string& EmNvVideoOutType_Api_Name(EmNvVideoOutType_Api value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvVideoOutType_Api_descriptor(), value);
}
inline bool EmNvVideoOutType_Api_Parse(
    const ::std::string& name, EmNvVideoOutType_Api* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvVideoOutType_Api>(
    EmNvVideoOutType_Api_descriptor(), name, value);
}
enum EmNvVideoSourceType_Api {
  emNv_Invalid_Api = 0,
  emNv_1stDec_Api = 1,
  emNv_2ndDec_Api = 2,
  emNv_3rdDec_Api = 3,
  emNv_4thDec_Api = 4,
  emNv_5thDec_Api = 5,
  emNv_6thDec_Api = 6,
  emNv_7thDec_Api = 7,
  emNv_8thDec_Api = 8,
  emNv_9thDec_Api = 9,
  emNv_10thDec_Api = 10,
  emNv_MtVidInnerCamera_Api = 11,
  emNv_MtVidDVI1_Api = 12,
  emNv_MtVidDVI2_Api = 13,
  emNv_MtVidDVI3_Api = 14,
  emNv_MtVidDVI4_Api = 15,
  emNv_MtVidHDMI1_Api = 16,
  emNv_MtVidHDMI2_Api = 17,
  emNv_MtVidHDMI3_Api = 18,
  emNv_MtVidHDMI4_Api = 19,
  emNv_MtVidYPbPr1_Api = 20,
  emNv_MtVidYPbPr2_Api = 21,
  emNv_MtVidYPbPr3_Api = 22,
  emNv_MtVidYPbPr4_Api = 23,
  emNv_MtVidVGA1_Api = 24,
  emNv_MtVidVGA2_Api = 25,
  emNv_MtVidVGA3_Api = 26,
  emNv_MtVidVGA4_Api = 27,
  emNv_MtVidC1_Api = 28,
  emNv_MtVidC2_Api = 29,
  emNv_MtVidC3_Api = 30,
  emNv_MtVidS1_Api = 31,
  emNv_MtVidS2_Api = 32,
  emNv_MtVidS3_Api = 33,
  emNv_MtVidHDBaseT1_Api = 34,
  emNv_MtVidHDBaseT2_Api = 35,
  emNv_MtVidHDBaseT3_Api = 36,
  emNv_MtVidHDBaseT4_Api = 37,
  emNv_MtVidSDI1_Api = 38,
  emNv_MtVidSDI2_Api = 39,
  emNv_MtVidSDI3_Api = 40,
  emNv_MtVidSDI4_Api = 41
};
MTMSG_API bool EmNvVideoSourceType_Api_IsValid(int value);
const EmNvVideoSourceType_Api EmNvVideoSourceType_Api_MIN = emNv_Invalid_Api;
const EmNvVideoSourceType_Api EmNvVideoSourceType_Api_MAX = emNv_MtVidSDI4_Api;
const int EmNvVideoSourceType_Api_ARRAYSIZE = EmNvVideoSourceType_Api_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvVideoSourceType_Api_descriptor();
inline const ::std::string& EmNvVideoSourceType_Api_Name(EmNvVideoSourceType_Api value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvVideoSourceType_Api_descriptor(), value);
}
inline bool EmNvVideoSourceType_Api_Parse(
    const ::std::string& name, EmNvVideoSourceType_Api* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvVideoSourceType_Api>(
    EmNvVideoSourceType_Api_descriptor(), name, value);
}
enum EmNvDynamicSrcType {
  emNvUnkownType = 0,
  emNvStaticSrc = 1,
  emNvDynamicSrc = 2,
  emNvQKorDLNA = 3
};
MTMSG_API bool EmNvDynamicSrcType_IsValid(int value);
const EmNvDynamicSrcType EmNvDynamicSrcType_MIN = emNvUnkownType;
const EmNvDynamicSrcType EmNvDynamicSrcType_MAX = emNvQKorDLNA;
const int EmNvDynamicSrcType_ARRAYSIZE = EmNvDynamicSrcType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvDynamicSrcType_descriptor();
inline const ::std::string& EmNvDynamicSrcType_Name(EmNvDynamicSrcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvDynamicSrcType_descriptor(), value);
}
inline bool EmNvDynamicSrcType_Parse(
    const ::std::string& name, EmNvDynamicSrcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvDynamicSrcType>(
    EmNvDynamicSrcType_descriptor(), name, value);
}
enum EmNvLeaveDrawReason {
  emNv_LeaveDrawReason_Invalid = 0,
  emNv_Draw_OPS_NoSignal = 1,
  emNv_Draw_TV_HDMI_NoSignal = 2,
  emNv_Draw_MT_NoSignal = 3,
  emNv_Draw_VGA_NoSignal = 4,
  emNv_Draw_HDMI_NoSignal = 5,
  emNv_Draw_QuickShare1_NoSignal = 6,
  emNv_Draw_QuickShare2_NoSignal = 7,
  emNv_Draw_QuickShare3_NoSignal = 8,
  emNv_Draw_QuickShare4_NoSignal = 9,
  emNv_Draw_QuickShare5_NoSignal = 10,
  emNv_Draw_QuickShare6_NoSignal = 11,
  emNv_Draw_QuickShare7_NoSignal = 12,
  emNv_Draw_QuickShare8_NoSignal = 13,
  emNv_Draw_DLNA_NoSignal = 14,
  emNv_Draw_UDisk1_NoSignal = 15,
  emNv_Draw_UDisk2_NoSignal = 16,
  emNv_Draw_CallIdle = 17,
  emNv_Draw_CallConnected = 18,
  emNv_Draw_StartRcvDual = 19,
  emNv_Draw_StopRcvDual = 20,
  emNv_Draw_StartSendDual = 21,
  emNv_Draw_StopSendDual = 22,
  emNv_Draw_QuickShare1_Start = 23,
  emNv_Draw_QuickShare2_Start = 24,
  emNv_Draw_QuickShare3_Start = 25,
  emNv_Draw_QuickShare4_Start = 26,
  emNv_Draw_QuickShare5_Start = 27,
  emNv_Draw_QuickShare6_Start = 28,
  emNv_Draw_QuickShare7_Start = 29,
  emNv_Draw_QuickShare8_Start = 30,
  emNv_Draw_DLNA_Start = 31,
  emNv_Draw_VGA_Start = 32,
  emNv_Draw_TV_HDMI_Start = 33,
  emNv_Draw_QuickShare1_Stop = 34,
  emNv_Draw_QuickShare2_Stop = 35,
  emNv_Draw_QuickShare3_Stop = 36,
  emNv_Draw_QuickShare4_Stop = 37,
  emNv_Draw_QuickShare5_Stop = 38,
  emNv_Draw_QuickShare6_Stop = 39,
  emNv_Draw_QuickShare7_Stop = 40,
  emNv_Draw_QuickShare8_Stop = 41,
  emNv_Draw_UDisk1_Start = 42,
  emNv_Draw_UDisk2_Start = 43,
  emNv_Draw_ops_Start = 44,
  emNv_Draw_ops_Stop = 45
};
MTMSG_API bool EmNvLeaveDrawReason_IsValid(int value);
const EmNvLeaveDrawReason EmNvLeaveDrawReason_MIN = emNv_LeaveDrawReason_Invalid;
const EmNvLeaveDrawReason EmNvLeaveDrawReason_MAX = emNv_Draw_ops_Stop;
const int EmNvLeaveDrawReason_ARRAYSIZE = EmNvLeaveDrawReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvLeaveDrawReason_descriptor();
inline const ::std::string& EmNvLeaveDrawReason_Name(EmNvLeaveDrawReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvLeaveDrawReason_descriptor(), value);
}
inline bool EmNvLeaveDrawReason_Parse(
    const ::std::string& name, EmNvLeaveDrawReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvLeaveDrawReason>(
    EmNvLeaveDrawReason_descriptor(), name, value);
}
enum EmNvPPTPageTurning {
  emNv_PageTurning_Invalid = 0,
  emNv_PageUp = 1,
  emNv_PageDown = 2,
  emNv_PPTStop = 3
};
MTMSG_API bool EmNvPPTPageTurning_IsValid(int value);
const EmNvPPTPageTurning EmNvPPTPageTurning_MIN = emNv_PageTurning_Invalid;
const EmNvPPTPageTurning EmNvPPTPageTurning_MAX = emNv_PPTStop;
const int EmNvPPTPageTurning_ARRAYSIZE = EmNvPPTPageTurning_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvPPTPageTurning_descriptor();
inline const ::std::string& EmNvPPTPageTurning_Name(EmNvPPTPageTurning value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvPPTPageTurning_descriptor(), value);
}
inline bool EmNvPPTPageTurning_Parse(
    const ::std::string& name, EmNvPPTPageTurning* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvPPTPageTurning>(
    EmNvPPTPageTurning_descriptor(), name, value);
}
enum EmNvAutoShutdownFailReason {
  emNv_AutoShutdownFailReason_Invalid = 0,
  emNv_AutoShutdown_Touch = 1,
  emNv_AutoShutdown_Conf = 2,
  emNv_AutoShutdown_Upgrage = 3,
  emNv_AutoShutdown_QkUpgrage = 4,
  emNv_AutoShutdown_ViewQK = 5,
  emNv_AutoShutdown_ViewDLNA = 6
};
MTMSG_API bool EmNvAutoShutdownFailReason_IsValid(int value);
const EmNvAutoShutdownFailReason EmNvAutoShutdownFailReason_MIN = emNv_AutoShutdownFailReason_Invalid;
const EmNvAutoShutdownFailReason EmNvAutoShutdownFailReason_MAX = emNv_AutoShutdown_ViewDLNA;
const int EmNvAutoShutdownFailReason_ARRAYSIZE = EmNvAutoShutdownFailReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvAutoShutdownFailReason_descriptor();
inline const ::std::string& EmNvAutoShutdownFailReason_Name(EmNvAutoShutdownFailReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvAutoShutdownFailReason_descriptor(), value);
}
inline bool EmNvAutoShutdownFailReason_Parse(
    const ::std::string& name, EmNvAutoShutdownFailReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvAutoShutdownFailReason>(
    EmNvAutoShutdownFailReason_descriptor(), name, value);
}
enum EmNvMtModel {
  emModelBegin = 0,
  emSkyWindows = 1,
  emSkyIPad = 2,
  emSkyIPhone = 3,
  emSkyAndroidPad = 7,
  emSkyAndroidPhone = 8,
  emX500_1080P60 = 9,
  emX500_1080P30 = 10,
  emX500_720P60 = 11,
  emX500_mo_1080P = 12,
  emX500_mo_720P = 13,
  emX500_oem_1080P = 14,
  emX500_oem_mo_1080P = 15,
  emTrueLink = 16,
  emTrueTouchIpad = 17,
  emTrueTouchIphone = 18,
  emTrueTouchAndroidPhone = 19,
  emTrueTouchAndroidPad = 20,
  emH950_1080P60 = 21,
  emTrueLinkTV = 22,
  emX700_4k30 = 23,
  emX700_oem_4k30 = 24,
  emX500_4k30 = 25,
  emX500_oem_4k30 = 26,
  emX300_1080P60 = 27,
  emX300_1080P30 = 28,
  emX300_720P60 = 29,
  emX300_oem_1080P60 = 30,
  emX500_1080P_60 = 31,
  emX500_1080P_30 = 32,
  emX500_oem_1080P_60 = 33,
  em300_1080P30 = 34,
  em300_720P60 = 35,
  em300_oem_1080P30 = 36,
  em300L_1080P30 = 37,
  em300L_720P60 = 38,
  em300L_oem_1080P30 = 39,
  em300_1080P60 = 40,
  em300_720P30 = 41,
  em300L_1080P60 = 42,
  em300L_720P30 = 43,
  emX300_720P30 = 44,
  emX500_720P_30 = 45,
  emX500_720P_60 = 46,
  em100_1080P30_12X = 47,
  em100_1080P30_3X = 48,
  em100L_720P = 49,
  em100_oem_1080P30_3X = 50,
  emSkyWindows_s = 51,
  emSkyIPad_s = 52,
  emSkyIPhone_s = 53,
  emSkyAndroidPad_s = 54,
  emSkyAndroidPhone_s = 55,
  emX300_1080P60_s = 56,
  emX500_1080P60_s = 57,
  em300_1080P60_s = 58,
  emX700_s = 59,
  emX500_4K_s = 60,
  em100_1080P30_12X_s = 61,
  emX300_1080P60_cs = 62,
  emX500_1080P60_cs = 63,
  em300_1080P60_cs = 64,
  emX700_cs = 65,
  emX500_4K_cs = 66,
  em100_1080P30_12X_cs = 67
};
MTMSG_API bool EmNvMtModel_IsValid(int value);
const EmNvMtModel EmNvMtModel_MIN = emModelBegin;
const EmNvMtModel EmNvMtModel_MAX = em100_1080P30_12X_cs;
const int EmNvMtModel_ARRAYSIZE = EmNvMtModel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvMtModel_descriptor();
inline const ::std::string& EmNvMtModel_Name(EmNvMtModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvMtModel_descriptor(), value);
}
inline bool EmNvMtModel_Parse(
    const ::std::string& name, EmNvMtModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvMtModel>(
    EmNvMtModel_descriptor(), name, value);
}
enum EmMtLocalSoundType {
  emLSRing = 0,
  emLSKeyTone = 1,
  emLSSpecialEffects = 2
};
MTMSG_API bool EmMtLocalSoundType_IsValid(int value);
const EmMtLocalSoundType EmMtLocalSoundType_MIN = emLSRing;
const EmMtLocalSoundType EmMtLocalSoundType_MAX = emLSSpecialEffects;
const int EmMtLocalSoundType_ARRAYSIZE = EmMtLocalSoundType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtLocalSoundType_descriptor();
inline const ::std::string& EmMtLocalSoundType_Name(EmMtLocalSoundType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtLocalSoundType_descriptor(), value);
}
inline bool EmMtLocalSoundType_Parse(
    const ::std::string& name, EmMtLocalSoundType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtLocalSoundType>(
    EmMtLocalSoundType_descriptor(), name, value);
}
enum EmMtLocalSoundIndex {
  emSound1st = 0,
  emSound2nd = 1,
  emSound3rd = 2,
  emSound4th = 3,
  emSound5th = 4,
  emSound6th = 5,
  emSound7th = 6,
  emSound8th = 7,
  emSound9th = 8
};
MTMSG_API bool EmMtLocalSoundIndex_IsValid(int value);
const EmMtLocalSoundIndex EmMtLocalSoundIndex_MIN = emSound1st;
const EmMtLocalSoundIndex EmMtLocalSoundIndex_MAX = emSound9th;
const int EmMtLocalSoundIndex_ARRAYSIZE = EmMtLocalSoundIndex_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtLocalSoundIndex_descriptor();
inline const ::std::string& EmMtLocalSoundIndex_Name(EmMtLocalSoundIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtLocalSoundIndex_descriptor(), value);
}
inline bool EmMtLocalSoundIndex_Parse(
    const ::std::string& name, EmMtLocalSoundIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtLocalSoundIndex>(
    EmMtLocalSoundIndex_descriptor(), name, value);
}
enum EmMtHDAudPortIn {
  emHDAudInBegin = 0,
  emHDAudInDMic1 = 1,
  emHDAudInDMic2 = 2,
  emHDAudInXLR = 3,
  emHDAudInWMic1 = 4,
  emHDAudInWMic2 = 5,
  emHDAudInWMic3 = 6,
  emHDAudInRCA = 7,
  emHDAudInTRS3_5 = 8,
  emHDAudInHDMI1 = 9,
  emHDAudInHDMI2 = 10,
  emHDAudInHDMI3 = 11,
  emHDAudInDHDMI = 12,
  emHDAudInSDI1 = 13,
  emHDAudInSDI2 = 14,
  emHDAudInHDBaseT1 = 15,
  emHDAudInHDBaseT2 = 16,
  emHDAudInDsiMic1 = 17,
  emHDAudInDsiMic2 = 18
};
MTMSG_API bool EmMtHDAudPortIn_IsValid(int value);
const EmMtHDAudPortIn EmMtHDAudPortIn_MIN = emHDAudInBegin;
const EmMtHDAudPortIn EmMtHDAudPortIn_MAX = emHDAudInDsiMic2;
const int EmMtHDAudPortIn_ARRAYSIZE = EmMtHDAudPortIn_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtHDAudPortIn_descriptor();
inline const ::std::string& EmMtHDAudPortIn_Name(EmMtHDAudPortIn value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtHDAudPortIn_descriptor(), value);
}
inline bool EmMtHDAudPortIn_Parse(
    const ::std::string& name, EmMtHDAudPortIn* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtHDAudPortIn>(
    EmMtHDAudPortIn_descriptor(), name, value);
}
enum EmMtCodecComponent {
  emVidMainEncoder = 0,
  emVidMainDecoder = 1,
  emAudMainEncoder = 2,
  emAudMainDecoder = 3,
  emAudMainMixer = 4,
  emVidMainMixer = 5,
  emVidAssEncoder = 6,
  emVidAssDecoder = 7,
  emAudAssEncoder = 8,
  emAudAssDecoder = 9,
  emAudAssMixer = 10,
  emVidAssMixer = 11,
  emCodecInvalid = 20
};
MTMSG_API bool EmMtCodecComponent_IsValid(int value);
const EmMtCodecComponent EmMtCodecComponent_MIN = emVidMainEncoder;
const EmMtCodecComponent EmMtCodecComponent_MAX = emCodecInvalid;
const int EmMtCodecComponent_ARRAYSIZE = EmMtCodecComponent_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtCodecComponent_descriptor();
inline const ::std::string& EmMtCodecComponent_Name(EmMtCodecComponent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtCodecComponent_descriptor(), value);
}
inline bool EmMtCodecComponent_Parse(
    const ::std::string& name, EmMtCodecComponent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtCodecComponent>(
    EmMtCodecComponent_descriptor(), name, value);
}
enum EmCodecComponentIndex {
  em1st_Api = 0,
  em2nd_Api = 1,
  em3rd_Api = 2,
  em4th_Api = 3,
  em5th_Api = 4,
  em6th_Api = 5,
  em7th_Api = 6,
  em8th_Api = 7,
  em9th_Api = 8
};
MTMSG_API bool EmCodecComponentIndex_IsValid(int value);
const EmCodecComponentIndex EmCodecComponentIndex_MIN = em1st_Api;
const EmCodecComponentIndex EmCodecComponentIndex_MAX = em9th_Api;
const int EmCodecComponentIndex_ARRAYSIZE = EmCodecComponentIndex_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCodecComponentIndex_descriptor();
inline const ::std::string& EmCodecComponentIndex_Name(EmCodecComponentIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCodecComponentIndex_descriptor(), value);
}
inline bool EmCodecComponentIndex_Parse(
    const ::std::string& name, EmCodecComponentIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCodecComponentIndex>(
    EmCodecComponentIndex_descriptor(), name, value);
}
enum EmMtConfProtocol {
  emProtocolBegin = 0,
  em323_Api = 1,
  emsip_Api = 2,
  emsat_Api = 3,
  emtip_Api = 4
};
MTMSG_API bool EmMtConfProtocol_IsValid(int value);
const EmMtConfProtocol EmMtConfProtocol_MIN = emProtocolBegin;
const EmMtConfProtocol EmMtConfProtocol_MAX = emtip_Api;
const int EmMtConfProtocol_ARRAYSIZE = EmMtConfProtocol_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtConfProtocol_descriptor();
inline const ::std::string& EmMtConfProtocol_Name(EmMtConfProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtConfProtocol_descriptor(), value);
}
inline bool EmMtConfProtocol_Parse(
    const ::std::string& name, EmMtConfProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtConfProtocol>(
    EmMtConfProtocol_descriptor(), name, value);
}
enum EmMtServerAddrType {
  emSrvAddrTypeDefault = 0,
  emSrvAddrTypeCustom = 1
};
MTMSG_API bool EmMtServerAddrType_IsValid(int value);
const EmMtServerAddrType EmMtServerAddrType_MIN = emSrvAddrTypeDefault;
const EmMtServerAddrType EmMtServerAddrType_MAX = emSrvAddrTypeCustom;
const int EmMtServerAddrType_ARRAYSIZE = EmMtServerAddrType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtServerAddrType_descriptor();
inline const ::std::string& EmMtServerAddrType_Name(EmMtServerAddrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtServerAddrType_descriptor(), value);
}
inline bool EmMtServerAddrType_Parse(
    const ::std::string& name, EmMtServerAddrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtServerAddrType>(
    EmMtServerAddrType_descriptor(), name, value);
}
enum EmMtAudioDelayCheckState {
  emAudioDelayBegin = 0,
  emAudioDelayChecking = 1,
  emAudioDelayChecked = 2,
  emAudioDelayTimeout = 3,
  emAudioDelayFailed = 4,
  emAudioDelayReserve1 = 5,
  emAudioDelayReserve2 = 6
};
MTMSG_API bool EmMtAudioDelayCheckState_IsValid(int value);
const EmMtAudioDelayCheckState EmMtAudioDelayCheckState_MIN = emAudioDelayBegin;
const EmMtAudioDelayCheckState EmMtAudioDelayCheckState_MAX = emAudioDelayReserve2;
const int EmMtAudioDelayCheckState_ARRAYSIZE = EmMtAudioDelayCheckState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtAudioDelayCheckState_descriptor();
inline const ::std::string& EmMtAudioDelayCheckState_Name(EmMtAudioDelayCheckState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtAudioDelayCheckState_descriptor(), value);
}
inline bool EmMtAudioDelayCheckState_Parse(
    const ::std::string& name, EmMtAudioDelayCheckState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtAudioDelayCheckState>(
    EmMtAudioDelayCheckState_descriptor(), name, value);
}
enum EmMtServerType {
  emAPS_Api = 0,
  emXNU_Api = 1,
  emSUS_Api = 2,
  emNMS_Api = 3,
  emNTS_Api = 4,
  emSIP_Api = 5,
  emNonH323_Api = 6,
  emStdH323_Api = 7,
  emNTP_Api = 8,
  emVOD_Api = 9,
  emMoMeeting_Api = 10,
  emMoPlatform_Api = 11,
  emVRS_Api = 12,
  emDCS_Api = 13,
  emServerTypeEnd_Api = 14
};
MTMSG_API bool EmMtServerType_IsValid(int value);
const EmMtServerType EmMtServerType_MIN = emAPS_Api;
const EmMtServerType EmMtServerType_MAX = emServerTypeEnd_Api;
const int EmMtServerType_ARRAYSIZE = EmMtServerType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtServerType_descriptor();
inline const ::std::string& EmMtServerType_Name(EmMtServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtServerType_descriptor(), value);
}
inline bool EmMtServerType_Parse(
    const ::std::string& name, EmMtServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtServerType>(
    EmMtServerType_descriptor(), name, value);
}
enum EmMtServerState {
  emSrvIdle_Api = 0,
  emSrvDnsQuerying_Api = 1,
  emSrvLogging_In_Api = 2,
  emSrvLogin_Succ_Api = 3,
  emSrvLogging_Out_Api = 4,
  emSrvDisconnected_Api = 5,
  emSrvLogin_Err_Api = 6
};
MTMSG_API bool EmMtServerState_IsValid(int value);
const EmMtServerState EmMtServerState_MIN = emSrvIdle_Api;
const EmMtServerState EmMtServerState_MAX = emSrvLogin_Err_Api;
const int EmMtServerState_ARRAYSIZE = EmMtServerState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtServerState_descriptor();
inline const ::std::string& EmMtServerState_Name(EmMtServerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtServerState_descriptor(), value);
}
inline bool EmMtServerState_Parse(
    const ::std::string& name, EmMtServerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtServerState>(
    EmMtServerState_descriptor(), name, value);
}
enum EmMtRegFailedReason {
  emGKFailedBegin_Api = 0,
  emGKUnReachable_Api = 1,
  emInvalidAliase_Api = 2,
  emDupAlias_Api = 3,
  emInvalidCallAddress_Api = 4,
  emResourceUnavailable_Api = 5,
  emRegNumberFull_Api = 7,
  emGKSecurityDenial_Api = 8,
  emGKDismatch_Api = 9,
  emUnRegGKReq_Api = 10,
  emRRQCreateHRASFailed_Api = 11,
  emRRQSendFailed_Api = 12,
  emSipFailedBegin_Api = 50,
  emSipLocalNormalUnreg_Api = 51,
  emSipInvalidUserNameAndPassword_Api = 52,
  emSipRegistrarUnReachable_Api = 53,
  emSipInvalidAlias_Api = 54,
  emSipUnknownReason_Api = 55,
  emSipRegisterFailed_Api = 56,
  emSipRegisterNameDup_Api = 57,
  emSecCrtNotFind_Api = 58,
  emSecCrtVerifyFail_Api = 59,
  emSecCrtExpired_Api = 60,
  emSecCrtFormatError_Api = 61,
  emSecLoadCertFailed_Api = 62,
  emUnRegSuc_Api = 90,
  emRegSuccess_Api = 100
};
MTMSG_API bool EmMtRegFailedReason_IsValid(int value);
const EmMtRegFailedReason EmMtRegFailedReason_MIN = emGKFailedBegin_Api;
const EmMtRegFailedReason EmMtRegFailedReason_MAX = emRegSuccess_Api;
const int EmMtRegFailedReason_ARRAYSIZE = EmMtRegFailedReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtRegFailedReason_descriptor();
inline const ::std::string& EmMtRegFailedReason_Name(EmMtRegFailedReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtRegFailedReason_descriptor(), value);
}
inline bool EmMtRegFailedReason_Parse(
    const ::std::string& name, EmMtRegFailedReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtRegFailedReason>(
    EmMtRegFailedReason_descriptor(), name, value);
}
enum EmMtSdiInOut {
  emSdiNone_Api = 0,
  emSdiTwoIn_Api = 1,
  emSdiOneInOneOut_Api = 2
};
MTMSG_API bool EmMtSdiInOut_IsValid(int value);
const EmMtSdiInOut EmMtSdiInOut_MIN = emSdiNone_Api;
const EmMtSdiInOut EmMtSdiInOut_MAX = emSdiOneInOneOut_Api;
const int EmMtSdiInOut_ARRAYSIZE = EmMtSdiInOut_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtSdiInOut_descriptor();
inline const ::std::string& EmMtSdiInOut_Name(EmMtSdiInOut value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtSdiInOut_descriptor(), value);
}
inline bool EmMtSdiInOut_Parse(
    const ::std::string& name, EmMtSdiInOut* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtSdiInOut>(
    EmMtSdiInOut_descriptor(), name, value);
}
enum EmMtMicDevId {
  emWiredMic0_Api = 0,
  emWiredMic1_Api = 1,
  emWirelessMic0_Api = 2,
  emWirelessMic1_Api = 3,
  emWirelessMic2_Api = 4,
  emWiredMic0Cascade1_Api = 5,
  emWiredMic0Cascade2_Api = 6,
  emWiredMic1Cascade1_Api = 7,
  emWiredMic1Cascade2_Api = 8,
  emMicDevIdEnd_Api = 9
};
MTMSG_API bool EmMtMicDevId_IsValid(int value);
const EmMtMicDevId EmMtMicDevId_MIN = emWiredMic0_Api;
const EmMtMicDevId EmMtMicDevId_MAX = emMicDevIdEnd_Api;
const int EmMtMicDevId_ARRAYSIZE = EmMtMicDevId_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtMicDevId_descriptor();
inline const ::std::string& EmMtMicDevId_Name(EmMtMicDevId value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtMicDevId_descriptor(), value);
}
inline bool EmMtMicDevId_Parse(
    const ::std::string& name, EmMtMicDevId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtMicDevId>(
    EmMtMicDevId_descriptor(), name, value);
}
enum EmMtHDVideoType {
  emHD1stPriVideo_Api = 0,
  emHD2ndPriVideo_Api = 1,
  emHD3rdPriVideo_Api = 2,
  emHDAssVideo_Api = 10
};
MTMSG_API bool EmMtHDVideoType_IsValid(int value);
const EmMtHDVideoType EmMtHDVideoType_MIN = emHD1stPriVideo_Api;
const EmMtHDVideoType EmMtHDVideoType_MAX = emHDAssVideo_Api;
const int EmMtHDVideoType_ARRAYSIZE = EmMtHDVideoType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtHDVideoType_descriptor();
inline const ::std::string& EmMtHDVideoType_Name(EmMtHDVideoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtHDVideoType_descriptor(), value);
}
inline bool EmMtHDVideoType_Parse(
    const ::std::string& name, EmMtHDVideoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtHDVideoType>(
    EmMtHDVideoType_descriptor(), name, value);
}
enum EmNvSwbState {
  emNvSwbChance = 0,
  emNvSwbSleep = 1,
  emNvSwbTurnOff = 2
};
MTMSG_API bool EmNvSwbState_IsValid(int value);
const EmNvSwbState EmNvSwbState_MIN = emNvSwbChance;
const EmNvSwbState EmNvSwbState_MAX = emNvSwbTurnOff;
const int EmNvSwbState_ARRAYSIZE = EmNvSwbState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNvSwbState_descriptor();
inline const ::std::string& EmNvSwbState_Name(EmNvSwbState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNvSwbState_descriptor(), value);
}
inline bool EmNvSwbState_Parse(
    const ::std::string& name, EmNvSwbState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNvSwbState>(
    EmNvSwbState_descriptor(), name, value);
}
enum EmQkVidFormat {
  emQkVid_Start = 0,
  emQkVid_H265 = 1,
  emQkVid_H264 = 2,
  emQkVid_PROFILE = 3,
  emQkVid_MPEG = 4,
  emQkVid_H263 = 5,
  emQkVid_H263PLUS = 6,
  emQkVid_H261 = 7
};
MTMSG_API bool EmQkVidFormat_IsValid(int value);
const EmQkVidFormat EmQkVidFormat_MIN = emQkVid_Start;
const EmQkVidFormat EmQkVidFormat_MAX = emQkVid_H261;
const int EmQkVidFormat_ARRAYSIZE = EmQkVidFormat_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmQkVidFormat_descriptor();
inline const ::std::string& EmQkVidFormat_Name(EmQkVidFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmQkVidFormat_descriptor(), value);
}
inline bool EmQkVidFormat_Parse(
    const ::std::string& name, EmQkVidFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmQkVidFormat>(
    EmQkVidFormat_descriptor(), name, value);
}
enum EmQkAudFormat {
  emQkAud_Start = 0,
  emQkAud_OPUS = 1,
  emQkAud_G711A = 2,
  emQkAud_G711U = 3,
  emQkAud_G719 = 4,
  emQkAud_G722 = 5,
  emQkAud_G7221 = 6,
  emQkAud_G728 = 7,
  emQkAud_G729 = 8,
  emQkAud_MPEGAACLC = 9,
  emQkAud_MPEGAACLD = 10,
  emQkAud_MP3 = 11
};
MTMSG_API bool EmQkAudFormat_IsValid(int value);
const EmQkAudFormat EmQkAudFormat_MIN = emQkAud_Start;
const EmQkAudFormat EmQkAudFormat_MAX = emQkAud_MP3;
const int EmQkAudFormat_ARRAYSIZE = EmQkAudFormat_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmQkAudFormat_descriptor();
inline const ::std::string& EmQkAudFormat_Name(EmQkAudFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmQkAudFormat_descriptor(), value);
}
inline bool EmQkAudFormat_Parse(
    const ::std::string& name, EmQkAudFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmQkAudFormat>(
    EmQkAudFormat_descriptor(), name, value);
}
enum EmQkCodeRes {
  emQkRes_Start = 0,
  emQkRes_1080P_1920x1080 = 1,
  emQkRes_WSXGA_1440x900 = 2,
  emQkRes_SXGA_1280x1024 = 3,
  emQkRes_1280x960 = 4,
  emQkRes_WXGA_1366x768 = 5,
  emQkRes_WXGA_1360x768 = 6,
  emQkRes_WXGA_1280x800 = 7,
  emQkRes_WXGA_1280x768 = 8,
  emQkRes_720P_1280x720 = 9,
  emQkRes_1280x600 = 10,
  emQkRes_XGA_1024x768 = 11,
  emQkRes_SVGA_800x600 = 12
};
MTMSG_API bool EmQkCodeRes_IsValid(int value);
const EmQkCodeRes EmQkCodeRes_MIN = emQkRes_Start;
const EmQkCodeRes EmQkCodeRes_MAX = emQkRes_SVGA_800x600;
const int EmQkCodeRes_ARRAYSIZE = EmQkCodeRes_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmQkCodeRes_descriptor();
inline const ::std::string& EmQkCodeRes_Name(EmQkCodeRes value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmQkCodeRes_descriptor(), value);
}
inline bool EmQkCodeRes_Parse(
    const ::std::string& name, EmQkCodeRes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmQkCodeRes>(
    EmQkCodeRes_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace nv

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvSysStartMod>() {
  return ::nv::EmNvSysStartMod_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvSysStartModFromUI>() {
  return ::nv::EmNvSysStartModFromUI_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvSysSrvState>() {
  return ::nv::EmNvSysSrvState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvSysKeepLiveState>() {
  return ::nv::EmNvSysKeepLiveState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvIpAddrType>() {
  return ::nv::EmNvIpAddrType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvAliasType>() {
  return ::nv::EmNvAliasType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvAddrType>() {
  return ::nv::EmNvAddrType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvChanType>() {
  return ::nv::EmNvChanType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvModel>() {
  return ::nv::EmNvModel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvCodecComponent>() {
  return ::nv::EmNvCodecComponent_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvCodecComponentIndex>() {
  return ::nv::EmNvCodecComponentIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvVidFormat>() {
  return ::nv::EmNvVidFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvAudFormat>() {
  return ::nv::EmNvAudFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvResolution>() {
  return ::nv::EmNvResolution_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvPathType>() {
  return ::nv::EmNvPathType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvFile>() {
  return ::nv::EmNvFile_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvUpgradeType>() {
  return ::nv::EmNvUpgradeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvUpgradeNotify>() {
  return ::nv::EmNvUpgradeNotify_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvServerType>() {
  return ::nv::EmNvServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvServerState>() {
  return ::nv::EmNvServerState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvUpgradeVerLevel>() {
  return ::nv::EmNvUpgradeVerLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvUpgradeReleaseAttr>() {
  return ::nv::EmNvUpgradeReleaseAttr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvNvcType>() {
  return ::nv::EmNvNvcType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvNetAdapterWorkType>() {
  return ::nv::EmNvNetAdapterWorkType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvRemoteType>() {
  return ::nv::EmNvRemoteType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvRemoteScanCode>() {
  return ::nv::EmNvRemoteScanCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvStopBits>() {
  return ::nv::EmNvStopBits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvParityCheck>() {
  return ::nv::EmNvParityCheck_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvSerialType>() {
  return ::nv::EmNvSerialType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvAlarmCode>() {
  return ::nv::EmNvAlarmCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvEthInterfaceMode>() {
  return ::nv::EmNvEthInterfaceMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvSystemFileType>() {
  return ::nv::EmNvSystemFileType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvFileCopyErr>() {
  return ::nv::EmNvFileCopyErr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvDisplayRatio>() {
  return ::nv::EmNvDisplayRatio_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvCallState>() {
  return ::nv::EmNvCallState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvVideoOutPutMode>() {
  return ::nv::EmNvVideoOutPutMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvAacChnlNum>() {
  return ::nv::EmNvAacChnlNum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvAacSampFreq>() {
  return ::nv::EmNvAacSampFreq_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvH264AdditionalModes>() {
  return ::nv::EmNvH264AdditionalModes_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvH264Profile>() {
  return ::nv::EmNvH264Profile_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvH265Profile>() {
  return ::nv::EmNvH265Profile_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvLostPackStrategy>() {
  return ::nv::EmNvLostPackStrategy_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvPiPMode>() {
  return ::nv::EmNvPiPMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvHDLastDisplay>() {
  return ::nv::EmNvHDLastDisplay_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvResizeMode>() {
  return ::nv::EmNvResizeMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvHDImageNoise>() {
  return ::nv::EmNvHDImageNoise_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvLocalSoundIndex>() {
  return ::nv::EmNvLocalSoundIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvUISynchronizeReason>() {
  return ::nv::EmNvUISynchronizeReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvVideoOutPort>() {
  return ::nv::EmNvVideoOutPort_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvVideoInPort>() {
  return ::nv::EmNvVideoInPort_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvImixVidSrcType>() {
  return ::nv::EmNvImixVidSrcType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvMtSvType>() {
  return ::nv::EmNvMtSvType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvApiMode>() {
  return ::nv::EmNvApiMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvSleepFailReason>() {
  return ::nv::EmNvSleepFailReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvTimeZone>() {
  return ::nv::EmNvTimeZone_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvDevRegUpdateSer>() {
  return ::nv::EmNvDevRegUpdateSer_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvUpdateType>() {
  return ::nv::EmNvUpdateType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvCnLoginUpdateRet>() {
  return ::nv::EmNvCnLoginUpdateRet_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvScreenColorTemperature>() {
  return ::nv::EmNvScreenColorTemperature_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvScreenType>() {
  return ::nv::EmNvScreenType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvSubModel>() {
  return ::nv::EmNvSubModel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvTvDisplayRatio>() {
  return ::nv::EmNvTvDisplayRatio_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvViewReason>() {
  return ::nv::EmNvViewReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvEncodeMode>() {
  return ::nv::EmNvEncodeMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvPowerTurnOffReason>() {
  return ::nv::EmNvPowerTurnOffReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvAudPortIn>() {
  return ::nv::EmNvAudPortIn_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvAudPortOut>() {
  return ::nv::EmNvAudPortOut_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvPingErrcode>() {
  return ::nv::EmNvPingErrcode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNVSerialMode>() {
  return ::nv::EmNVSerialMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmEthnetWorkMode>() {
  return ::nv::EmEthnetWorkMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmEthInterfaceMode>() {
  return ::nv::EmEthInterfaceMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmEthStartupResult>() {
  return ::nv::EmEthStartupResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmEthnetParamType>() {
  return ::nv::EmEthnetParamType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvVidResResizeMode>() {
  return ::nv::EmNvVidResResizeMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvIfaceInstruction>() {
  return ::nv::EmNvIfaceInstruction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtVer>() {
  return ::nv::EmMtVer_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvHintCode>() {
  return ::nv::EmNvHintCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvTvInputSelect>() {
  return ::nv::EmNvTvInputSelect_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvZoomMode>() {
  return ::nv::EmNvZoomMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvScreen>() {
  return ::nv::EmNvScreen_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvVidLabel>() {
  return ::nv::EmNvVidLabel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvMiniVidPos>() {
  return ::nv::EmNvMiniVidPos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvCallStatApi>() {
  return ::nv::EmNvCallStatApi_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvCallingType>() {
  return ::nv::EmNvCallingType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvCallProtocol>() {
  return ::nv::EmNvCallProtocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvCallDisReason>() {
  return ::nv::EmNvCallDisReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::NvEndpointType>() {
  return ::nv::NvEndpointType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvVideoPort_Api>() {
  return ::nv::EmNvVideoPort_Api_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvVideoOutType_Api>() {
  return ::nv::EmNvVideoOutType_Api_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvVideoSourceType_Api>() {
  return ::nv::EmNvVideoSourceType_Api_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvDynamicSrcType>() {
  return ::nv::EmNvDynamicSrcType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvLeaveDrawReason>() {
  return ::nv::EmNvLeaveDrawReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvPPTPageTurning>() {
  return ::nv::EmNvPPTPageTurning_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvAutoShutdownFailReason>() {
  return ::nv::EmNvAutoShutdownFailReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvMtModel>() {
  return ::nv::EmNvMtModel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtLocalSoundType>() {
  return ::nv::EmMtLocalSoundType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtLocalSoundIndex>() {
  return ::nv::EmMtLocalSoundIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtHDAudPortIn>() {
  return ::nv::EmMtHDAudPortIn_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtCodecComponent>() {
  return ::nv::EmMtCodecComponent_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmCodecComponentIndex>() {
  return ::nv::EmCodecComponentIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtConfProtocol>() {
  return ::nv::EmMtConfProtocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtServerAddrType>() {
  return ::nv::EmMtServerAddrType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtAudioDelayCheckState>() {
  return ::nv::EmMtAudioDelayCheckState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtServerType>() {
  return ::nv::EmMtServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtServerState>() {
  return ::nv::EmMtServerState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtRegFailedReason>() {
  return ::nv::EmMtRegFailedReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtSdiInOut>() {
  return ::nv::EmMtSdiInOut_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtMicDevId>() {
  return ::nv::EmMtMicDevId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmMtHDVideoType>() {
  return ::nv::EmMtHDVideoType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmNvSwbState>() {
  return ::nv::EmNvSwbState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmQkVidFormat>() {
  return ::nv::EmQkVidFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmQkAudFormat>() {
  return ::nv::EmQkAudFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nv::EmQkCodeRes>() {
  return ::nv::EmQkCodeRes_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nvenum_2eproto__INCLUDED
