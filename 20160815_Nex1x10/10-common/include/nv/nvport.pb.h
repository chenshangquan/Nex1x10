// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvport.proto

#ifndef PROTOBUF_nvport_2eproto__INCLUDED
#define PROTOBUF_nvport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nv {
namespace port {

// Internal implementation detail -- do not call these.
void MTMSG_API protobuf_AddDesc_nvport_2eproto();
void protobuf_AssignDesc_nvport_2eproto();
void protobuf_ShutdownFile_nvport_2eproto();

class TPort;

// ===================================================================

class MTMSG_API TPort : public ::google::protobuf::Message {
 public:
  TPort();
  virtual ~TPort();

  TPort(const TPort& from);

  inline TPort& operator=(const TPort& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPort& default_instance();

  void Swap(TPort* other);

  // implements Message ----------------------------------------------

  TPort* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPort& from);
  void MergeFrom(const TPort& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 udp_start = 1;
  inline bool has_udp_start() const;
  inline void clear_udp_start();
  static const int kUdpStartFieldNumber = 1;
  inline ::google::protobuf::uint32 udp_start() const;
  inline void set_udp_start(::google::protobuf::uint32 value);

  // optional uint32 udp_count = 2;
  inline bool has_udp_count() const;
  inline void clear_udp_count();
  static const int kUdpCountFieldNumber = 2;
  inline ::google::protobuf::uint32 udp_count() const;
  inline void set_udp_count(::google::protobuf::uint32 value);

  // optional uint32 tcp_start = 3;
  inline bool has_tcp_start() const;
  inline void clear_tcp_start();
  static const int kTcpStartFieldNumber = 3;
  inline ::google::protobuf::uint32 tcp_start() const;
  inline void set_tcp_start(::google::protobuf::uint32 value);

  // optional uint32 tcp_count = 4;
  inline bool has_tcp_count() const;
  inline void clear_tcp_count();
  static const int kTcpCountFieldNumber = 4;
  inline ::google::protobuf::uint32 tcp_count() const;
  inline void set_tcp_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nv.port.TPort)
 private:
  inline void set_has_udp_start();
  inline void clear_has_udp_start();
  inline void set_has_udp_count();
  inline void clear_has_udp_count();
  inline void set_has_tcp_start();
  inline void clear_has_tcp_start();
  inline void set_has_tcp_count();
  inline void clear_has_tcp_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 udp_start_;
  ::google::protobuf::uint32 udp_count_;
  ::google::protobuf::uint32 tcp_start_;
  ::google::protobuf::uint32 tcp_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvport_2eproto();
  friend void protobuf_AssignDesc_nvport_2eproto();
  friend void protobuf_ShutdownFile_nvport_2eproto();

  void InitAsDefaultInstance();
  static TPort* default_instance_;
};
// ===================================================================


// ===================================================================

// TPort

// optional uint32 udp_start = 1;
inline bool TPort::has_udp_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPort::set_has_udp_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPort::clear_has_udp_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPort::clear_udp_start() {
  udp_start_ = 0u;
  clear_has_udp_start();
}
inline ::google::protobuf::uint32 TPort::udp_start() const {
  return udp_start_;
}
inline void TPort::set_udp_start(::google::protobuf::uint32 value) {
  set_has_udp_start();
  udp_start_ = value;
}

// optional uint32 udp_count = 2;
inline bool TPort::has_udp_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPort::set_has_udp_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPort::clear_has_udp_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPort::clear_udp_count() {
  udp_count_ = 0u;
  clear_has_udp_count();
}
inline ::google::protobuf::uint32 TPort::udp_count() const {
  return udp_count_;
}
inline void TPort::set_udp_count(::google::protobuf::uint32 value) {
  set_has_udp_count();
  udp_count_ = value;
}

// optional uint32 tcp_start = 3;
inline bool TPort::has_tcp_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPort::set_has_tcp_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPort::clear_has_tcp_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPort::clear_tcp_start() {
  tcp_start_ = 0u;
  clear_has_tcp_start();
}
inline ::google::protobuf::uint32 TPort::tcp_start() const {
  return tcp_start_;
}
inline void TPort::set_tcp_start(::google::protobuf::uint32 value) {
  set_has_tcp_start();
  tcp_start_ = value;
}

// optional uint32 tcp_count = 4;
inline bool TPort::has_tcp_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPort::set_has_tcp_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPort::clear_has_tcp_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPort::clear_tcp_count() {
  tcp_count_ = 0u;
  clear_has_tcp_count();
}
inline ::google::protobuf::uint32 TPort::tcp_count() const {
  return tcp_count_;
}
inline void TPort::set_tcp_count(::google::protobuf::uint32 value) {
  set_has_tcp_count();
  tcp_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace port
}  // namespace nv

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nvport_2eproto__INCLUDED
