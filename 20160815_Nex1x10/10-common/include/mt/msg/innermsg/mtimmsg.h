#ifndef _MTIMMSG_H_
#define _MTIMMSG_H_

#include "mtmsgid.h"

#if !defined(_MESSAGE_HELP_)
enum EmMtImMsg
{
    EV_BGN(MTIM) = EVSEG_IM_BGN,
#endif

	/**********************************************************************************
	* < 请求登录XMPP服务器 >
	* ----------------------------------------------------------
	* 参数：TImUserLogin：登录信息
	* ----------------------------------------------------------
	* 其中TImUserLogin的结构包含：
	*	u32 	m_dwImIP;                           		// 服务器ip地址
	* 	u16 	m_wPort;									// 服务器端口
    * 	s8  	m_achNO[IM_MAX_ID_LEN];						// 登录口号(格式为"用户名@域名")
    *	s8  	m_achUserPwd[MT_MAX_PWD_LEN + 1];			// 密码
    *	u8  	m_byPwdLen;									// 密码长度
    *	BOOL 	m_bFileShareEnable;                    		// 是否启用xmpp文件传输
    *	s8   	m_achStunAddr[IM_MAX_ADDRESS_LEN];     		// stun 服务器地址
    *	u16  	m_wStunPort;                           		// stun port
    *	s8   	m_achDefaultSaveDir[IM_MAX_PATH_LEN];  		// 默认保存路径
    *	s8   	m_achEnterpriseName[IM_ENTERPRISE_NAME_LEN];   // 企业名称(用于创建组织架构聊天室)
    *	BOOL 	m_bAudioCapability;                         // 是否有音频能力(硬件)
    *	BOOL 	m_bVideoCapability;                         // 是否有视频能力(硬件)
    *	s8   	m_achPicSaveDir[IM_MAX_PATH_LEN];           // 保存截图的路径(绝对路径)
    *	BOOL 	m_bInstant;                                	// 是否立即登录
    *	s8   	m_achResource[IM_MAX_RESOURCE_LEN];			// 终端型号标示
    *	BOOL    m_bUseSock5;                                // 是否启用sock5代理
    *	s8      m_achSock5Addr[IM_SOCK5_ADDR_NAME_LEN];     // sock5地址
    *	u16     m_wSock5Port;                               // sock5端口
    *	s8      m_achSock5Username[IM_SOCK5_USERNAME_LEN];  // sock5用户名
    *	s8      m_achSock5Password[IM_SOCK5_PASSWORD_LEN];  // sock5密码
    *	s8      m_achConfigPath[IM_MAX_PATH_LEN];          	// 保存用户配置的路径
    *	BOOL    m_bCompression;                             // 是否使用zlib压缩流
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */ 
    MESSAGE(Ev_MT_ImLogin_Req)			
	BODY(mt::TImUserLogin, TImUserLogin)
	
	/**********************************************************************************
	* < 登录服务器响应 >
	* ----------------------------------------------------------
	* 参数：TU32：		错误码
	*		TU32：		当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */ 
	MESSAGE(Ev_MT_ImLogin_Rsp)			
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)

	/**********************************************************************************
	* < 登录服务器成功后通知（内部使用） >
	* ----------------------------------------------------------
	* 参数：无
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */ 
	MESSAGE(Ev_MT_ImInnerLogin_Ntf)			

	/**********************************************************************************
	* < 注销请求 >
	* ----------------------------------------------------------
	* 参数：TU32：	当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImLogOut_Cmd)		
	BODY(mt::TU32, HANDLE)

	/**********************************************************************************
	* < 请求查询自己的自定义信息 >
	* ----------------------------------------------------------
	* 参数：TU32：	当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQuerySelfDefInfo_Req)			
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 请求查询自己的自定义信息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：错误码的枚举（成功/具体失败ID）
	*		TU32：当前登录句柄
	*		TImSelfDefInfo：自定义信息
	*		TImSelfDefPic：	自定义头像
	* ----------------------------------------------------------
	* 其中TImSelfDefInfo的结构包括：
	* 	s8 		m_achNO;                     				// 用户唯一标识
    * 	s8 		m_achNickName;  							// 用户昵称
    *	u16 	m_wPictureIndex;							// 个人图像序号
    * 	BOOL32  m_bCustomePic;                            	// 是否使用自定义头像
	* ----------------------------------------------------------
	* 其中TImSelfDefPic的结构包括：
	* 	u32   	m_dwCustomPicSize;							// 使用的自定义头像数据大小
	* 	s8    	m_achCustomPicData;	 						// 自定义头像数据
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQuerySelfDefInfo_Rsp)			
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSelfDefInfo, SelfDefInfo)
	BODY(mt::TImSelfDefPic, SelfDefPic)
	
	/**********************************************************************************
	* < 请求修改自己的自定义信息 >
	* ----------------------------------------------------------
	* 参数：TU32：当前登录句柄
	*		TImSelfDefInfo：自定义信息
	*		TImSelfDefPic：	自定义头像
	* ----------------------------------------------------------
	* 其中TImSelfDefInfo的结构包括：
	* 	s8 		m_achNO;                     				// 用户唯一标识
    * 	s8 		m_achNickName;  							// 用户昵称
    *	u16 	m_wPictureIndex;							// 个人图像序号
    * 	BOOL32  m_bCustomePic;                            	// 是否使用自定义头像
	* ----------------------------------------------------------
	* 其中TImSelfDefPic的结构包括：
	* 	u32   	m_dwCustomPicSize;                          // 使用的自定义头像数据大小
	* 	s8    	m_achCustomPicData;	 						// 自定义头像数据
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImModifySelfDefInfo_Req)			
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSelfDefInfo, SelfDefInfo)
	BODY(mt::TImSelfDefPic, SelfDefPic)
	
	/**********************************************************************************
	* < 请求修改自己的自定义信息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：错误码的枚举（成功/具体失败ID）
	*		TU32：当前登录句柄
	*		TImSelfDefInfo：自定义信息
	*		TImSelfDefPic：	自定义头像
	* ----------------------------------------------------------
	* 其中TImSelfDefInfo的结构包括：
	* 	s8 		m_achNO;                     				// 用户唯一标识
    * 	s8 		m_achNickName;  							// 用户昵称
    *	u16 	m_wPictureIndex;							// 个人图像序号
    * 	BOOL32  m_bCustomePic;                            	// 是否使用自定义头像
	* ----------------------------------------------------------
	* 其中TImSelfDefPic的结构包括：
	* 	u32   m_dwCustomPicSize;                          	// 使用的自定义头像数据大小
	* 	s8    m_achCustomPicData;	 						// 自定义头像数据
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImModiySelfDefInfo_Rsp)			
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSelfDefInfo, SelfDefInfo)
	BODY(mt::TImSelfDefPic, SelfDefPic)
	
	/**********************************************************************************
	* < 查询某些用户的自定义信息请求 >
	* ----------------------------------------------------------
	* 参数：TU32：		当前登录句柄
	*		TImNOList：	用户ID
	* ----------------------------------------------------------
	* 其中TImNOList的结构包括：
	* 	u32 	m_dwArraySize;								// 待查询用户个数
	*	TImNO 	m_atArray;									// 用户邮箱
	* ----------------------------------------------------------
	* 其中TImNO的结构包括：
	* 	s8 		m_achNO;                         			// 邮箱id
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryUserSelfDefInfo_Req)			
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNOList, TImNOList)
	
	/**********************************************************************************
	* < 查询某些用户的自定义信息应答 >
	* ----------------------------------------------------------
	* 参数：
	* 		若是请求成功：
	*			TU32：			错误码
	*			TU32：			当前登录句柄
	*			TImSelfDefInfo：自定义信息
	*		若是请求失败：
	*			TU32：			错误码
	*			TU32：			当前登录句柄
	*			TImNOList：		查询失败的用户邮箱ID（多个）
	* ----------------------------------------------------------
	* 其中TImNOList的结构包括：
	* 	u32 	m_dwArraySize;								// 待查询用户个数
	*	TImNO 	m_atArray;									// 用户邮箱
	* ----------------------------------------------------------
	* 其中TImNO的结构包括：
	* 	s8 		m_achNO;                         			// 邮箱id
	* ----------------------------------------------------------
	* 其中TImSelfDefInfo的结构包括：
	* 	s8 		m_achNO;                     				// 用户唯一标识
    * 	s8 		m_achNickName;  							// 用户昵称
    *	u16 	m_wPictureIndex;							// 个人图像序号
    * 	BOOL32  m_bCustomePic;                            	// 是否使用自定义头像
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryUserSelfDefInfo_Rsp)
	BODY(mt::TU32, emErrorID)        					// 若是成功的话
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSelfDefInfo, SelfDefInfo)
	/* ********************************************************* */
	BODY(mt::TU32, emErrorID)							// 若是失败的话
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, TImNOList)
	
	/**********************************************************************************
	* < 请求查询组信息 >
	* ----------------------------------------------------------
	* 参数：TU32：	当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryGroupInfo_Req)			
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 请求查询组信息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：		错误ID
	*		TU32：		当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryGroupInfo_Error_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 请求查询组信息成功后的分包信息 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImGroupList：	组信息（多个）
	* ----------------------------------------------------------
	* 其中TImGroupList的结构包含：
	* 	u32 m_dwArraySize;					// 组个数
    * 	TImGroupInfo m_atArray				// 组信息
	* ----------------------------------------------------------
	* 其中TImGroupInfo的结构包含：
	*	s8 	m_achGroupSn;					//用户组序号
    *	s8 	m_achGroupName;    				//用户组名称
    * 	s8 	m_achParentGroupSn;  			//父组序号
	* 	u16 m_wGroupLevel;                  //组的层级
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryGroupInfo_Rsp)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImGroupList, TImGroupList)
	
	/**********************************************************************************
	* < 通知查询组信息成功后的分包结束 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryGroupInfo_Fin_Rsp)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 请求查询某组的子组信息 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImSn：			Sn号
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryGroupInfoByGroupSn_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 请求查询子组信息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：		错误ID
	*		TU32：		当前登录句柄
	*		TImSn：		父组Sn号
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryGroupInfoByGroupSn_Error_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 查询子组信息成功后的分包信息 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImGroupList：	组信息（多个）
	* ----------------------------------------------------------
	* 其中TImGroupList的结构包含：
	* 	u32 m_dwArraySize;					// 组个数
    * 	TImGroupInfo m_atArray				// 组信息
	* ----------------------------------------------------------
	* 其中TImGroupInfo的结构包含：
	*	s8 	m_achGroupSn;					//用户组序号
    *	s8 	m_achGroupName;    				//用户组名称
    * 	s8 	m_achParentGroupSn;  			//父组序号
	* 	u16 m_wGroupLevel;                  //组的层级
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryGroupInfoByGroupSn_Rsp)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImGroupList, TImGroupList)
	
	/**********************************************************************************
	* < 通知查询子组信息成功后的分包结束 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImSn：			Sn号
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryGroupInfoByGroupSn_Fin_Rsp)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 创建组信息请求 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImGroupInfo：	联系人组信息
	* ----------------------------------------------------------
	* 其中TImGroupInfo的结构包含：
	* 	s8 m_achGroupSn;				//用户组序号
    *	s8 m_achGroupName;    			//用户组名称
    *	s8 m_achParentGroupSn;  		//父组序号
	*	u16 m_wGroupLevel;              //组的层级
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImAddGroupInfo_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImGroupInfo, TImGroupInfo)
	
	/**********************************************************************************
	* < 创建组信息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：			错误码
	*		TU32：			当前登录句柄
	*		TImGroupInfo：	联系人组信息
	* ----------------------------------------------------------
	* 其中TImGroupInfo的结构包含：
	* 	s8 m_achGroupSn;				//用户组序号
    *	s8 m_achGroupName;    			//用户组名称
    *	s8 m_achParentGroupSn;  		//父组序号
	*	u16 m_wGroupLevel;              //组的层级
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImAddGroupInfo_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImGroupInfo, TImGroupInfo)
	
	/**********************************************************************************
	* < 删除组信息请求 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImSn：			组ID
	*		TBOOL32：		是否保留成员
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImDelGroupInfo_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	BODY(mt::TBOOL32, bReserved)
	
	/**********************************************************************************
	* < 删除组信息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：			错误码
	*		TU32：			当前登录句柄
	*		TImSn：			组ID
	*		TBOOL32：		是否保留组员到未分组
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImDelGroupInfo_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	BODY(mt::TBOOL32, bReserved)
	
	/**********************************************************************************
	* < 修改组信息请求 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImSn：			组ID
	*		TBOOL32：		是否为固定讨论组
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImModifyGroupInfo_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImGroupInfo, TImGroupInfo)
	
	/**********************************************************************************
	* < 修改组信息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：			错误码
	*		TU32：			当前登录句柄
	*		TImGroupInfo：	联系人组信息
	* ----------------------------------------------------------
	* 其中TImGroupInfo的结构包含：
	* 	s8 m_achGroupSn;				//用户组序号
    *	s8 m_achGroupName;    			//用户组名称
    *	s8 m_achParentGroupSn;  		//父组序号
	*	u16 m_wGroupLevel;              //组的层级
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImModifyGroupInfo_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImGroupInfo, TImGroupInfo)
	
	/**********************************************************************************
	* < 查询某组下的联系人列表信息请求 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImSn：			组ID
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryMemberInfoByGroupSn_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 查询某组下的联系人列表信息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：			错误码
	*		TU32：			当前登录句柄
	*		TImSn：			组ID
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryMemberInfoByGroupSn_Error_Rsp)
	BODY(mt::TU32, emErrorID)	
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 查询某组下的联系人列表信息分包信息 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImMemberList：			组ID
	* ----------------------------------------------------------
	* 其中TImMemberList的结构包含：
	* 	u32 m_dwArraySize;					// 用户数量
    *	TImMemberInfo m_atArray;			// 用户信息（多个）
	* ---------------------------------------------------------
	* 其中TImMemberInfo的结构包含：
	*	s8 m_achMemberSn[MAXLEN_U64STRING+1];        	// 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 	// 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         	// 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];	// 成员名称 
	*	EmMtMemberType m_emMemberType;			     	// 成员类型
    *	u16 m_wBitRate;                              	// 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        	// 联系人微博信息
    *	BOOL  m_bNoQuery;                            	// 是否不查Account	
	* ---------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryMemberInfoByGroupSn_Rsp)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberList, TImMemberList)
	
	/**********************************************************************************
	* < 查询某组下的联系人列表信息分包结束通知 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImSn：			组ID
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryMemberInfoByGroupSn_Fin_Rsp)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	
	/**********************************************************************************
	* < 创建联系人请求 >
	* ----------------------------------------------------------
	* 参数：TU32：				当前登录句柄
	*		TImMemberInfo：		用户信息
	* ----------------------------------------------------------
	* * 其中TImMemberInfo的结构包含：
	*	s8 m_achMemberSn[MAXLEN_U64STRING+1];        	// 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 	// 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         	// 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];	// 成员名称 
	*	EmMtMemberType m_emMemberType;			     	// 成员类型
    *	u16 m_wBitRate;                              	// 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        	// 联系人微博信息
    *	BOOL  m_bNoQuery;                            	// 是否不查Account
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImAddMemberInfo_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberInfo, TImMemberInfo)
	
	/**********************************************************************************
	* < 创建联系人应答 >
	* ----------------------------------------------------------
	* 参数：TU32：			错误码
	*		TU32：			当前登录句柄
	*		TImMemberFullInfo：			用户详细信息
	*		TImMemberInfo：				用户信息
	* ----------------------------------------------------------
	* 其中TImMemberFullInfo的结构包含：
	*	TImMemberInfo m_tMemberinfo;      		//好友基本信息 
    *	EmMtOnlineState m_tMemberState;      	//好友的状态信息
    *	BOOL                m_bMaxAudio;                           // 既有音频能力，又连上GK
    *	BOOL                m_bMaxVideo;                           // 既有视频能力，又连上GK
	*	TSubState           m_atMtState[IM_MAX_MT_TYPE];           // tl, tp, td, ts状态
	* ----------------------------------------------------------
	* 其中TImMemberInfo的结构包含：
	*	s8 m_achMemberSn[MAXLEN_U64STRING+1];        	// 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 	// 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         	// 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];	// 成员名称 
	*	EmMtMemberType m_emMemberType;			     	// 成员类型
    *	u16 m_wBitRate;                              	// 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        	// 联系人微博信息
    *	BOOL  m_bNoQuery;                            	// 是否不查Account
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImAddMemberInfo_Rsp)					
	BODY(mt::TU32, emErrorID)						// 成功时填写的内容
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberFullInfo, TImMemberFullInfo)
	/************************************/						
	BODY(mt::TU32, emErrorID)						// 失败时填写的内容
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberInfo, TImMemberInfo)
	
	/**********************************************************************************
	* < 创建+查询联系人应答 >
	* ----------------------------------------------------------
	* 参数：TRestErrorInfo：		错误码
	*		TMTSearchUserInfo：		查询出错的联系人信息
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryAddMemberInfo_Rsp)	
	//BODY(mt::TU32, Errid)
	BODY(mt::TRestErrorInfo, TRestErrorInfo)
	BODY(mt::TMTSearchUserInfo, TMTSearchUserInfo)
	
	
	/**********************************************************************************
	* < 复制联系人请求 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImMemberInfo：			组ID
	* ----------------------------------------------------------
	* 其中TImMemberInfo的结构包含：
	*	s8 m_achMemberSn[MAXLEN_U64STRING+1];        	// 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 	// 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         	// 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];	// 成员名称 
	*	EmMtMemberType m_emMemberType;			     	// 成员类型
    *	u16 m_wBitRate;                              	// 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        	// 联系人微博信息
    *	BOOL  m_bNoQuery;                            	// 是否不查Account
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImCopyMember_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberInfo, TImMemberInfo)
	
	/**********************************************************************************
	* < 复制联系人应答 >
	* ----------------------------------------------------------
	* 参数：TU32：			错误码
	*		TU32：			当前登录句柄
	*		TImMemberFullInfo：			用户详细信息
	*		TImMemberInfo：				用户信息
	* ----------------------------------------------------------
	* 其中TImMemberFullInfo的结构包含：
	*	TImMemberInfo m_tMemberinfo;      		//好友基本信息 
    *	EmMtOnlineState m_tMemberState;      	//好友的状态信息
    *	BOOL                m_bMaxAudio;                           // 既有音频能力，又连上GK
    *	BOOL                m_bMaxVideo;                           // 既有视频能力，又连上GK
	*	TSubState           m_atMtState[IM_MAX_MT_TYPE];           // tl, tp, td, ts状态
	* ----------------------------------------------------------
	* 其中TImMemberInfo的结构包含：
	*	s8 m_achMemberSn[MAXLEN_U64STRING+1];        	// 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 	// 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         	// 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];	// 成员名称 
	*	EmMtMemberType m_emMemberType;			     	// 成员类型
    *	u16 m_wBitRate;                              	// 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        	// 联系人微博信息
    *	BOOL  m_bNoQuery;                            	// 是否不查Account
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImCopyMember_Rsp)					
	BODY(mt::TU32, emErrorID)						// 成功时填写的内容
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberFullInfo, TImMemberFullInfo)
	/************************************/					
	BODY(mt::TU32, emErrorID)						// 失败时填写的内容
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberInfo, TImMemberInfo)
	
	
	/**********************************************************************************
	* < 删除联系人请求 >
	* ----------------------------------------------------------
	* 参数：TU32：			当前登录句柄
	*		TImSn：			组ID
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImDelMemberInfo_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 删除联系人应答 >
	* ----------------------------------------------------------
	* 参数：TU32：			错误码
	*		TU32：			当前登录句柄
	*		TImSn：			组ID
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  		//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImDelMemberInfo_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 修改联系人请求 >
	* ----------------------------------------------------------
	* 参数：TU32：				当前登录句柄
	*		TImMemberInfo：		联系人信息
	* ----------------------------------------------------------
	* 其中TImMemberInfo的结构包含：
	* 	s8 m_achMemberSn[MAXLEN_U64STRING+1];        	// 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 	// 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         	// 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];	// 成员名称 
	*	EmMtMemberType m_emMemberType;			     	// 成员类型
    *	u16 m_wBitRate;                              	// 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        	// 联系人微博信息
    *	BOOL  m_bNoQuery;                            	// 是否不查Account
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImModifyMemberInfo_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberInfo, TImMemberInfo)
	
	/**********************************************************************************
	* < 修改联系人应答 >
	* ----------------------------------------------------------
	* 参数：TU32：				错误码
	*		TU32：				当前登录句柄
	*		TImMemberInfo：		联系人信息
	* ----------------------------------------------------------
	* 其中TImMemberInfo的结构包含：
	* 	s8 m_achMemberSn[MAXLEN_U64STRING+1];        	// 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 	// 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         	// 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];	// 成员名称 
	*	EmMtMemberType m_emMemberType;			     	// 成员类型
    *	u16 m_wBitRate;                              	// 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        	// 联系人微博信息
    *	BOOL  m_bNoQuery;                            	// 是否不查Account
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImModifyMemberInfo_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberInfo, TImMemberInfo)
	
	/**********************************************************************************
	* < 移动联系人请求 >
	* ----------------------------------------------------------
	* 参数：TU32：				当前登录句柄
	*		TImMoveMember：		移动联系人信息
	* ----------------------------------------------------------
	* 其中TImMoveMember的结构包含：
	* 	s8 m_achMemberSn[MAXLEN_U64STRING+1];               //成员序号
    *	s8 m_achOldGroupSn[MAXLEN_U64STRING+1];             //老的组序列号
    *	s8 m_achNewGroupSn[MAXLEN_U64STRING+1];             //新的组序列号
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMoveMemberInfo_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMoveMember, TImMoveMember)
	
	/**********************************************************************************
	* < 移动联系人应答 >
	* ----------------------------------------------------------
	* 参数：TU32：				错误码
	*		TU32：				当前登录句柄
	*		TImMoveMember：		移动联系人信息
	* ----------------------------------------------------------
	* 其中TImMoveMember的结构包含：
	* 	s8 m_achMemberSn[MAXLEN_U64STRING+1];               //成员序号
    *	s8 m_achOldGroupSn[MAXLEN_U64STRING+1];             //老的组序列号
    *	s8 m_achNewGroupSn[MAXLEN_U64STRING+1];             //新的组序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMoveMemberInfo_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImMoveMember, TImMoveMember)
	
	/**********************************************************************************
	* < 联系人在线状态变化后Im服务器的主动通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TDeviceOnlineState：		设备在线状况
	* ----------------------------------------------------------
	* 其中TDeviceOnlineState的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];	              // 用户唯一标识
	*	EmMtImTerminalType m_tDeviceType;         // 设备类型
	*	EmMtOnlineState m_tState;                 // 在线状态
	*	EmMtOnlineState m_tMaxState;              // 最高级别在线状态
    *	BOOL m_bSelf;                             // 是否自已
    *	BOOL m_bFirst;                            // 是否第一次状态改变(例如第一次登录的状态改变)
    *	BOOL m_bFileShare;                        // P2P文件传输能力
    *	BOOL m_bAudioCapability;                  // 音频能力
    *	BOOL m_bVideoCapability;                  // 视频能力
    *	BOOL m_bGkConnected;                      // 连上GK否
    *	BOOL m_bMaxAudio;                         // 音频可呼叫(至少有一终端既连上GK又有音频能力)
    *	BOOL m_bMaxVideo;                         // 视频可呼叫(至少有一终端既连上GK又有音频能力)
    *	BOOL m_bLoginBeforeMe;                    // 是否在自己之前登录(依赖于m_bFirst为TRUE, 其他时候忽略不计)
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMemberOnlineStateChange_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TDeviceOnlineState, TDeviceOnlineState)
	
	/**********************************************************************************
	* < 查询某组下成员的在线状态请求 >
	* ----------------------------------------------------------
	* 参数：TU32：				当前登录句柄
	*		TImSn：				组ID
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  			//序列号
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSn_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 查询某组下成员的在线状态应答 >
	* ----------------------------------------------------------
	* 参数：TU32：				错误码
	*		TU32：				当前登录句柄
	*		TImSn：				组ID
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  			//序列号
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSn_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 通知某组下成员的在线状态的分包信息 >
	* ----------------------------------------------------------
	* 参数：TU32：				当前登录句柄
	*		TImUserStateList：	组ID
	* ----------------------------------------------------------
	* 其中TImUserStateList的结构包含：
	* 	u32 m_dwArraySize;						// 个数
    *	TImUserState m_atArray;					// 用户状态信息（多个）
	* ----------------------------------------------------------
	* 其中TImUserState的结构包含：
	*	s8 m_achNO[IM_MAX_ID_LEN];	            // 用户唯一标识
	*	EmMtImTerminalType m_tDeviceType;       // 设备类型
	*	EmMtOnlineState m_tState;               // 在线状态
	*	EmMtOnlineState m_tMaxState;            // 最高级别在线状态
    *	BOOL m_bSelf;                           // 是否自已
    *	BOOL m_bFirst;                          // 是否第一次状态改变(例如第一次登录的状态改变)
    *	BOOL m_bFileShare;                      // P2P文件传输能力
    *	BOOL m_bAudioCapability;                // 音频能力
    *	BOOL m_bVideoCapability;                // 视频能力
    *	BOOL m_bGkConnected;                    // 连上GK否
    *	BOOL m_bMaxAudio;                       // 音频可呼叫(至少有一终端既连上GK又有音频能力)
    *	BOOL m_bMaxVideo;                       // 视频可呼叫(至少有一终端既连上GK又有音频能力)
    *	BOOL m_bLoginBeforeMe;                  // 是否在自己之前登录(依赖于m_bFirst为TRUE, 其他时候忽略不计)
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSn_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImUserStateList, TImUserStateList)
	
	/**********************************************************************************
	* < 通知某组下成员的在线状态请求分包结束 >
	* ----------------------------------------------------------
	* 参数：TU32：				当前登录句柄
	*		TImSn：				组ID
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  			//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSn_Fin_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 查询某组下成员的在线状态(包括终端类型)请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImSn：						序列号
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn[MAXLEN_U64STRING+1];  //序列号
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSnEx_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 查询某组下成员的在线状态(包括终端类型)应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TImSn：						序列号
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn[MAXLEN_U64STRING+1];  //序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSnEx_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 查询某组下成员的在线状态(包括终端类型)分包信息 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImUserStateListEx：		用户状态列表( 带上终端类型 )
	* ----------------------------------------------------------
	* 其中TImUserStateListEx的结构包含：
	* 	u32               m_dwArraySize;				// 个数
    *	TImUserStateEx    m_atArray;					// 用户状态（多个）
	* ----------------------------------------------------------
	* 其中TImUserStateEx的结构包含：
	* 	s8                  m_achNO[IM_MAX_ID_LEN];	               // 用户唯一标识
    *	EmMtOnlineState     m_tState;                              // 用户状态(最高状态)
    *	BOOL                m_bMaxAudio;                           // 既有音频能力，又连上GK
    *	BOOL                m_bMaxVideo;                           // 既有视频能力，又连上GK
	*	TSubState           m_atMtState[IM_MAX_MT_TYPE];           // tl, tp, td, ts状态
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSnEx_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImUserStateListEx, TImUserStateListEx)
	
	/**********************************************************************************
	* < 查询某组下成员的在线状态(包括终端类型)分包结束 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImSn：						序列号
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn[MAXLEN_U64STRING+1];  //序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSnEx_Fin_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 修改自己的状态请求 >
	* ----------------------------------------------------------
	* 参数：TU32：				当前登录句柄
	*		TImSetUserState：	自己的状态信息
	* ----------------------------------------------------------
	* 其中TImSetUserState的结构包含：
	* 	s8 				m_achNO[IM_MAX_ID_LEN];	               // 用户唯一标识
	*   EmMtOnlineState m_tState;                              // 用户状态
    *	BOOL            m_bStateValid;                         // 用户状态是否有效
    *	BOOL            m_bGkConnected;                        // 是否连上GK
    *	BOOL            m_bGkConnectedValid;                   // GK连接状态是否有效
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImModifySelfState_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSetUserState, TImSetUserState)
	
	/**********************************************************************************
	* < 修改自己的状态应答 >
	* ----------------------------------------------------------
	* 参数：TU32：				错误码
	*		TU32：				当前登录句柄
	*		TImSetUserState：	自己的状态信息
	* ----------------------------------------------------------
	* 其中TImSetUserState的结构包含：
	* 	s8 				m_achNO[IM_MAX_ID_LEN];	               // 用户唯一标识
	*   EmMtOnlineState m_tState;                              // 用户状态
    *	BOOL            m_bStateValid;                         // 用户状态是否有效
    *	BOOL            m_bGkConnected;                        // 是否连上GK
    *	BOOL            m_bGkConnectedValid;                   // GK连接状态是否有效
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImModifySelfState_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSetUserState, TImSetUserState)
	
	/**********************************************************************************
	* < 发送点对点消息请求 >
	* ----------------------------------------------------------
	* 参数：TU32：				当前登录句柄
	*		TImP2PChatMessage：	自己的状态信息
	* ----------------------------------------------------------
	* 其中TImP2PChatMessage的结构包含：
	* 	s8 m_achDstNO[IM_MAX_ID_LEN];		// 用户唯一标识
	*	s8 m_achSrcNO[IM_MAX_ID_LEN];		// 用户唯一标识
    *	EmMtImTerminalType m_emImMtType;     // 消息发送者终端类型
    *	u32  m_dwContextId; 				//聊天消息用户自定义数据
    *	TImChatBuf m_tMessageBuf; 			//消息体  
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImSendP2PMessage_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImP2PChatMessage, TImP2PChatMessage)
	
	/**********************************************************************************
	* < 发送点对点消息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：				错误码
	*		TU32：				当前登录句柄
	*		TImP2PChatMessage：	自己的状态信息
	* ----------------------------------------------------------
	* 其中TImP2PChatMessage的结构包含：
	* 	s8 		m_achDstNO[IM_MAX_ID_LEN];		// 用户唯一标识
	*	s8 		m_achSrcNO[IM_MAX_ID_LEN];		// 用户唯一标识
    *	EmMtImTerminalType m_emImMtType;     	// 消息发送者终端类型
    *	u32  	m_dwContextId; 					//聊天消息用户自定义数据
    *	TImChatBuf m_tMessageBuf; 				//消息体  
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImSendP2PMessage_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImP2PChatMessage, TImP2PChatMessage)
	
	/**********************************************************************************
	* < 收到点对点消息通知 >
	* ----------------------------------------------------------
	* 参数：TU32：				当前登录句柄
	*		TImP2PChatMessage：	自己的状态信息
	* ----------------------------------------------------------
	* 其中TImP2PChatMessage的结构包含：
	* 	s8 m_achDstNO[IM_MAX_ID_LEN];		// 用户唯一标识
	*	s8 m_achSrcNO[IM_MAX_ID_LEN];		// 用户唯一标识
    *	EmMtImTerminalType m_emImMtType;     // 消息发送者终端类型
    *	u32  m_dwContextId; 				//聊天消息用户自定义数据
    *	TImChatBuf m_tMessageBuf; 			//消息体  
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImSendP2PMessage_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImP2PChatMessage, TImP2PChatMessage)
	
	/**********************************************************************************
	* < 发送点对点消息立即应答（带服务器时间）发送给自己的 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImP2PChatMessage:				点对点消息结构
	* ----------------------------------------------------------	
	* 其中TImP2PChatMessage的结构包含：
	* 	s8 					m_achDstNO[IM_MAX_ID_LEN];		// 用户唯一标识
	*	s8 					m_achSrcNO[IM_MAX_ID_LEN];		// 用户唯一标识
    *	EmMtImTerminalType 	m_emImMtType;     				// 消息发送者终端类型
    *	u32  				m_dwContextId; 					//聊天消息用户自定义数据
    *	TImChatBuf 			m_tMessageBuf; 					//消息体  
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendP2PMessageInstant_Rsp)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImP2PChatMessage, TImP2PChatMessage)
	
	/**********************************************************************************
	* < 创建多人聊天请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMulitChatCreateInfo：	多人聊天消息结构体
	* ----------------------------------------------------------
	* 其中TImMulitChatCreateInfo的结构包含：
	* 	u32 m_dwSessionID;                              //会话ID
	*	u32 m_dwClientID;                               //创建多人会话时，客户端指定的唯一标志
    *	s8 m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     //多人聊天会话名称(可不填); 
	*	EmMtMultiChatType m_emMultiChatType;            //多人聊天会话, 普通类型，会议类型....
    *	s8 m_achConfE164[MT_MAX_E164NUM_LEN+1];         //会议的E164号，当EmMultiChatType为会议类型时才有意义
    *	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         //群聊室的ID(用在下一次上线确定是否为相同的聊天室)
    *	BOOL  m_bPersistent;                            // 是否固定群
    *	BOOL  m_bOwner;                                 // 是否群的创建人，用于(ev_ImEnterPersistentRoomNtfInd)
    *	s8    m_achInviterNO[IM_MAX_ID_LEN];            // 邀请人的ID
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatCreate_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMulitChatCreateInfo, TImMulitChatCreateInfo)
	
	/**********************************************************************************
	* < 创建多人聊天应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TImMulitChatCreateInfo：	多人聊天消息结构体
	* ----------------------------------------------------------
	* 其中TImMulitChatCreateInfo的结构包含：
	* 	u32 m_dwSessionID;                              //会话ID
	*	u32 m_dwClientID;                               //创建多人会话时，客户端指定的唯一标志
    *	s8 m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     //多人聊天会话名称(可不填); 
	*	EmMtMultiChatType m_emMultiChatType;            //多人聊天会话, 普通类型，会议类型....
    *	s8 m_achConfE164[MT_MAX_E164NUM_LEN+1];         //会议的E164号，当EmMultiChatType为会议类型时才有意义
    *	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         //群聊室的ID(用在下一次上线确定是否为相同的聊天室)
    *	BOOL  m_bPersistent;                            // 是否固定群
    *	BOOL  m_bOwner;                                 // 是否群的创建人，用于(ev_ImEnterPersistentRoomNtfInd)
    *	s8    m_achInviterNO[IM_MAX_ID_LEN];            // 邀请人的ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatCreate_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMulitChatCreateInfo, TImMulitChatCreateInfo)
	
	/**********************************************************************************
	* < 收到创建多人聊天通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMulitChatCreateInfo：	多人聊天消息结构体
	* ----------------------------------------------------------
	* 其中TImMulitChatCreateInfo的结构包含：
	* 	u32 m_dwSessionID;                              //会话ID
	*	u32 m_dwClientID;                               //创建多人会话时，客户端指定的唯一标志
    *	s8 m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     //多人聊天会话名称(可不填); 
	*	EmMtMultiChatType m_emMultiChatType;            //多人聊天会话, 普通类型，会议类型....
    *	s8 m_achConfE164[MT_MAX_E164NUM_LEN+1];         //会议的E164号，当EmMultiChatType为会议类型时才有意义
    *	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         //群聊室的ID(用在下一次上线确定是否为相同的聊天室)
    *	BOOL  m_bPersistent;                            // 是否固定群
    *	BOOL  m_bOwner;                                 // 是否群的创建人，用于(ev_ImEnterPersistentRoomNtfInd)
    *	s8    m_achInviterNO[IM_MAX_ID_LEN];            // 邀请人的ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatCreate_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMulitChatCreateInfo, TImMulitChatCreateInfo)

	/**********************************************************************************
	* < 收到创建多人聊天通知 >（内部通知）
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMulitChatCreateInfo：	多人聊天消息结构体
	* ----------------------------------------------------------
	* 其中TImMulitChatCreateInfo的结构包含：
	* 	u32 m_dwSessionID;                              //会话ID
	*	u32 m_dwClientID;                               //创建多人会话时，客户端指定的唯一标志
    *	s8 m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     //多人聊天会话名称(可不填); 
	*	EmMtMultiChatType m_emMultiChatType;            //多人聊天会话, 普通类型，会议类型....
    *	s8 m_achConfE164[MT_MAX_E164NUM_LEN+1];         //会议的E164号，当EmMultiChatType为会议类型时才有意义
    *	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         //群聊室的ID(用在下一次上线确定是否为相同的聊天室)
    *	BOOL  m_bPersistent;                            // 是否固定群
    *	BOOL  m_bOwner;                                 // 是否群的创建人，用于(ev_ImEnterPersistentRoomNtfInd)
    *	s8    m_achInviterNO[IM_MAX_ID_LEN];            // 邀请人的ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImInnerMulitChatCreate_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMulitChatCreateInfo, TImMulitChatCreateInfo)
	
	/**********************************************************************************
	* < 结束多人聊天请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						聊天ID
	*		TRoomId：					聊天室ID
	* ----------------------------------------------------------
	* 其中TRoomId的结构包含：
	* 	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];			// 聊天室ID
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatDestroy_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, ChatID)
	BODY(mt::TRoomId, TRoomId)
	
	/**********************************************************************************
	* < 结束多人聊天应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TU32：						聊天ID
	*		TRoomId：					聊天室ID
	* ----------------------------------------------------------
	* 其中TRoomId的结构包含：
	* 	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];			// 聊天室ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
 	MESSAGE(Ev_MT_ImMulitChatDestroy_Rsp)
 	BODY(mt::TU32, emErrorID)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TU32, ChatID)
 	BODY(mt::TRoomId, TRoomId)
	
	/**********************************************************************************
	* < 收到结束多人聊天通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						聊天ID
	*		TRoomId：					聊天室ID
	* ----------------------------------------------------------
	* 其中TRoomId的结构包含：
	* 	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];			// 聊天室ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
 	MESSAGE(Ev_MT_ImMulitChatDestroy_Ntf)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TU32, ChatID)
 	BODY(mt::TRoomId, TRoomId)
	
	/**********************************************************************************
	* < 多人聊天增加成员请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMultiChatMemberInfo：	多人聊天增加成员结构体
	* ----------------------------------------------------------
	* 其中TImMultiChatMemberInfo的结构包含：
	* 	u32       m_dwSessionID;
    *	TImNOList m_tNOList;                  //要添加的多人聊天的成员  	
    *	TRoomId   m_tRoomId;                  // 可选的，room id
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatAddMember_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMemberInfo, TImMultiChatMemberInfo)
	
	/**********************************************************************************
	* < 多人聊天增加成员应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TImMultiChatMemberInfo：	多人聊天增加成员结构体
	* ----------------------------------------------------------
	* 其中TImMultiChatMemberInfo的结构包含：
	* 	u32       m_dwSessionID;
    *	TImNOList m_tNOList;                  //要添加的多人聊天的成员  	
    *	TRoomId   m_tRoomId;                  // 可选的，room id
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatAddMember_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMemberInfo, TImMultiChatMemberInfo)
	
	/**********************************************************************************
	* < 收到多人聊天增加成员通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMultiChatMemberInfo：	多人聊天增加成员结构体
	* ----------------------------------------------------------
	* 其中TImMultiChatMemberInfo的结构包含：
	* 	u32       m_dwSessionID;
    *	TImNOList m_tNOList;                  //要添加的多人聊天的成员  	
    *	TRoomId   m_tRoomId;                  // 可选的，房间ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatAddMember_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMemberInfo, TImMultiChatMemberInfo)
	
	/**********************************************************************************
	* < 多人聊天成员状态改变通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMultiChatMemberInfoEx：	多人聊天增加成员结构体
	* ----------------------------------------------------------
	* 其中TImMultiChatMemberInfoEx的结构包含：
	* 	u32   m_dwSessionID;
    *	s8    m_achNO[IM_MAX_ID_LEN];                      // 邮箱id
    *	BOOL  m_bOwner;                                    // 是否聊天室创建人
    *	BOOL  m_bSelf;                                     // 是否自己
    *	EmMtImTerminalType  m_eMtType;                     // 终端类型
    *	EmMtOnlineState     m_eState;                      // 终端状态
    *	EmMtOnlineState     m_eMaxState;                   // 最高级别在线状态
    *	TRoomId             m_tRoomId;					   // 房间ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatMemberStatusChange_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMemberInfoEx, TImMultiChatMemberInfoEx)
	
	/**********************************************************************************
	* < 多人聊天删除成员请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMultiChatMemberInfo：	多人聊天增加成员结构体
	* ----------------------------------------------------------
	* 其中TImMultiChatMemberInfo的结构包含：
	* 	 u32       m_dwSessionID;
    *	TImNOList m_tNOList;                  //要添加的多人聊天的成员  	
    *	TRoomId   m_tRoomId;                  // 可选的，房间ID
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatDelMember_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMemberInfo, TImMultiChatMemberInfo)
	
	/**********************************************************************************
	* < 多人聊天删除成员应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TRoomId：					房间ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatDelMember_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TRoomId, TRoomId)
	
	/**********************************************************************************
	* < 多人聊天删除成员通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMultiChatMemberInfoEx：	多人聊天增加成员结构体
	* ----------------------------------------------------------
	* 其中TImMultiChatMemberInfoEx的结构包含：
	* 	u32   m_dwSessionID;
    *	s8    m_achNO[IM_MAX_ID_LEN];                      // 邮箱id
    *	BOOL  m_bOwner;                                    // 是否聊天室创建人
    *	BOOL  m_bSelf;                                     // 是否自己
    *	EmMtImTerminalType  m_eMtType;                     // 终端类型
    *	EmMtOnlineState     m_eState;                      // 终端状态
    *	EmMtOnlineState     m_eMaxState;                   // 最高级别在线状态
    *	TRoomId             m_tRoomId;					   // 房间ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatDelMember_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMemberInfoEx, TImMultiChatMemberInfoEx)
	
	/**********************************************************************************
	* < 退出多人聊天请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						聊天ID
	*		TRoomId						聊天室ID
	* ----------------------------------------------------------
	* 其中TRoomId的结构包含：
	* 	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];			// 聊天室ID
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatQuit_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, ChatID)
	BODY(mt::TRoomId, TRoomId)
	
	/**********************************************************************************
	* < 退出多人聊天应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TU32：						聊天ID
	*		TRoomId						聊天室ID
	* ----------------------------------------------------------
	* 其中TRoomId的结构包含：
	* 	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];			// 聊天室ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatQuit_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, ChatID)
	BODY(mt::TRoomId, TRoomId)
	
	/**********************************************************************************
	* < 多人聊天成员离开聊天室通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMultiChatMemberInfoEx：	多人聊天增加成员结构体
	* ----------------------------------------------------------
	* 其中TImMultiChatMemberInfoEx的结构包含：
	* 	u32   m_dwSessionID;
    *	s8    m_achNO[IM_MAX_ID_LEN];                      // 邮箱id
    *	BOOL  m_bOwner;                                    // 是否聊天室创建人
    *	BOOL  m_bSelf;                                     // 是否自己
    *	EmMtImTerminalType  m_eMtType;                     // 终端类型
    *	EmMtOnlineState     m_eState;                      // 终端状态
    *	EmMtOnlineState     m_eMaxState;                   // 最高级别在线状态
    *	TRoomId             m_tRoomId;					   // 房间ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImMulitChatMemberLeave_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMemberInfoEx, TImMultiChatMemberInfoEx)
	
	/**********************************************************************************
	* < 多人聊天发送消息请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMultiChatMessage：		多人聊天消息
	* ----------------------------------------------------------
	* 其中TImMultiChatMessage的结构包含：
	* 	u32 m_dwSessionID;         				//多人聊天会话ID
    *	s8 m_achSrcNO[IM_MAX_ID_LEN];         	//消息源
    *	EmMtImTerminalType m_emImMtType;       	// 终端类型
    *	TImChatBuf m_tMessageBuf; 				//消息体  
    *	u32        m_dwContextId; 				// 用户自定义数据
    *	TRoomId    m_tRoomId;     				// 可选的
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImSendMulitSMS_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMessage, TImMultiChatMessage)
	
	/**********************************************************************************
	* < 多人聊天发送消息应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TImMultiChatMessage：		多人聊天消息
	* ----------------------------------------------------------
	* 其中TImMultiChatMessage的结构包含：
	* 	u32 		m_dwSessionID;         				//多人聊天会话ID
    *	s8 			m_achSrcNO[IM_MAX_ID_LEN];         	//消息源
    *	EmMtImTerminalType m_emImMtType;       			// 终端类型
    *	TImChatBuf 	m_tMessageBuf; 						//消息体  
    *	u32        	m_dwContextId; 						// 用户自定义数据
    *	TRoomId    	m_tRoomId;     						// 可选的
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImSendMulitSMS_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMessage, TImMultiChatMessage)
	
	/**********************************************************************************
	* < 收到多人聊天消息通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMultiChatMessage：		多人聊天消息
	* ----------------------------------------------------------
	* 其中TImMultiChatMessage的结构包含：
	* 	u32 			m_dwSessionID;         				//多人聊天会话ID
    *	s8 				m_achSrcNO[IM_MAX_ID_LEN];         	//消息源
    *	EmMtImTerminalType m_emImMtType;       				// 终端类型
    *	TImChatBuf 		m_tMessageBuf; 						//消息体  
    *	u32        		m_dwContextId; 						// 用户自定义数据
    *	TRoomId    		m_tRoomId;     						// 可选的
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImSendMulitSMS_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMessage, TImMultiChatMessage)
	
	/**********************************************************************************
	* < 多人聊天发送消息立即应答（带服务器时间）发送给自己的 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImMultiChatMessage:			点对点消息结构
	* ----------------------------------------------------------	
	* 其中TImMultiChatMessage的结构包含：
	* 	u32 				m_dwSessionID;         			//多人聊天会话ID
    *	s8 					m_achSrcNO[IM_MAX_ID_LEN];      //消息源
    *	EmMtImTerminalType 	m_emImMtType;       				// 终端类型
    *	TImChatBuf 			m_tMessageBuf; 					//消息体  
    *	u32        			m_dwContextId; 					// 用户自定义数据
    *	TRoomId    			m_tRoomId;     					// 可选的
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendMulitSMSInstant_Rsp)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatMessage, TImMultiChatMessage)
	
	/**********************************************************************************
	* < 删除该用户所有好友请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImClearDir_Req)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 删除该用户所有好友应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImClearDir_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 再次尝试登录（内部消息，不对外开放） >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImRetryLogin_Cmd)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 文件/文件夹传输请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImFileShareReq：			文件传输请求结构体
	* ----------------------------------------------------------
	* 其中TImFileShareReq的结构包含：
	*	s8     m_achDestNO[IM_MAX_ID_LEN];                  // 对端的Im账号
    *	u32    m_nFileType;                                 // 0: 文件夹；1：文件；2：图片
    *	s8     m_achFilePath[IM_MAX_PATH_LEN];              // 文件绝对路径名
    *	u32    m_dwFileSize;                                // 文件大小(单位：字节)
    *	u32    m_dwContextId;                               // 上层应用设置的上下文id
    *	BOOL   m_bOverWrite;                                // 指定接收方是否要覆盖已有的同名文件
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendFile_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImFileShareReq, TImFileShareReq)
	
	/**********************************************************************************
	* < 文件/文件夹传输应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TU32：						SessionID
	*		TImFileShareReq：			文件传输请求结构体
	* ----------------------------------------------------------
	* 其中TImFileShareReq的结构包含：
	*	s8     m_achDestNO[IM_MAX_ID_LEN];                  // 对端的Im账号
    *	u32    m_nFileType;                                 // 0: 文件夹；1：文件；2：图片
    *	s8     m_achFilePath[IM_MAX_PATH_LEN];              // 文件绝对路径名
    *	u32    m_dwFileSize;                                // 文件大小(单位：字节)
    *	u32    m_dwContextId;                               // 上层应用设置的上下文id
    *	BOOL   m_bOverWrite;                                // 指定接收方是否要覆盖已有的同名文件
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendFile_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, sessionID)
	BODY(mt::TImFileShareReq, TImFileShareReq)
	
	/**********************************************************************************
	* < 接受/拒绝对端的文件/文件夹传输请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	*		TBOOL32:					是否接收
	*		TBOOL32：					如果接收，是否设置另存为路径
	*		TString：					另存为路径
	* ----------------------------------------------------------
	* 其中TImFileShareReq的结构包含：
	*	s8     m_achDestNO[IM_MAX_ID_LEN];                  // 对端的Im账号
    *	u32    m_nFileType;                                 // 0: 文件夹；1：文件；2：图片
    *	s8     m_achFilePath[IM_MAX_PATH_LEN];              // 文件绝对路径名
    *	u32    m_dwFileSize;                                // 文件大小(单位：字节)
    *	u32    m_dwContextId;                               // 上层应用设置的上下文id
    *	BOOL   m_bOverWrite;                                // 指定接收方是否要覆盖已有的同名文件
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImAcceptFile_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, SessionID)
	BODY(mt::TBOOL32, bRecv)
	BODY(mt::TBOOL32, bSetSavePath)
	BODY(mt::TString, achPath)
	
	/**********************************************************************************
	* < 接受/拒绝对端的文件/文件夹传输请求的应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	*		TBOOL32:					是否接收
	*		TBOOL32：					如果接收，是否设置另存为路径
	*		TString：					另存为路径
	* ----------------------------------------------------------
	* 其中TImFileShareReq的结构包含：
	*	s8     m_achDestNO[IM_MAX_ID_LEN];                  // 对端的Im账号
    *	u32    m_nFileType;                                 // 0: 文件夹；1：文件；2：图片
    *	s8     m_achFilePath[IM_MAX_PATH_LEN];              // 文件绝对路径名
    *	u32    m_dwFileSize;                                // 文件大小(单位：字节)
    *	u32    m_dwContextId;                               // 上层应用设置的上下文id
    *	BOOL   m_bOverWrite;                                // 指定接收方是否要覆盖已有的同名文件
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImAcceptFile_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TBOOL32, bRecv)
	BODY(mt::TBOOL32, bSetSavePath)
	BODY(mt::TString, achPath)
	
	/**********************************************************************************
	* < 中断文件/文件夹传输请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImCancelFile_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, SessionID)
	
	/**********************************************************************************
	* < 中断文件/文件夹传输应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImCancelFile_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, SessionID)
	
	/**********************************************************************************
	* < 收到文件传输offer通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	*		TImFileShareOfferInfo:		文件共享结构
	* ----------------------------------------------------------
	* 其中TImFileShareReq的结构包含：
	*	s8     m_achPeerNO[IM_MAX_ID_LEN];                  // 对端的Im账号
    *	u32    m_nFileType;                                 // 0: 文件夹；1：文件；2：图片
    *	s8     m_achFileName[IM_MAX_PATH_LEN];              // 文件名(不含路径)
    *	u32    m_dwFileSize;                                // 文件大小(单位：字节)
    *	BOOL   m_bSender;                                   // 自己是否是发送者
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImFileShareOffer_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, SessionID)
	BODY(mt::TImFileShareOfferInfo, TImFileShareOfferInfo)
	
	/**********************************************************************************
	* < 收到文件传输开始通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImFileShareStart_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, SessionID)
	
	/**********************************************************************************
	* < 收到文件传输结束通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	*		TString：					最终文件路径名(接收方有效，发送方为空字符串)
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImFileShareComplete_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, SessionID)
	BODY(mt::TString, achPath)
	
	/**********************************************************************************
	* < 收到文件传输中止通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	*		TBOOL32：					是否本地中止
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImFileShareCancel_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, SessionID)
	BODY(mt::TBOOL32, bStop)
	
	/**********************************************************************************
	* < 收到文件传输失败通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	*		TU32：						错误码
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImFileShareFailure_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, SessionID)
	BODY(mt::TU32, emErrorID)
	
	/**********************************************************************************
	* < 收到文件传输进度通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						文件传输SessionID
	*		TImFileShareProgress：		文件传输进度
	* ----------------------------------------------------------
	* 其中TImFileShareProgress的结构包含：
	*	u32    m_dwPercent;                                  // 传输进度0~100
    *	s8     m_achCurFileName[IM_MAX_PATH_LEN];            // 当前传输的文件名(不含路径)
    *	u32    m_dwTransferSize;                             // 已经传输大小
    *	u32    m_dwTrasferRate;                              // 传输速率
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImFileShareProgress_Ntf)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TU32, SessionID)
 	BODY(mt::TImFileShareProgress, TImFileShareProgress)
	
	/**********************************************************************************
	* < 设置文件保存路径请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TString：					文件保存路径
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetFileSavePath_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TString, Path)
	
	/**********************************************************************************
	* < 设置文件保存路径应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TString：					文件保存路径
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetFileSavePath_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TString, Path)
	
	/**********************************************************************************
	* < 收到联系人列表组增加通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImGroupInfo：				组信息
	* ----------------------------------------------------------
	* 其中TImGroupInfo的结构包含：
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		//用户组序号
    *	s8 m_achGroupName[MAXLEN_GROUPNAME + 1];    //用户组名称
    *	s8 m_achParentGroupSn[MAXLEN_U64STRING+1];  //父组序号
	*	u16 m_wGroupLevel;                          //组的层级
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGroupAdd_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImGroupInfo, TImGroupInfo)
	
	/**********************************************************************************
	* < 收到联系人列表组删除通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImSn：						组ID
	*		TBOOL32：					是否保存到未分组
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn;  			//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGroupDel_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	BODY(mt::TBOOL32, bSaveToNoGroup)
	
	/**********************************************************************************
	* < 收到联系人列表组修改通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImGroupInfo：				组信息
	* ----------------------------------------------------------
	* 其中TImGroupInfo的结构包含：
	* 	s8 m_achGroupSn[MAXLEN_U64STRING+1];		//用户组序号
    *	s8 m_achGroupName[MAXLEN_GROUPNAME + 1];    //用户组名称
    *	s8 m_achParentGroupSn[MAXLEN_U64STRING+1];  //父组序号
	*	u16 m_wGroupLevel;                          //组的层级
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGroupModify_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImGroupInfo, TImGroupInfo)
	
	/**********************************************************************************
	* < 收到联系人列表成员增加通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMemberInfo：				成员信息
	* ----------------------------------------------------------
	* 其中TImMemberInfo的结构包含：
	* 	s8 m_achMemberSn[MAXLEN_U64STRING+1];        // 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 // 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         // 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];// 成员名称 
	*	EmMtMemberType m_emMemberType;			     // 成员类型
    *	u16 m_wBitRate;                              // 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        // 联系人微博信息
    *	BOOL  m_bNoQuery;                            // 是否不查Account
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMemberAdd_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberInfo, TImMemberInfo)
	
	/**********************************************************************************
	* < 收到联系人列表成员删除通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImSn：						组ID
	* ----------------------------------------------------------
	* 	其中TImSn的结构包含：
	* 	s8 m_achSn;  			//序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMemberDel_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSn, TImSn)
	
	/**********************************************************************************
	* < 收到联系人列表成员修改通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMemberInfo：				成员信息
	* ----------------------------------------------------------
	* 其中TImMemberInfo的结构包含：
	* 	s8 m_achMemberSn[MAXLEN_U64STRING+1];        // 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 // 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         // 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];// 成员名称 
	*	EmMtMemberType m_emMemberType;			     // 成员类型
    *	u16 m_wBitRate;                              // 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        // 联系人微博信息
    *	BOOL  m_bNoQuery;                            // 是否不查Account
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMemberModify_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMemberInfo, TImMemberInfo)
	
	/**********************************************************************************
	* < 收到联系人列表成员移动通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMoveMember：				移动成员信息
	* ----------------------------------------------------------
	* 其中TImMoveMember的结构包含：
	* 	s8 m_achMemberSn[MAXLEN_U64STRING+1];               //成员序号
    *	s8 m_achOldGroupSn[MAXLEN_U64STRING+1];             //老的组序列号
    *	s8 m_achNewGroupSn[MAXLEN_U64STRING+1];             //新的组序列号
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMemberMove_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMoveMember, TImMoveMember)
	
	/**********************************************************************************
	* < 登录后收到自动进入固定群通知(for truelink) >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMulitChatCreateInfo：	多人聊天信息结构体
	* ----------------------------------------------------------
	* 其中TImMulitChatCreateInfo的结构包含：
	* 	u32 m_dwSessionID;                              //会话ID
	*	u32 m_dwClientID;                               //创建多人会话时，客户端指定的唯一标志
    *	s8 m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     //多人聊天会话名称(可不填); 
	*	EmMtMultiChatType m_emMultiChatType;            //多人聊天会话, 普通类型，会议类型....
    *	s8 m_achConfE164[MT_MAX_E164NUM_LEN+1];         //会议的E164号，当EmMultiChatType为会议类型时才有意义
    *	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         //群聊室的ID(用在下一次上线确定是否为相同的聊天室)
    *	BOOL  m_bPersistent;                            // 是否固定群
    *	BOOL  m_bOwner;                                 // 是否群的创建人，用于(ev_ImEnterPersistentRoomNtfInd)
    *	s8    m_achInviterNO[IM_MAX_ID_LEN];            // 邀请人的ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImEnterPersistentRoom_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMulitChatCreateInfo, TImMulitChatCreateInfo)
	
	/**********************************************************************************
	* < 登录后收到自动进入固定群通知(for android) >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImMulitChatCreateInfo：	多人聊天信息结构体
	* ----------------------------------------------------------
	* 其中TImMulitChatCreateInfo的结构包含：
	* 	u32 m_dwSessionID;                              //会话ID
	*	u32 m_dwClientID;                               //创建多人会话时，客户端指定的唯一标志
    *	s8 m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     //多人聊天会话名称(可不填); 
	*	EmMtMultiChatType m_emMultiChatType;            //多人聊天会话, 普通类型，会议类型....
    *	s8 m_achConfE164[MT_MAX_E164NUM_LEN+1];         //会议的E164号，当EmMultiChatType为会议类型时才有意义
    *	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         //群聊室的ID(用在下一次上线确定是否为相同的聊天室)
    *	BOOL  m_bPersistent;                            // 是否固定群
    *	BOOL  m_bOwner;                                 // 是否群的创建人，用于(ev_ImEnterPersistentRoomNtfInd)
    *	s8    m_achInviterNO[IM_MAX_ID_LEN];            // 邀请人的ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImEnterPersistentRoomForAndroid_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMulitChatCreateInfo, TImMulitChatCreateInfo)
	
	/**********************************************************************************
	* < 登录后收到进入固定群失败通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TPersistentChatroomItem：				移动成员信息
	* ----------------------------------------------------------
	* 其中TPersistentChatroomItem的结构包含：
	* 	s8   m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         // 聊天室的ID(用在下一次上线确定是否为相同的聊天室)
    *	s8   m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     // 聊天室名称
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImEnterPersistentRoomFail_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TPersistentChatroomItem, TPersistentChatroomItem)
	
	/**********************************************************************************
	* < 通知和Xmpp服务器的连接断开 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImDisconnected_Ntf)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 通知有人请求关注自己 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImId：						请求者的Im ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQuerySubscribe_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImID, imID)
	
	/**********************************************************************************
	* < 多人文件/文件夹传输请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImGroupChatFileShareReq：	文件夹信息
	* ----------------------------------------------------------
	* 其中TImGroupChatFileShareReq的结构包含：
	* 	u32    m_dwSessionID;                               // 多人聊天id
    *	u32    m_nFileType;                                 // 0: 文件夹；1：文件；2：图片
    *	s8     m_achFilePath[IM_MAX_PATH_LEN];              // 文件绝对路径名
    *	u32    m_dwFileSize;                                // 文件大小(单位：字节)
    *	u32    m_dwContextId;                               // 上下文id
    *	s8     m_achPicSessionId[32];                       // 图片传输session id
    *	TRoomId m_tRoomId;                                  // 可选的
    *	BOOL   m_bOverWrite;								// 是否覆盖
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendGroupChatFile_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImGroupChatFileShareReq, TImGroupChatFileShareReq)
	
	/**********************************************************************************
	* < 多人文件/文件夹传输应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TImGroupChatFileShareReq：	文件夹信息
	* ----------------------------------------------------------
	* 其中TImGroupChatFileShareReq的结构包含：
	* 	u32    m_dwSessionID;                               // 多人聊天id
    *	u32    m_nFileType;                                 // 0: 文件夹；1：文件；2：图片
    *	s8     m_achFilePath[IM_MAX_PATH_LEN];              // 文件绝对路径名
    *	u32    m_dwFileSize;                                // 文件大小(单位：字节)
    *	u32    m_dwContextId;                               // 上下文id
    *	s8     m_achPicSessionId[32];                       // 图片传输session id
    *	TRoomId m_tRoomId;                                  // 可选的
    *	BOOL   m_bOverWrite;								// 是否覆盖
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImSendGroupChatFile_Rsp)
 	BODY(mt::TU32, emErrorID)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImGroupChatFileShareReq, TImGroupChatFileShareReq)
	
	/**********************************************************************************
	* < 内部通知service聊天室建立情况 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TU32：						房间句柄
	*		TString：					房间ID
	* ----------------------------------------------------------
	* 其中TImGroupChatFileShareReq的结构包含：
	* 	u32    m_dwSessionID;                               // 多人聊天id
    *	u32    m_nFileType;                                 // 0: 文件夹；1：文件；2：图片
    *	s8     m_achFilePath[IM_MAX_PATH_LEN];              // 文件绝对路径名
    *	u32    m_dwFileSize;                                // 文件大小(单位：字节)
    *	u32    m_dwContextId;                               // 上下文id
    *	s8     m_achPicSessionId[32];                       // 图片传输session id
    *	TRoomId m_tRoomId;                                  // 可选的
    *	BOOL   m_bOverWrite;								// 是否覆盖
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImInnerNotifyCreateChatRoom_Ntf)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, RoomHandler)
	BODY(mt::TString, RoomId)
	BODY(mt::TString, serviceId)
	
	/**********************************************************************************
	* < ios系统请求设置临时目录(只用于IOS系统) >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TString：					临时目录
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImIosSetTempPath_Cmd)
	BODY(mt::TString, achPath)
	
	/**********************************************************************************
	* < 设置文件传输带宽请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						带宽大小
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetFileTransferBitRate_Req)
	BODY(mt::TU32, dwRate)
	
	/**********************************************************************************
	* < 设置文件传输带宽应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						带宽大小
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetFileTransferBitRate_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, dwRate)
	
	/**********************************************************************************
	* < 设置固定群聊天信息已读请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						固定群句柄
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetChatroomMessagesReadFlag_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 设置固定群聊天信息已读应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TU32：						固定群句柄
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetChatroomMessagesReadFlag_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 定时PUSH 缓存的好友状态 >
	* ----------------------------------------------------------
	* 参数：TDeviceOnlineStateCacheList：		设备在线信息
	* ----------------------------------------------------------
	* 其中TDeviceOnlineStateCacheList的结构包含：
	* 	u32                            m_dwArraySize;		// 个数
    *	TDeviceOnlineStateCacheItem    m_atArray;			// 设备在线信息（多个）
	* ----------------------------------------------------------
	* 其中TDeviceOnlineStateCacheItem的结构包含：
	*	u32                            m_dwApp;                   // 缓存账号
    *	TDeviceOnlineState             m_tStatus;                 // 缓存状态
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImPushMemberStatus_Ntf)
	BODY(mt::TDeviceOnlineStateCacheList, TDeviceOnlineStateCacheList)
	
	/**********************************************************************************
	* < 通知组和好友成员数据已经准备好 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMembersDataReady_Ntf)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 请求一些用户的状态 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImNOList：					设备在线信息
	* ----------------------------------------------------------
	* 其中TImNOList的结构包含：
	* 	u32 m_dwArraySize;						// 个数
	*	TImNO m_atArray[MAXLEN_USER_LIST];		// 邮箱ID（多个）
	* ----------------------------------------------------------
	* 其中TImNO的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];              // 邮箱ID
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetUsersState_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNOList, TImNOList)
	
	/**********************************************************************************
	* < 请求一些用户的状态应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误ID
	*		TU32：						当前登录句柄
	*		TImNOList：					设备在线信息
	* ----------------------------------------------------------
	* 其中TImNOList的结构包含：
	* 	u32 m_dwArraySize;						// 个数
	*	TImNO m_atArray[MAXLEN_USER_LIST];		// 邮箱ID（多个）
	* ----------------------------------------------------------
	* 其中TImNO的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];              // 邮箱ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetUsersState_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNOList, TImNOList)
	
	/**********************************************************************************
	* < 一些用户的状态分包信息 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImUserStateList：			用户状态列表
	* ----------------------------------------------------------
	* 其中TImUserStateList的结构包含：
	* 	u32 m_dwArraySize;					// 个数
    *	TImUserState m_atArray;				// 用户状态（多个）
	* ----------------------------------------------------------
	* 其中TImUserState的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];	                           // 用户唯一标识
    *	EmMtOnlineState m_tState;                              // 用户状态
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetUsersState_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImUserStateList, TImUserStateList)
	
	/**********************************************************************************
	* < 一些用户的状态分包结束 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImNOList：					设备在线信息
	* ----------------------------------------------------------
	* 其中TImNOList的结构包含：
	* 	u32 m_dwArraySize;						// 个数
	*	TImNO m_atArray[MAXLEN_USER_LIST];		// 邮箱ID（多个）
	* ----------------------------------------------------------
	* 其中TImNO的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];              // 邮箱ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetUsersState_Fin_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNOList, TImNOList)
	
	/**********************************************************************************
	* < 请求一些用户的状态(包括终端类型) >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImNOList：					设备在线信息
	* ----------------------------------------------------------
	* 其中TImNOList的结构包含：
	* 	u32 	m_dwArraySize;						// 个数
	*	TImNO 	m_atArray[MAXLEN_USER_LIST];		// 邮箱ID（多个）
	* ----------------------------------------------------------
	* 其中TImNO的结构包含：
	* 	s8 		m_achNO[IM_MAX_ID_LEN];              // 邮箱ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetUsersStateEx_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNOList, TImNOList)
	
	/**********************************************************************************
	* < 请求一些用户的状态(包括终端类型)应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TImNOList：					设备在线信息
	* ----------------------------------------------------------
	* 其中TImNOList的结构包含：
	* 	u32 	m_dwArraySize;						// 个数
	*	TImNO 	m_atArray[MAXLEN_USER_LIST];		// 邮箱ID（多个）
	* ----------------------------------------------------------
	* 其中TImNO的结构包含：
	* 	s8 		m_achNO[IM_MAX_ID_LEN];              // 邮箱ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetUsersStateEx_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNOList, TImNOList)
	
	/**********************************************************************************
	* < 一些用户的状态(包括终端类型)分包信息 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImUserStateListEx：		用户状态列表( 带上终端类型 )
	* ----------------------------------------------------------
	* 其中TImUserStateListEx的结构包含：
	* 	u32               m_dwArraySize;			// 个数
    *	TImUserStateEx    m_atArray;				// 用户状态（多个）
	* ----------------------------------------------------------
	* 其中TImUserStateEx的结构包含：
	* 	s8                  m_achNO[IM_MAX_ID_LEN];	               // 用户唯一标识
    *	EmMtOnlineState     m_tState;                              // 用户状态(最高状态)
    *	BOOL                m_bMaxAudio;                           // 既有音频能力，又连上GK
    *	BOOL                m_bMaxVideo;                           // 既有视频能力，又连上GK
	*	TSubState           m_atMtState[IM_MAX_MT_TYPE];           // tl, tp, td, ts状态
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetUsersStateEx_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImUserStateListEx, TImUserStateListEx)
	
	/**********************************************************************************
	* < 一些用户的状态(包括终端类型)分包结束 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImNOList：					设备在线信息
	* ----------------------------------------------------------
	* 其中TImNOList的结构包含：
	* 	u32 	m_dwArraySize;						// 个数
	*	TImNO 	m_atArray[MAXLEN_USER_LIST];		// 邮箱ID（多个）
	* ----------------------------------------------------------
	* 其中TImNO的结构包含：
	* 	s8 		m_achNO[IM_MAX_ID_LEN];              // 邮箱ID
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetUsersStateEx_Fin_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNOList, TImNOList)
	
	/**********************************************************************************
	* < 内部通知AcceptInvite情况 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32：						房间句柄
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImInnerNotifyAcceptInvite_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 内部通知连接断开 >
	* ----------------------------------------------------------
	* 参数：
	*	TU32：						当前登录句柄
	*	TBOOL32:					是否需要调用logout函数
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImInnerDisconnected_Ntf)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 通知安全(同一账号在其他地方登录) >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImNotifySecurity_Ntf)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 离线消息满通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TU32:						接收者
	*		TString：					发送给谁的离线消息
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImNotifyOfflineMsgOverflow_Ntf)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TString, achContext)
	
	/**********************************************************************************
	* < 修改房间配置请求 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImChatRoomInfo：			聊天室信息
	* ----------------------------------------------------------
	* 其中TImChatRoomInfo的结构包含：
	* 	u32     	m_dwSessionID;				// SessionID
    *	s8      	m_achChatName;				// 聊天室名字
    *	TRoomId 	m_tRoomId;					// 聊天室ID
	* ----------------------------------------------------------
	* 其中TRoomId的结构包含：
	* 	s8 			m_achRoomId;				// 聊天室ID
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetChatroom_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImChatRoomInfo, TImChatRoomInfo)
	
	/**********************************************************************************
	* < 修改房间配置应答 >
	* ----------------------------------------------------------
	* 参数：TU32：						错误码
	*		TU32：						当前登录句柄
	*		TImChatRoomInfo：			聊天室信息
	* ----------------------------------------------------------
	* 其中TImChatRoomInfo的结构包含：
	* 	u32     	m_dwSessionID;				// SessionID
    *	s8      	m_achChatName;				// 聊天室名字
    *	TRoomId 	m_tRoomId;					// 聊天室ID
	* ----------------------------------------------------------
	* 其中TRoomId的结构包含：
	* 	s8 			m_achRoomId;				// 聊天室ID
	* ----------------------------------------------------------
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetChatroom_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImChatRoomInfo, TImChatRoomInfo)
	
	/**********************************************************************************
	* < 通知聊天室配置 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TImChatRoomInfo：			聊天室信息
	* ----------------------------------------------------------
	* 其中TImChatRoomInfo的结构包含：
	* 	u32     m_dwSessionID;			// SessionID
    *	s8      m_achChatName;			// 聊天室名字
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImNotifyRoomConfig_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImChatRoomInfo, TImChatRoomInfo)
	
	/**********************************************************************************
	* < 内部通知打印Im Debug信息 >
	* ----------------------------------------------------------
	* 参数：TU32：						打印选项
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImInnerNotifyStanza_Ntf)
	BODY(mt::bytes, print)
	
	/**********************************************************************************
	* < 内部通知打印Im Debug信息 >
	* ----------------------------------------------------------
	* 参数：TU32：						打印选项
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImInnerDebug_Ntf)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 内部通知打印xmpp lib调试信息 >
	* ----------------------------------------------------------
	* 参数：无
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImInnerXmppInfo_Ntf)
	
	/**********************************************************************************
	* < 拒绝邀请，消息满的通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TDeclineInfo：				拒绝邀请消息的结构体
	* ----------------------------------------------------------
	* 其中TDeclineInfo的结构包含：
	* 	s8 m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];         // 多人聊天会话名称(可不填); 
    *	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];             // 群聊室的ID(用在下一次上线确定是否为相同的聊天室)   
    *	s8 m_achDeclineNO[IM_MAX_ID_LEN];                   // 拒绝人的ID
    *	EImDeclineReason   m_eReason;                       // 拒绝的原因
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImDecline_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TDeclineInfo, TDeclineInfo)
	
	/**********************************************************************************
	* < 聊天室非在线人员增加通知 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImMultiChatRosterItemList：	聊天室信息
	* ----------------------------------------------------------
	* 其中TImMultiChatRosterItemList的结构包含：
	* 	u32                            m_dwSessionId;                               // 聊天室id
    *	u32                            m_dwArraySize;                               // 个数
    *	TImMultiChatRosterItem         m_atArray[IM_MAX_ROSTER_ITEMS_PER_BATCH];    // 多人聊天成员列表(非进入聊天室内)
    *	TRoomId                        m_tRoomId;									// 房间ID
	* ----------------------------------------------------------
	* 其中TImMultiChatRosterItem的结构包含：
	* 	s8    m_achNO[IM_MAX_ID_LEN];                      // 邮箱id
    *	BOOL  m_bOwner;                                    // 是否聊天室创建人
    *	BOOL  m_bSelf;                                     // 是否自己
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImChatroomRosterItemsAdd_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatRosterItemList, TImMultiChatRosterItemList)
	
	/**********************************************************************************
	* < 聊天室非在线人员减少通知 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImMultiChatRosterItemList：	聊天室信息
	* ----------------------------------------------------------
	* 其中TImMultiChatRosterItemList的结构包含：
	* 	u32                            m_dwSessionId;                               // 聊天室id
    *	u32                            m_dwArraySize;                               // 个数
    *	TImMultiChatRosterItem         m_atArray[IM_MAX_ROSTER_ITEMS_PER_BATCH];    // 多人聊天成员列表(非进入聊天室内)
    *	TRoomId                        m_tRoomId;									// 房间ID
	* ----------------------------------------------------------
	* 其中TImMultiChatRosterItem的结构包含：
	* 	s8    m_achNO[IM_MAX_ID_LEN];                      // 邮箱id
    *	BOOL  m_bOwner;                                    // 是否聊天室创建人
    *	BOOL  m_bSelf;                                     // 是否自己
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImChatroomRosterItemsDel_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatRosterItemList, TImMultiChatRosterItemList)
	
	/**********************************************************************************
	* < 聊天室服务可用通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TBOOL32：					判断是否不需要替换HAPP
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImChatroomServiceAvailable_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TBOOL32, bModifyHApp)
	
	/**********************************************************************************
	* < 聊天室图片传输开始通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TMultiChatPicId：			多人聊天发送图片的唯一标志
	*		TU32：						图片大小
	*		TString：					图片名（不包含路径）
	* ----------------------------------------------------------
	* 其中TMultiChatPicId的结构包含：
	* 	u32                 m_dwSessionID;                  //多人聊天会话ID
    *	s8                  m_achNO[IM_MAX_ID_LEN];	        // 用户唯一标识
    *	EmMtImTerminalType  m_tDeviceType;                  // 设备类型
    *	s8                  m_achSid[IM_MAX_SID_LEN];       // sid
    *	TRoomId             m_tRoomId;     					// 房间ID（可选）
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImChatroomPictureOpen_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TMultiChatPicId, TMultiChatPicId)
	BODY(mt::TU32, dwSize)
	BODY(mt::TString, achName)
	
	/**********************************************************************************
	* < 聊天室图片传输进度通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TMultiChatPicId：			多人聊天发送图片的唯一标志
	*		TU32：						图片大小
	*		TU32：						进度（百分比）
	* ----------------------------------------------------------
	* 其中TMultiChatPicId的结构包含：
	* 	u32                 m_dwSessionID;                  //多人聊天会话ID
    *	s8                  m_achNO[IM_MAX_ID_LEN];	        // 用户唯一标识
    *	EmMtImTerminalType  m_tDeviceType;                  // 设备类型
    *	s8                  m_achSid[IM_MAX_SID_LEN];       // sid
    *	TRoomId             m_tRoomId;     					// 房间ID（可选）
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImChatroomPictureData_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TMultiChatPicId, TMultiChatPicId)
	BODY(mt::TU32, dwPos)
	
	/**********************************************************************************
	* < 聊天室图片传输进度通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TMultiChatPicId：			多人聊天发送图片的唯一标志
	*		TString：					最终保存路径名
	* ----------------------------------------------------------
	* 其中TMultiChatPicId的结构包含：
	* 	u32                 m_dwSessionID;                  //多人聊天会话ID
    *	s8                  m_achNO[IM_MAX_ID_LEN];	        // 用户唯一标识
    *	EmMtImTerminalType  m_tDeviceType;                  // 设备类型
    *	s8                  m_achSid[IM_MAX_SID_LEN];       // sid
    *	TRoomId             m_tRoomId;     					// 房间ID（可选）
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImChatroomPictureClose_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TMultiChatPicId, TMultiChatPicId)
	BODY(mt::TString, achPath)
	
	/**********************************************************************************
	* < 聊天室图片传输失败通知 >
	* ----------------------------------------------------------
	* 参数：TU32：						当前登录句柄
	*		TMultiChatPicId：			多人聊天发送图片的唯一标志
	*		TU32:						错误码
	* ----------------------------------------------------------
	* 其中TMultiChatPicId的结构包含：
	* 	u32                 m_dwSessionID;                  //多人聊天会话ID
    *	s8                  m_achNO[IM_MAX_ID_LEN];	        // 用户唯一标识
    *	EmMtImTerminalType  m_tDeviceType;                  // 设备类型
    *	s8                  m_achSid[IM_MAX_SID_LEN];       // sid
    *	TRoomId             m_tRoomId;     					// 房间ID（可选）
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImChatroomPictureFail_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TMultiChatPicId, TMultiChatPicId)
	BODY(mt::TU32, ErrorID)
	
	/**********************************************************************************
	* < 聊天室成员增加通知 >
	* ----------------------------------------------------------
	* 参数：TU32：									当前登录句柄
	*		TImMultiChatAddMemberNotify：			多人聊天成员增加通知(用于在聊天框里显示"某某进入聊天室")
	* ----------------------------------------------------------
	* 其中TImMultiChatAddMemberNotify的结构包含：
	* 	u32   m_dwSessionId;                               	// 聊天室id
    *	s8    m_achNO[IM_MAX_ID_LEN];                      	// 邮箱id
    *	TRoomId  m_tRoomId;									// 房间ID
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImChatroomMemberAdd_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImMultiChatAddMemberNotify, TImMultiChatAddMemberNotify)
	
	/**********************************************************************************
	* < 聊天室成员状态批量通知 >
	* ----------------------------------------------------------
	* 参数：TU32：									当前登录句柄
	*		TChatroomMemberCacheList：				批量通知讨论组成员消息
	* ----------------------------------------------------------
	* 其中TChatroomMemberCacheList的结构包含：
	* 	u32                           m_dwArraySize;		// 个数
    *	TChatroomMemberCacheItem      m_atArray;			// 讨论组成员信息
	* ----------------------------------------------------------	
	* 其中TChatroomMemberCacheList的结构包含：
	* 	 u32        m_dwEventId;               	// 事件id  ev_ImMulitChatAddMemberNtfInd;
												//         ev_ImMulitChatMemberStatusChangeNotify;
                                                //         ev_ImMulitChatMemberLeaveNtfInd;
                                                //         ev_ImMulitChatDelMemberNtfInd;
                                                //         ev_ImChatroomRosterItemsAddNotify
                                                //         ev_ImChatroomRosterItemsDelNotify
                                                //       + ev_ImChatroomMemberAddNotify
    *	u32                     	m_dwApp;                   // 账号id
    *	TImMultiChatMemberInfoEx    m_tInfo;                   // 数据
	* ----------------------------------------------------------		
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImChatroomMemberBatch_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TChatroomMemberCacheList, TChatroomMemberCacheList)
	
	/**********************************************************************************
	* < 通知上次登录保存的固定讨论组信息 >
	* ----------------------------------------------------------
	* 参数：TU32：									当前登录句柄
	*		TPersistentChatroomList：				多人聊天成员信息(用于在聊天框里显示"某某进入聊天室")
	* ----------------------------------------------------------
	* 其中TPersistentChatroomList的结构包含：
	* 	u32                                    m_dwArraySize;			// 个数
    *	TPersistentChatroomItem                m_atArray;				// 固定讨论组信息
	* ----------------------------------------------------------	
	* 其中TPersistentChatroomList的结构包含：
	* 	s8   m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         // 聊天室的ID(用在下一次上线确定是否为相同的聊天室)
    *	s8   m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     // 聊天室名称
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImPersistentChatrooms_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TPersistentChatroomList, TPersistentChatroomList)
	
	/**********************************************************************************
	* < 通知上次登录保存的固定讨论组信息结束 >
	* ----------------------------------------------------------
	* 参数：TU32：									当前登录句柄
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImPersistentChatrooms_Fin_Ntf)
	BODY(mt::TU32, HANDLE)

	/**********************************************************************************
	* < 请求进入之前保存的固定讨论组 >
	* ----------------------------------------------------------
	* 参数：TU32：									当前登录句柄
	*		TPersistentChatroomList：				多人聊天成员信息(用于在聊天框里显示"某某进入聊天室")
	* ----------------------------------------------------------
	* 其中TPersistentChatroomList的结构包含：
	* 	u32                                    m_dwArraySize;			// 个数
    *	TPersistentChatroomItem                m_atArray;				// 固定讨论组信息
	* ----------------------------------------------------------	
	* 其中TPersistentChatroomList的结构包含：
	* 	s8   m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         // 聊天室的ID(用在下一次上线确定是否为相同的聊天室)
    *	s8   m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     // 聊天室名称
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryEnterSavedPersistentChatrooms_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TPersistentChatroomList, TPersistentChatroomList)
	
	/**********************************************************************************
	* < 请求进入之前保存的固定讨论组 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TPersistentChatroomList：		多人聊天成员信息(用于在聊天框里显示"某某进入聊天室")
	* ----------------------------------------------------------
	* 其中TPersistentChatroomList的结构包含：
	* 	u32                                    m_dwArraySize;			// 个数
    *	TPersistentChatroomItem                m_atArray;				// 固定讨论组信息
	* ----------------------------------------------------------	
	* 其中TPersistentChatroomList的结构包含：
	* 	s8   m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         // 聊天室的ID(用在下一次上线确定是否为相同的聊天室)
    *	s8   m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     // 聊天室名称
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryEnterSavedPersistentChatrooms_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TPersistentChatroomList, TPersistentChatroomList)
	
	/**********************************************************************************
	* < 告知Im层上层应用，登录后准备好请求 >
	* ----------------------------------------------------------
	* 参数：TU32：									当前登录句柄
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetReady_Req)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 告知Im层上层应用，登录后准备好应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TU32：							服务器时间	
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetReady_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, time)
	
	/**********************************************************************************
	* < 通知数据已准备完毕 >
	* ----------------------------------------------------------
	* 参数：TU32：	当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSetReady_Ntf)			
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 查询某组下成员的在线状态(根据位置)请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImSn：							组sn号
	*		TU32：							位置（从0开始）
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn[MAXLEN_U64STRING+1];  	//序列号
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSnAndPosition_Req)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImSn, TImSn)
 	BODY(mt::TU32, dwPosition)
	
	/**********************************************************************************
	* < 查询某组下成员的在线状态(根据位置)应答 >
	* ----------------------------------------------------------
	* 参数：TBOOL32：						是否成功
	*		TU32：							错误码
	*		TU32：							当前登录句柄
	*		TImSn：							组sn号
	*		TU32：							位置（从0开始）
	*		TImUserStateListEx：			用户状态信息（多个）
	* ----------------------------------------------------------
	* 其中TImUserStateListEx的结构包含：
	* 	u32               m_dwArraySize;		// 个数
    *	TImUserStateEx    m_atArray;			// 用户状态信息（多个）
	* ----------------------------------------------------------	
	* 其中TImUserStateEx的结构包含：
	* 	s8                  m_achNO[IM_MAX_ID_LEN];	               // 用户唯一标识
    *	EmMtOnlineState     m_tState;                              // 用户状态(最高状态)
    *	BOOL                m_bMaxAudio;                           // 既有音频能力，又连上GK
    *	BOOL                m_bMaxVideo;                           // 既有视频能力，又连上GK
	*	TSubState           m_atMtState[IM_MAX_MT_TYPE];           // tl, tp, td, ts状态
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImQueryOnlineStateByGroupSnAndPosition_Rsp)
  	BODY(mt::TU32, emErrorID)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImSn, TImSn)
 	BODY(mt::TU32, dwPosition)
 	BODY(mt::TImUserStateListEx, TImUserStateListEx)
 	BODY(mt::TBOOL32, bLast)
 	/************************************/
 	BODY(mt::TU32, emErrorID)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImSn, TImSn)
 	BODY(mt::TU32, dwPosition)
	
	/**********************************************************************************
	* < 查询某组下的联系人列表信息(根据位置)请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImSn：							组sn号
	*		TU32：							位置（从0开始）
	* ----------------------------------------------------------
	* 其中TImSn的结构包含：
	* 	s8 m_achSn[MAXLEN_U64STRING+1];  	//序列号
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImQueryMemberInfoByGroupSnAndPosition_Req)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImSn, TImSn)
 	BODY(mt::TU32, dwPosition)
	
	/**********************************************************************************
	* < 查询某组下的联系人列表信息(根据位置)应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TImSn：							组sn号
	*		TU32：							位置（从0开始）
	*		TImMemberList：					用户列表（多个）
	*		TBOOL32：						是否到最末
	* ----------------------------------------------------------
	* 其中TImMemberList的结构包含：
	* 	u32 m_dwArraySize;					// 个数
    *	TImMemberInfo m_atArray;			// 用户信息（多个）
	* ----------------------------------------------------------	
	* 其中TImMemberInfo的结构包含：
	* 	s8 m_achMemberSn[MAXLEN_U64STRING+1];        // 成员序列号
	*	s8 m_achGroupSn[MAXLEN_U64STRING+1];		 // 成员所在组的组序号
    *	s8 m_achMemberNO[IM_MAX_ID_LEN];	         // 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];// 成员名称 
	*	EmMtMemberType m_emMemberType;			     // 成员类型
    *	u16 m_wBitRate;                              // 呼叫码率
	*	TMTWbParse_Keda_EntUser m_tWeiboInfo;        // 联系人微博信息
    *	BOOL  m_bNoQuery;                            // 是否不查Account
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImQueryMemberInfoByGroupSnAndPosition_Rsp)							
 	BODY(mt::TU32, emErrorID)								// 成功时填的信息
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImSn, TImSn)
 	BODY(mt::TU32, dwPosition)
 	BODY(mt::TImMemberList, TImMemberList)
 	BODY(mt::TBOOL32, bLast)
 	/************************************/						
 	BODY(mt::TU32, emErrorID)								// 失败时填的信息
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImSn, TImSn)
 	BODY(mt::TU32, dwPosition)
	
	/**********************************************************************************
	* < 告知对方自己的键盘输入状态请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImCharState：					聊天状态
	* ----------------------------------------------------------
	* 其中TImCharState的结构包含：
	* 	s8                 m_achPerrNO[IM_MAX_ID_LEN];                  // 对端的Im账号
    *	EmMtImTerminalType m_emImMtType;									// 终端类型
    *	EImCharState       m_eCharState;                                // 输入状态
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendCharState_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImCharState, TImCharState)
	
	/**********************************************************************************
	* < 告知对方自己的键盘输入状态应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TImCharState：					聊天状态
	* ----------------------------------------------------------
	* 其中TImCharState的结构包含：
	* 	s8                 m_achPerrNO[IM_MAX_ID_LEN];                  // 对端的Im账号
    *	EmMtImTerminalType m_emImMtType;									// 终端类型
    *	EImCharState       m_eCharState;                                // 输入状态
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendCharState_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImCharState, TImCharState)
	
	/**********************************************************************************
	* < 联系人键盘输入状态通知 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImCharState：					聊天状态
	* ----------------------------------------------------------
	* 其中TImCharState的结构包含：
	* 	s8                 m_achPerrNO[IM_MAX_ID_LEN];                  // 对端的Im账号
    *	EmMtImTerminalType m_emImMtType;									// 终端类型
    *	EImCharState       m_eCharState;                                // 输入状态
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImCharState_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImCharState, TImCharState)
	
	/**********************************************************************************
	* < 告知对方闪屏请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImSplash：						聊天状态
	* ----------------------------------------------------------
	* 其中TImCharState的结构包含：
	* 	s8                     m_achPeerNO[IM_MAX_ID_LEN];		       	// 对端的Im账号
    *	EmMtImTerminalType     m_emImMtType;								// 终端类型
    *	u32                    m_dwSplashType;                         	// 闪屏类型
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendSplash_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSplash, TImSplash)
	
	/**********************************************************************************
	* < 告知对方闪屏应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TImSplash：						聊天状态
	* ----------------------------------------------------------
	* 其中TImCharState的结构包含：
	* 	s8                     m_achPeerNO[IM_MAX_ID_LEN];		       	// 对端的Im账号
    *	EmMtImTerminalType     m_emImMtType;								// 终端类型
    *	u32                    m_dwSplashType;                         	// 闪屏类型
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendSplash_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSplash, TImSplash)
	
	/**********************************************************************************
	* < 闪屏通知 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImSplash：						聊天状态
	* ----------------------------------------------------------
	* 其中TImCharState的结构包含：
	* 	s8                     m_achPeerNO[IM_MAX_ID_LEN];		       	// 对端的Im账号
    *	EmMtImTerminalType     m_emImMtType;								// 终端类型
    *	u32                    m_dwSplashType;                         	// 闪屏类型
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImSendSplash_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImSplash, TImSplash)
	
	/**********************************************************************************
	* < 设置/获取自定义配置请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImCustomCfg：					用户配置信息
	* ----------------------------------------------------------
	* 其中TImCustomCfg的结构包含：
	* 	TImCustomCfgItem    m_atItems[IM_MAX_CONFIG_ITEMS_PER_BATCH];
    *	u32                 m_dwItemsCnt;                                   // 数组大小
    *	BOOL                m_bGet;                                         // 是获取还是设置
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImConfig_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImCustomCfg, TImCustomCfg)
	
	/**********************************************************************************
	* < 设置/获取自定义配置应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TImCustomCfg：					用户配置信息
	* ----------------------------------------------------------
	* 其中TImCustomCfg的结构包含：
	* 	TImCustomCfgItem    m_atItems[IM_MAX_CONFIG_ITEMS_PER_BATCH];
    *	u32                 m_dwItemsCnt;                                   // 数组大小
    *	BOOL                m_bGet;                                         // 是获取还是设置
	* ----------------------------------------------------------	
	* 其中TImCustomCfgItem的结构包含：
	* 	s8        m_achKey[IM_MAX_CONFIG_KEY_LEN];						// 键值
    *	s8        m_achValue[IM_MAX_CONFIG_VALUE_LEN];					// 对应值
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImConfig_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImCustomCfg, TImCustomCfg)
	
	/**********************************************************************************
	* < 自定义配置数据准备好通知 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	* ----------------------------------------------------------
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImConfigDataReady_Ntf)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 屏蔽讨论组请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
			TImScreenChatroom：				设置是否屏蔽讨论组
	* ----------------------------------------------------------
	* 其中TImScreenChatroom的结构包含：
	* 	BOOL  m_bScreen;                                          // 是否屏蔽( TRUE, 屏蔽； FALSE, 取消屏蔽 )
    *	s8    m_achRoomId[IM_MAX_CHATROOM_ID_LEN];                // 屏蔽的讨论组的room id(非session id)
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImScreenChatrom_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImScreenChatroom, TImScreenChatroom)
	
	/**********************************************************************************
	* < 屏蔽讨论组应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
			TImScreenChatroom：				设置是否屏蔽讨论组
	* ----------------------------------------------------------
	* 其中TImScreenChatroom的结构包含：
	* 	BOOL  m_bScreen;                                          // 是否屏蔽( TRUE, 屏蔽； FALSE, 取消屏蔽 )
    *	s8    m_achRoomId[IM_MAX_CHATROOM_ID_LEN];                // 屏蔽的讨论组的room id(非session id)
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImScreenChatrom_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImScreenChatroom, TImScreenChatroom)
	
	/**********************************************************************************
	* < 获取所有屏蔽讨论组请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImGetScreenedChatroms_Req)
 	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 获取所有屏蔽讨论组应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
			TImScreenChatroom：				设置是否屏蔽讨论组
	* ----------------------------------------------------------
	* 其中TImScreenChatroom的结构包含：
	* 	BOOL  m_bScreen;                                          // 是否屏蔽( TRUE, 屏蔽； FALSE, 取消屏蔽 )
    *	s8    m_achRoomId[IM_MAX_CHATROOM_ID_LEN];                // 屏蔽的讨论组的room id(非session id)
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImGetScreenedChatroms_Rsp)							
 	BODY(mt::TU32, emErrorID)									// 成功时填写
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImScreenedChatrooms, TImScreenedChatrooms)
 	/***********************************/							
 	BODY(mt::TU32, emErrorID)									// 失败时填写
 	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 屏蔽讨论组(无流量)请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImScreenChatroomR：			设置是否屏蔽讨论组
	* ----------------------------------------------------------
	* 其中TImScreenChatroomR的结构包含：
	* 	BOOL  m_bScreen;                    // 是否屏蔽( TRUE, 屏蔽； FALSE, 取消屏蔽 )
    *	s8    m_aachRoomIds;                // 屏蔽的讨论组的room ids(非session ids)
    *	u32   m_dwCount;					// 个数
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImScreenChatromR_Req)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImScreenChatroomR, TImScreenChatroomR)
	
	/**********************************************************************************
	* < 屏蔽讨论组(无流量)应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TImScreenChatroomR：			设置是否屏蔽讨论组
	* ----------------------------------------------------------
	* 其中TImScreenChatroomR的结构包含：
	* 	BOOL  m_bScreen;                    // 是否屏蔽( TRUE, 屏蔽； FALSE, 取消屏蔽 )
    *	s8    m_aachRoomIds;                // 屏蔽的讨论组的room ids(非session ids)
    *	u32   m_dwCount;					// 个数
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImScreenChatromR_Rsp)					
	BODY(mt::TU32, emErrorID)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TImScreenChatroomR, TImScreenChatroomR)
	
	/**********************************************************************************
	* < 获取讨论组所有不在线成员请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TU32：							多人聊天ID
	*		TRoomId：						聊天室ID
	* ----------------------------------------------------------
	* 其中TRoomId的结构包含：
	* 	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];		// 聊天室ID
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMulitChatGetRosters_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, ChatID)
	BODY(mt::TRoomId, TRoomId)
	
	/**********************************************************************************
	* < 获取讨论组所有不在线成员应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TU32：							多人聊天ID
	*		TRoomId：						聊天室ID
	* ----------------------------------------------------------
	* 其中TRoomId的结构包含：
	* 	s8 m_achRoomId[IM_MAX_CHATROOM_ID_LEN];		// 聊天室ID
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImMulitChatGetRosters_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TU32, ChatID)
	BODY(mt::TRoomId, TRoomId)	
	
	/**********************************************************************************
	* < 获取某人参加的视频会议id请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImNO：							好友ID
	* ----------------------------------------------------------
	* 其中TImNO的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];                 // 邮箱id
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetFriendConference_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNO, TImNO)
	
	/**********************************************************************************
	* < 获取某人参加的视频会议id应答 >
	* ----------------------------------------------------------
	* 参数：TBOOL32：						是否成功
	*		TU32：							错误码
	*		TU32：							当前登录句柄
	*		TFriendConferenceInfo：			会议信息
	*		TImNO：							好友ID
	* ----------------------------------------------------------
	* 其中TFriendConferenceInfo的结构包含：
	* 	s8                              m_achPeerId[IM_MAX_ID_LEN]; 
    *	EmMtImTerminalType              m_ePeerType;                                 // 好友终端类型
    *	s8                              m_achConfE164[MT_MAX_E164NUM_LEN+1];         // 会议E164号
    *	s8                              m_achRoomId[IM_MAX_CHATROOM_ID_LEN];         // 会议对应的Im讨论组id
    *	s8                              m_achChatName[MAXLEN_MULTI_CHAT_NAME+1];     // 会议名称
	* ----------------------------------------------------------	
	* 其中TImNO的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];                 // 邮箱id
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImGetFriendConference_Rsp)								
	BODY(mt::TU32, emErrorID)										// 成功时填写
	BODY(mt::TU32, HANDLE)
	BODY(mt::TFriendConferenceInfo, TFriendConferenceInfo)
	/*************************************/							
	BODY(mt::TU32, emErrorID)										// 失败时填写
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNO, TImNO)
	
	/**********************************************************************************
	* < 多人聊天发送消息(内部使用) >
	* ----------------------------------------------------------
	* 参数：无
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImInnerGroupChat_Ntf)
	BODY(mt::TU32, RoomHandler)									
	BODY(mt::TU32, ContextId)
	BODY(mt::TBOOL32, bSuccessed)
	BODY(mt::TString, RoomId)
	BODY(mt::TString, ServiceId)
	
	/**********************************************************************************
	* < p2p聊天发送消息(内部使用) >
	* ----------------------------------------------------------
	* 参数：无
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImInnerChat_Ntf)
	BODY(mt::TU32, dwContextId)									
	BODY(mt::TBOOL, bSuccessful)
	
	/**********************************************************************************
	* < 临时关注某联系人请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TImNO：							好友ID
	* ----------------------------------------------------------
	* 其中TImNO的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];                 // 邮箱id
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImTempSubscribe_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNO, TImNO)
	
	/**********************************************************************************
	* < 临时关注某联系人应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TImNO：							好友ID
	* ----------------------------------------------------------
	* 其中TImNO的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];                 // 邮箱id
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImTempSubscribe_Rsp)							
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImNO, TImNO)
	
	/**********************************************************************************
	* < 批量添加联系人到一个组请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TBatchAddContacts：				批量添加联系人到一个组
	* ----------------------------------------------------------
	* 其中TBatchAddContacts的结构包含：
	* 	s8 m_achNO[IM_MAX_ID_LEN];                 // 邮箱id
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImBatchAddContacts_Req)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TBatchAddContacts, TBatchAddContacts)
	
	/**********************************************************************************
	* < 批量添加联系人到一个组应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TBatchAddContacts：				批量添加联系人到一个组
	* ----------------------------------------------------------
	* 其中TBatchAddContacts的结构包含：
	* 	TBatchAddContactsItem    m_atBatchContacts[IM_MAX_BATCH_USERS_COUNT];       // 批量添加的联系人
    *	u32                      m_dwCount;                                         // 批量联系人的个数
    *	s8                       m_achDestGroupSn[MAXLEN_U64STRING+1];              // 添加到哪个组
	* ----------------------------------------------------------	
	* 其中TBatchAddContactsItem的结构包含：
	* 	s8 m_achMemberNO[IM_MAX_ID_LEN];	           // 成员的Xmpp Jid号(用户名@域名)
    *	s8 m_achMarkName[MT_MAX_DEVICE_NAME_LEN + 1];  // 成员名称 
    *	EmMtMemberType m_emMemberType;			       // 成员类型
    *	u16 m_wBitRate;                                // 呼叫码率
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImBatchAddContacts_Rsp)
							
 	BODY(mt::TU32, emErrorID)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TBatchAddContacts, TBatchAddContacts)
 	
	/**********************************************************************************
	* < 批量删除联系人请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TBatchDelContacts：				批量添加联系人到一个组
	* ----------------------------------------------------------
	* 其中TBatchDelContacts的结构包含：
	* 	TImSn                   m_atBatchContacts[IM_MAX_BATCH_USERS_COUNT];   // 批量删除的联系人
    *	u32                     m_dwCount;                                     // 批量联系人的个数
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImBatchDelContacts_Req)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TBatchDelContacts, TBatchDelContacts)
	
	/**********************************************************************************
	* < 批量删除联系人应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TBatchDelContacts：				批量添加联系人到一个组
	* ----------------------------------------------------------
	* 其中TBatchDelContacts的结构包含：
	* 	TImSn                   m_atBatchContacts[IM_MAX_BATCH_USERS_COUNT];   // 批量删除的联系人
    *	u32                     m_dwCount;                                     // 批量联系人的个数
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImBatchDelContacts_Rsp)									
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TBatchDelContacts, TBatchDelContacts)
	
	/**********************************************************************************
	* < 批量移动联系人到一个组请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							当前登录句柄
	*		TBatchMoveContacts：				批量添加联系人到一个组
	* ----------------------------------------------------------
	* 其中TBatchMoveContacts的结构包含：
	* 	TImSn                   m_atBatchContacts[IM_MAX_BATCH_USERS_COUNT];   // 批量移动的联系人
    *	u32                     m_dwCount;                                     // 批量联系人的个数
    *	s8                      m_achDestGroupSn[MAXLEN_U64STRING+1];          // 移动到哪个组
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImBatchMoveContacts_Req)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TBatchMoveContacts, TBatchMoveContacts)
	
	/**********************************************************************************
	* < 批量移动联系人到一个组应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							当前登录句柄
	*		TBatchMoveContacts：				批量添加联系人到一个组
	* ----------------------------------------------------------
	* 其中TBatchMoveContacts的结构包含：
	* 	TImSn                   m_atBatchContacts[IM_MAX_BATCH_USERS_COUNT];   // 批量移动的联系人
    *	u32                     m_dwCount;                                     // 批量联系人的个数
    *	s8                      m_achDestGroupSn[MAXLEN_U64STRING+1];          // 移动到哪个组
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */
 	MESSAGE(Ev_MT_ImBatchMoveContacts_Rsp)								
 	BODY(mt::TU32, emErrorID)
 	BODY(mt::TU32, HANDLE)
 	BODY(mt::TBatchMoveContacts, TBatchMoveContacts)
	
	/**********************************************************************************
	* < 获取服务器时间请求 >
	* ----------------------------------------------------------
	* 参数：TU32：							多人聊天ID
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImGetServerTime_Req)
	BODY(mt::TU32, HANDLE)

	/**********************************************************************************
	* < 获取服务器时间应答 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	*		TU32：							时间
	*		TU32：							多人聊天ID
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImGetServerTime_Rsp)
	BODY(mt::TU32, emErrorID)
	BODY(mt::TU32, time)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 查询用户信息通知 >
	* ----------------------------------------------------------
	* 参数：TU32：							错误码
	* ----------------------------------------------------------	
	* 发送方向：mtrest -> mtim
	* ******************************************************************************** */
	MESSAGE(Ev_MT_ImQueryAccountInfo_Rsp)
	BODY(mt::TRestErrorInfo, emErrorID)							// 成功时填写
	BODY(mt::TMTWbParse_Keda_EntUser, tMTWbParse_Keda_EntUser)
	/*****************************************/
	BODY(mt::TRestErrorInfo, emErrorID)							// 失败时填写
	BODY(mt::TMTAccountManagerSystem, tMTAccountManagerSystem)
	
	
	/**********************************************************************************
	* < 断开所有服务器 >
	* ----------------------------------------------------------
	* 参数：TU32：							句柄
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImUserDisconnect_Ntf)
	BODY(mt::TU32, HANDLE)
	
	/**********************************************************************************
	* < 自定义配置修改通知 >
	* ----------------------------------------------------------
	* 参数：TU32：							句柄
	*       TImCustomCfgItem：			    配置结构
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImConfigItemChange_Ntf)
	BODY(mt::TU32, HANDLE)
	BODY(mt::TImCustomCfgItem, TImCustomCfgItem)
	
	/**********************************************************************************
	* < 获取组织架构成员状态信息 >
	* ----------------------------------------------------------
	* 参数：TU32：							句柄
	*	    TString：						企业名
	* ----------------------------------------------------------	
	* 发送方向：mtsdk -> mtim
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImGetOrganizationState_Req)
	BODY(mt::TU32, dwApp)
	BODY(mt::TString, OrganizationName)
	
	/**********************************************************************************
	* < 获取组织架构成员状态信息响应 >
	* ----------------------------------------------------------
	* 参数：TU32:							错误码
	*		TU32：							句柄
	*	    TString：						企业名
	* ----------------------------------------------------------	
	* 发送方向：mtim -> mtsdk
	* ******************************************************************************** */	
	MESSAGE(Ev_MT_ImGetOrganizationState_Rsp)
	BODY(mt::TU32, Error)
	BODY(mt::TU32, dwApp)
	BODY(mt::TString, OrganizationName)

	/***********************************************************************************
	*    获取固定讨论组请求
	*    参数:  TU32:                        句柄
	*    发送方向: mtservice -> mtim
	************************************************************************************/
	MESSAGE(Ev_MT_ImGetHoldPersistentRoom_Req)
	BODY(mt::TU32, HANDLE)

	/**********************************************************************************
	*    获取组织架构成员状态信息响应
	*    参数: TU32:                          错误码
	*          TU32:                          账号标识
	*    发送方向: mtim -> mtservice
	**********************************************************************************/
	MESSAGE(Ev_MT_ImGetHoldPersistentRoom_Rsp)
	BODY(mt::TU32, error)
	BODY(mt::TU32, HANDLE)

#if !defined(_MESSAGE_HELP_)
     EV_END(MTIM) = EVSEG_IM_END
};
#endif

#define Is_MtIm_Msg(m) ((m) >= EV_BGN(MTIM) && (m) <= EV_END(MTIM))

#endif  // _MTIMMSG_H_