// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structdcs.proto

#ifndef PROTOBUF_structdcs_2eproto__INCLUDED
#define PROTOBUF_structdcs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
// @@protoc_insertion_point(includes)

namespace mt {

// Internal implementation detail -- do not call these.
void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
void protobuf_AssignDesc_structdcs_2eproto();
void protobuf_ShutdownFile_structdcs_2eproto();

class TMTDCSResult;
class TDCSConfUserInfo;
class TDCSCreateConf;
class TDCSConfAddr;
class TDCSCreateConfResult;
class TDCSSetConfInfoResult;
class TDCSBoardResult;
class TDCSOperator;
class TDCSInviteUsr;
class TDCSJoinConfResult;
class TDCSMemberInfo;
class TDCSConfInfo;
class TDCSSetUserRole;
class TDCSGetUserList;
class TDCSBoardInfo;
class TDCSNewWhiteBoard;
class TDCSGetAllBoard;
class TDCSSwitchReq;
class TDCSUserInfo;
class TDCSUserInfos;
class TDCSUserRole;
class TDCSWbPoint;
class TDCSWbEntity;
class TDCSWbLine;
class TDCSWbCircle;
class TDCSWbRectangle;
class TDCSWbPencil;
class TDCSWbColorPen;
class TDCSWbImage;
class TDCSWbLineOperInfo;
class TDCSWbCircleOperInfo;
class TDCSWbRectangleOperInfo;
class TDCSWbPencilOperInfo;
class TDCSWbColorPenOperInfo;
class TDCSWbImageOperInfo;
class TDCSWbTabPageIdInfo;
class TDCSWbRemovePageIdInfo;
class TDCSWbAddSubPageInfo;
class TDCSWbSwitchPageInfo;
class TDCSWbEraseOperInfo;
class TDCSWbZoomInfo;
class TDCSOperReq;
class TDCSRegInfo;
class TDCSScrollScreenInfo;
class TDCSOperContent;
class TDCSImageUrl;
class TDCSConnectResult;
class TDCSRejectJoinConf;
class TDCSFileLoadResult;
class TDCSFileInfo;
class TDCSWbDisPlayInfo;
class TDCSWbReginEraseOperInfo;
class TDCSWbInsertPicOperInfo;
class TDCSWbGraphsInfo;
class TDCSWbPitchPicOperInfo;
class TDCSWbDelPicOperInfo;

// ===================================================================

class MTMSG_API TMTDCSResult : public ::google::protobuf::Message {
 public:
  TMTDCSResult();
  virtual ~TMTDCSResult();

  TMTDCSResult(const TMTDCSResult& from);

  inline TMTDCSResult& operator=(const TMTDCSResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMTDCSResult& default_instance();

  void Swap(TMTDCSResult* other);

  // implements Message ----------------------------------------------

  TMTDCSResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMTDCSResult& from);
  void MergeFrom(const TMTDCSResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint32 errorcode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional string confe164 = 3;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 3;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // @@protoc_insertion_point(class_scope:mt.TMTDCSResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_confe164();
  inline void clear_has_confe164();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool success_;
  ::google::protobuf::uint32 errorcode_;
  ::std::string* confe164_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TMTDCSResult* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSConfUserInfo : public ::google::protobuf::Message {
 public:
  TDCSConfUserInfo();
  virtual ~TDCSConfUserInfo();

  TDCSConfUserInfo(const TDCSConfUserInfo& from);

  inline TDCSConfUserInfo& operator=(const TDCSConfUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSConfUserInfo& default_instance();

  void Swap(TDCSConfUserInfo* other);

  // implements Message ----------------------------------------------

  TDCSConfUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSConfUserInfo& from);
  void MergeFrom(const TDCSConfUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string e164 = 1;
  inline bool has_e164() const;
  inline void clear_e164();
  static const int kE164FieldNumber = 1;
  inline const ::std::string& e164() const;
  inline void set_e164(const ::std::string& value);
  inline void set_e164(const char* value);
  inline void set_e164(const char* value, size_t size);
  inline ::std::string* mutable_e164();
  inline ::std::string* release_e164();
  inline void set_allocated_e164(::std::string* e164);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .mt.EmMtDcsType mttype = 3;
  inline bool has_mttype() const;
  inline void clear_mttype();
  static const int kMttypeFieldNumber = 3;
  inline ::mt::EmMtDcsType mttype() const;
  inline void set_mttype(::mt::EmMtDcsType value);

  // optional bool online = 4;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 4;
  inline bool online() const;
  inline void set_online(bool value);

  // optional bool isoper = 5;
  inline bool has_isoper() const;
  inline void clear_isoper();
  static const int kIsoperFieldNumber = 5;
  inline bool isoper() const;
  inline void set_isoper(bool value);

  // optional bool isconfadmin = 6;
  inline bool has_isconfadmin() const;
  inline void clear_isconfadmin();
  static const int kIsconfadminFieldNumber = 6;
  inline bool isconfadmin() const;
  inline void set_isconfadmin(bool value);

  // @@protoc_insertion_point(class_scope:mt.TDCSConfUserInfo)
 private:
  inline void set_has_e164();
  inline void clear_has_e164();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mttype();
  inline void clear_has_mttype();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_isoper();
  inline void clear_has_isoper();
  inline void set_has_isconfadmin();
  inline void clear_has_isconfadmin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* e164_;
  ::std::string* name_;
  int mttype_;
  bool online_;
  bool isoper_;
  bool isconfadmin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSConfUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSCreateConf : public ::google::protobuf::Message {
 public:
  TDCSCreateConf();
  virtual ~TDCSCreateConf();

  TDCSCreateConf(const TDCSCreateConf& from);

  inline TDCSCreateConf& operator=(const TDCSCreateConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSCreateConf& default_instance();

  void Swap(TDCSCreateConf* other);

  // implements Message ----------------------------------------------

  TDCSCreateConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSCreateConf& from);
  void MergeFrom(const TDCSCreateConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.EmMtDcsConfType conftype = 1;
  inline bool has_conftype() const;
  inline void clear_conftype();
  static const int kConftypeFieldNumber = 1;
  inline ::mt::EmMtDcsConfType conftype() const;
  inline void set_conftype(::mt::EmMtDcsConfType value);

  // optional string confe164 = 2;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 2;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string confname = 3;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 3;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // optional .mt.EmMtDcsConfMode confmode = 4;
  inline bool has_confmode() const;
  inline void clear_confmode();
  static const int kConfmodeFieldNumber = 4;
  inline ::mt::EmMtDcsConfMode confmode() const;
  inline void set_confmode(::mt::EmMtDcsConfMode value);

  // repeated .mt.TDCSConfUserInfo userlist = 5;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserlistFieldNumber = 5;
  inline const ::mt::TDCSConfUserInfo& userlist(int index) const;
  inline ::mt::TDCSConfUserInfo* mutable_userlist(int index);
  inline ::mt::TDCSConfUserInfo* add_userlist();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
      userlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
      mutable_userlist();

  // optional string confadmine164 = 6;
  inline bool has_confadmine164() const;
  inline void clear_confadmine164();
  static const int kConfadmine164FieldNumber = 6;
  inline const ::std::string& confadmine164() const;
  inline void set_confadmine164(const ::std::string& value);
  inline void set_confadmine164(const char* value);
  inline void set_confadmine164(const char* value, size_t size);
  inline ::std::string* mutable_confadmine164();
  inline ::std::string* release_confadmine164();
  inline void set_allocated_confadmine164(::std::string* confadmine164);

  // optional .mt.EmMtDcsType adminmttype = 7;
  inline bool has_adminmttype() const;
  inline void clear_adminmttype();
  static const int kAdminmttypeFieldNumber = 7;
  inline ::mt::EmMtDcsType adminmttype() const;
  inline void set_adminmttype(::mt::EmMtDcsType value);

  // @@protoc_insertion_point(class_scope:mt.TDCSCreateConf)
 private:
  inline void set_has_conftype();
  inline void clear_has_conftype();
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_confmode();
  inline void clear_has_confmode();
  inline void set_has_confadmine164();
  inline void clear_has_confadmine164();
  inline void set_has_adminmttype();
  inline void clear_has_adminmttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  int conftype_;
  int confmode_;
  ::std::string* confname_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo > userlist_;
  ::std::string* confadmine164_;
  int adminmttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSCreateConf* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSConfAddr : public ::google::protobuf::Message {
 public:
  TDCSConfAddr();
  virtual ~TDCSConfAddr();

  TDCSConfAddr(const TDCSConfAddr& from);

  inline TDCSConfAddr& operator=(const TDCSConfAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSConfAddr& default_instance();

  void Swap(TDCSConfAddr* other);

  // implements Message ----------------------------------------------

  TDCSConfAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSConfAddr& from);
  void MergeFrom(const TDCSConfAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string domain = 2;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 2;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSConfAddr)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* domain_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSConfAddr* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSCreateConfResult : public ::google::protobuf::Message {
 public:
  TDCSCreateConfResult();
  virtual ~TDCSCreateConfResult();

  TDCSCreateConfResult(const TDCSCreateConfResult& from);

  inline TDCSCreateConfResult& operator=(const TDCSCreateConfResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSCreateConfResult& default_instance();

  void Swap(TDCSCreateConfResult* other);

  // implements Message ----------------------------------------------

  TDCSCreateConfResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSCreateConfResult& from);
  void MergeFrom(const TDCSCreateConfResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string confname = 2;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 2;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // optional bool success = 3;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint32 errorcode = 4;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 4;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional .mt.EmMtDcsConfMode confmode = 5;
  inline bool has_confmode() const;
  inline void clear_confmode();
  static const int kConfmodeFieldNumber = 5;
  inline ::mt::EmMtDcsConfMode confmode() const;
  inline void set_confmode(::mt::EmMtDcsConfMode value);

  // optional .mt.EmMtDcsConfType conftype = 6;
  inline bool has_conftype() const;
  inline void clear_conftype();
  static const int kConftypeFieldNumber = 6;
  inline ::mt::EmMtDcsConfType conftype() const;
  inline void set_conftype(::mt::EmMtDcsConfType value);

  // optional .mt.TDCSConfAddr confaddr = 7;
  inline bool has_confaddr() const;
  inline void clear_confaddr();
  static const int kConfaddrFieldNumber = 7;
  inline const ::mt::TDCSConfAddr& confaddr() const;
  inline ::mt::TDCSConfAddr* mutable_confaddr();
  inline ::mt::TDCSConfAddr* release_confaddr();
  inline void set_allocated_confaddr(::mt::TDCSConfAddr* confaddr);

  // optional bool bcreator = 8;
  inline bool has_bcreator() const;
  inline void clear_bcreator();
  static const int kBcreatorFieldNumber = 8;
  inline bool bcreator() const;
  inline void set_bcreator(bool value);

  // @@protoc_insertion_point(class_scope:mt.TDCSCreateConfResult)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_confmode();
  inline void clear_has_confmode();
  inline void set_has_conftype();
  inline void clear_has_conftype();
  inline void set_has_confaddr();
  inline void clear_has_confaddr();
  inline void set_has_bcreator();
  inline void clear_has_bcreator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::std::string* confname_;
  ::google::protobuf::uint32 errorcode_;
  int confmode_;
  bool success_;
  bool bcreator_;
  int conftype_;
  ::mt::TDCSConfAddr* confaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSCreateConfResult* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSSetConfInfoResult : public ::google::protobuf::Message {
 public:
  TDCSSetConfInfoResult();
  virtual ~TDCSSetConfInfoResult();

  TDCSSetConfInfoResult(const TDCSSetConfInfoResult& from);

  inline TDCSSetConfInfoResult& operator=(const TDCSSetConfInfoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSSetConfInfoResult& default_instance();

  void Swap(TDCSSetConfInfoResult* other);

  // implements Message ----------------------------------------------

  TDCSSetConfInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSSetConfInfoResult& from);
  void MergeFrom(const TDCSSetConfInfoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint32 errorcode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional string confe164 = 3;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 3;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string confname = 4;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 4;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // optional .mt.EmMtDcsConfMode confmode = 5;
  inline bool has_confmode() const;
  inline void clear_confmode();
  static const int kConfmodeFieldNumber = 5;
  inline ::mt::EmMtDcsConfMode confmode() const;
  inline void set_confmode(::mt::EmMtDcsConfMode value);

  // optional .mt.EmMtDcsConfType conftype = 6;
  inline bool has_conftype() const;
  inline void clear_conftype();
  static const int kConftypeFieldNumber = 6;
  inline ::mt::EmMtDcsConfType conftype() const;
  inline void set_conftype(::mt::EmMtDcsConfType value);

  // @@protoc_insertion_point(class_scope:mt.TDCSSetConfInfoResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_confmode();
  inline void clear_has_confmode();
  inline void set_has_conftype();
  inline void clear_has_conftype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool success_;
  ::google::protobuf::uint32 errorcode_;
  ::std::string* confe164_;
  ::std::string* confname_;
  int confmode_;
  int conftype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSSetConfInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSBoardResult : public ::google::protobuf::Message {
 public:
  TDCSBoardResult();
  virtual ~TDCSBoardResult();

  TDCSBoardResult(const TDCSBoardResult& from);

  inline TDCSBoardResult& operator=(const TDCSBoardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSBoardResult& default_instance();

  void Swap(TDCSBoardResult* other);

  // implements Message ----------------------------------------------

  TDCSBoardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSBoardResult& from);
  void MergeFrom(const TDCSBoardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint32 errorcode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional string confe164 = 3;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 3;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string tabid = 4;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 4;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 pageid = 5;
  inline bool has_pageid() const;
  inline void clear_pageid();
  static const int kPageidFieldNumber = 5;
  inline ::google::protobuf::uint32 pageid() const;
  inline void set_pageid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSBoardResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_pageid();
  inline void clear_has_pageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool success_;
  ::google::protobuf::uint32 errorcode_;
  ::std::string* confe164_;
  ::std::string* tabid_;
  ::google::protobuf::uint32 pageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSBoardResult* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSOperator : public ::google::protobuf::Message {
 public:
  TDCSOperator();
  virtual ~TDCSOperator();

  TDCSOperator(const TDCSOperator& from);

  inline TDCSOperator& operator=(const TDCSOperator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSOperator& default_instance();

  void Swap(TDCSOperator* other);

  // implements Message ----------------------------------------------

  TDCSOperator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSOperator& from);
  void MergeFrom(const TDCSOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // repeated .mt.TDCSConfUserInfo operlist = 2;
  inline int operlist_size() const;
  inline void clear_operlist();
  static const int kOperlistFieldNumber = 2;
  inline const ::mt::TDCSConfUserInfo& operlist(int index) const;
  inline ::mt::TDCSConfUserInfo* mutable_operlist(int index);
  inline ::mt::TDCSConfUserInfo* add_operlist();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
      operlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
      mutable_operlist();

  // @@protoc_insertion_point(class_scope:mt.TDCSOperator)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo > operlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSOperator* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSInviteUsr : public ::google::protobuf::Message {
 public:
  TDCSInviteUsr();
  virtual ~TDCSInviteUsr();

  TDCSInviteUsr(const TDCSInviteUsr& from);

  inline TDCSInviteUsr& operator=(const TDCSInviteUsr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSInviteUsr& default_instance();

  void Swap(TDCSInviteUsr* other);

  // implements Message ----------------------------------------------

  TDCSInviteUsr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSInviteUsr& from);
  void MergeFrom(const TDCSInviteUsr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional .mt.TDCSConfAddr confaddr = 3;
  inline bool has_confaddr() const;
  inline void clear_confaddr();
  static const int kConfaddrFieldNumber = 3;
  inline const ::mt::TDCSConfAddr& confaddr() const;
  inline ::mt::TDCSConfAddr* mutable_confaddr();
  inline ::mt::TDCSConfAddr* release_confaddr();
  inline void set_allocated_confaddr(::mt::TDCSConfAddr* confaddr);

  // @@protoc_insertion_point(class_scope:mt.TDCSInviteUsr)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_confaddr();
  inline void clear_has_confaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::mt::TDCSConfAddr* confaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSInviteUsr* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSJoinConfResult : public ::google::protobuf::Message {
 public:
  TDCSJoinConfResult();
  virtual ~TDCSJoinConfResult();

  TDCSJoinConfResult(const TDCSJoinConfResult& from);

  inline TDCSJoinConfResult& operator=(const TDCSJoinConfResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSJoinConfResult& default_instance();

  void Swap(TDCSJoinConfResult* other);

  // implements Message ----------------------------------------------

  TDCSJoinConfResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSJoinConfResult& from);
  void MergeFrom(const TDCSJoinConfResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string confname = 2;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 2;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // optional .mt.EmMtDcsConfType conftype = 3;
  inline bool has_conftype() const;
  inline void clear_conftype();
  static const int kConftypeFieldNumber = 3;
  inline ::mt::EmMtDcsConfType conftype() const;
  inline void set_conftype(::mt::EmMtDcsConfType value);

  // optional .mt.EmMtDcsConfMode confmode = 4;
  inline bool has_confmode() const;
  inline void clear_confmode();
  static const int kConfmodeFieldNumber = 4;
  inline ::mt::EmMtDcsConfMode confmode() const;
  inline void set_confmode(::mt::EmMtDcsConfMode value);

  // optional bool success = 5;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 5;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint32 errorcode = 6;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 6;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional bool isoper = 7;
  inline bool has_isoper() const;
  inline void clear_isoper();
  static const int kIsoperFieldNumber = 7;
  inline bool isoper() const;
  inline void set_isoper(bool value);

  // optional bool isconfadmin = 8;
  inline bool has_isconfadmin() const;
  inline void clear_isconfadmin();
  static const int kIsconfadminFieldNumber = 8;
  inline bool isconfadmin() const;
  inline void set_isconfadmin(bool value);

  // @@protoc_insertion_point(class_scope:mt.TDCSJoinConfResult)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_conftype();
  inline void clear_has_conftype();
  inline void set_has_confmode();
  inline void clear_has_confmode();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_isoper();
  inline void clear_has_isoper();
  inline void set_has_isconfadmin();
  inline void clear_has_isconfadmin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::std::string* confname_;
  int conftype_;
  int confmode_;
  ::google::protobuf::uint32 errorcode_;
  bool success_;
  bool isoper_;
  bool isconfadmin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSJoinConfResult* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSMemberInfo : public ::google::protobuf::Message {
 public:
  TDCSMemberInfo();
  virtual ~TDCSMemberInfo();

  TDCSMemberInfo(const TDCSMemberInfo& from);

  inline TDCSMemberInfo& operator=(const TDCSMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSMemberInfo& default_instance();

  void Swap(TDCSMemberInfo* other);

  // implements Message ----------------------------------------------

  TDCSMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSMemberInfo& from);
  void MergeFrom(const TDCSMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // repeated .mt.TDCSConfUserInfo userlist = 2;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserlistFieldNumber = 2;
  inline const ::mt::TDCSConfUserInfo& userlist(int index) const;
  inline ::mt::TDCSConfUserInfo* mutable_userlist(int index);
  inline ::mt::TDCSConfUserInfo* add_userlist();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
      userlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
      mutable_userlist();

  // @@protoc_insertion_point(class_scope:mt.TDCSMemberInfo)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo > userlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSConfInfo : public ::google::protobuf::Message {
 public:
  TDCSConfInfo();
  virtual ~TDCSConfInfo();

  TDCSConfInfo(const TDCSConfInfo& from);

  inline TDCSConfInfo& operator=(const TDCSConfInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSConfInfo& default_instance();

  void Swap(TDCSConfInfo* other);

  // implements Message ----------------------------------------------

  TDCSConfInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSConfInfo& from);
  void MergeFrom(const TDCSConfInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string confname = 2;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 2;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // optional .mt.EmMtDcsConfMode confmode = 3;
  inline bool has_confmode() const;
  inline void clear_confmode();
  static const int kConfmodeFieldNumber = 3;
  inline ::mt::EmMtDcsConfMode confmode() const;
  inline void set_confmode(::mt::EmMtDcsConfMode value);

  // optional .mt.EmMtDcsConfType conftype = 4;
  inline bool has_conftype() const;
  inline void clear_conftype();
  static const int kConftypeFieldNumber = 4;
  inline ::mt::EmMtDcsConfType conftype() const;
  inline void set_conftype(::mt::EmMtDcsConfType value);

  // @@protoc_insertion_point(class_scope:mt.TDCSConfInfo)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_confmode();
  inline void clear_has_confmode();
  inline void set_has_conftype();
  inline void clear_has_conftype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::std::string* confname_;
  int confmode_;
  int conftype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSConfInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSSetUserRole : public ::google::protobuf::Message {
 public:
  TDCSSetUserRole();
  virtual ~TDCSSetUserRole();

  TDCSSetUserRole(const TDCSSetUserRole& from);

  inline TDCSSetUserRole& operator=(const TDCSSetUserRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSSetUserRole& default_instance();

  void Swap(TDCSSetUserRole* other);

  // implements Message ----------------------------------------------

  TDCSSetUserRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSSetUserRole& from);
  void MergeFrom(const TDCSSetUserRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // repeated .mt.TDCSConfUserInfo userlist = 2;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserlistFieldNumber = 2;
  inline const ::mt::TDCSConfUserInfo& userlist(int index) const;
  inline ::mt::TDCSConfUserInfo* mutable_userlist(int index);
  inline ::mt::TDCSConfUserInfo* add_userlist();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
      userlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
      mutable_userlist();

  // @@protoc_insertion_point(class_scope:mt.TDCSSetUserRole)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo > userlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSSetUserRole* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSGetUserList : public ::google::protobuf::Message {
 public:
  TDCSGetUserList();
  virtual ~TDCSGetUserList();

  TDCSGetUserList(const TDCSGetUserList& from);

  inline TDCSGetUserList& operator=(const TDCSGetUserList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSGetUserList& default_instance();

  void Swap(TDCSGetUserList* other);

  // implements Message ----------------------------------------------

  TDCSGetUserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSGetUserList& from);
  void MergeFrom(const TDCSGetUserList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mt.TDCSConfUserInfo userlist = 1;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserlistFieldNumber = 1;
  inline const ::mt::TDCSConfUserInfo& userlist(int index) const;
  inline ::mt::TDCSConfUserInfo* mutable_userlist(int index);
  inline ::mt::TDCSConfUserInfo* add_userlist();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
      userlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
      mutable_userlist();

  // @@protoc_insertion_point(class_scope:mt.TDCSGetUserList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo > userlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSGetUserList* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSBoardInfo : public ::google::protobuf::Message {
 public:
  TDCSBoardInfo();
  virtual ~TDCSBoardInfo();

  TDCSBoardInfo(const TDCSBoardInfo& from);

  inline TDCSBoardInfo& operator=(const TDCSBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSBoardInfo& default_instance();

  void Swap(TDCSBoardInfo* other);

  // implements Message ----------------------------------------------

  TDCSBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSBoardInfo& from);
  void MergeFrom(const TDCSBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string wbname = 1;
  inline bool has_wbname() const;
  inline void clear_wbname();
  static const int kWbnameFieldNumber = 1;
  inline const ::std::string& wbname() const;
  inline void set_wbname(const ::std::string& value);
  inline void set_wbname(const char* value);
  inline void set_wbname(const char* value, size_t size);
  inline ::std::string* mutable_wbname();
  inline ::std::string* release_wbname();
  inline void set_allocated_wbname(::std::string* wbname);

  // optional .mt.EmMtDcsWbMode wbmode = 2;
  inline bool has_wbmode() const;
  inline void clear_wbmode();
  static const int kWbmodeFieldNumber = 2;
  inline ::mt::EmMtDcsWbMode wbmode() const;
  inline void set_wbmode(::mt::EmMtDcsWbMode value);

  // optional uint32 wbpagenum = 3;
  inline bool has_wbpagenum() const;
  inline void clear_wbpagenum();
  static const int kWbpagenumFieldNumber = 3;
  inline ::google::protobuf::uint32 wbpagenum() const;
  inline void set_wbpagenum(::google::protobuf::uint32 value);

  // optional uint32 wbcreatetime = 4;
  inline bool has_wbcreatetime() const;
  inline void clear_wbcreatetime();
  static const int kWbcreatetimeFieldNumber = 4;
  inline ::google::protobuf::uint32 wbcreatetime() const;
  inline void set_wbcreatetime(::google::protobuf::uint32 value);

  // optional string tabid = 5;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 5;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional string wbcreator = 6;
  inline bool has_wbcreator() const;
  inline void clear_wbcreator();
  static const int kWbcreatorFieldNumber = 6;
  inline const ::std::string& wbcreator() const;
  inline void set_wbcreator(const ::std::string& value);
  inline void set_wbcreator(const char* value);
  inline void set_wbcreator(const char* value, size_t size);
  inline ::std::string* mutable_wbcreator();
  inline ::std::string* release_wbcreator();
  inline void set_allocated_wbcreator(::std::string* wbcreator);

  // optional uint32 wbwidth = 7;
  inline bool has_wbwidth() const;
  inline void clear_wbwidth();
  static const int kWbwidthFieldNumber = 7;
  inline ::google::protobuf::uint32 wbwidth() const;
  inline void set_wbwidth(::google::protobuf::uint32 value);

  // optional uint32 wbheight = 8;
  inline bool has_wbheight() const;
  inline void clear_wbheight();
  static const int kWbheightFieldNumber = 8;
  inline ::google::protobuf::uint32 wbheight() const;
  inline void set_wbheight(::google::protobuf::uint32 value);

  // optional uint32 wbanonyid = 9;
  inline bool has_wbanonyid() const;
  inline void clear_wbanonyid();
  static const int kWbanonyidFieldNumber = 9;
  inline ::google::protobuf::uint32 wbanonyid() const;
  inline void set_wbanonyid(::google::protobuf::uint32 value);

  // optional string uploadurl = 10;
  inline bool has_uploadurl() const;
  inline void clear_uploadurl();
  static const int kUploadurlFieldNumber = 10;
  inline const ::std::string& uploadurl() const;
  inline void set_uploadurl(const ::std::string& value);
  inline void set_uploadurl(const char* value);
  inline void set_uploadurl(const char* value, size_t size);
  inline ::std::string* mutable_uploadurl();
  inline ::std::string* release_uploadurl();
  inline void set_allocated_uploadurl(::std::string* uploadurl);

  // optional string downloadurl = 11;
  inline bool has_downloadurl() const;
  inline void clear_downloadurl();
  static const int kDownloadurlFieldNumber = 11;
  inline const ::std::string& downloadurl() const;
  inline void set_downloadurl(const ::std::string& value);
  inline void set_downloadurl(const char* value);
  inline void set_downloadurl(const char* value, size_t size);
  inline ::std::string* mutable_downloadurl();
  inline ::std::string* release_downloadurl();
  inline void set_allocated_downloadurl(::std::string* downloadurl);

  // optional string elementurl = 12;
  inline bool has_elementurl() const;
  inline void clear_elementurl();
  static const int kElementurlFieldNumber = 12;
  inline const ::std::string& elementurl() const;
  inline void set_elementurl(const ::std::string& value);
  inline void set_elementurl(const char* value);
  inline void set_elementurl(const char* value, size_t size);
  inline ::std::string* mutable_elementurl();
  inline ::std::string* release_elementurl();
  inline void set_allocated_elementurl(::std::string* elementurl);

  // optional uint32 pageid = 13;
  inline bool has_pageid() const;
  inline void clear_pageid();
  static const int kPageidFieldNumber = 13;
  inline ::google::protobuf::uint32 pageid() const;
  inline void set_pageid(::google::protobuf::uint32 value);

  // optional uint32 wbserialnumber = 14;
  inline bool has_wbserialnumber() const;
  inline void clear_wbserialnumber();
  static const int kWbserialnumberFieldNumber = 14;
  inline ::google::protobuf::uint32 wbserialnumber() const;
  inline void set_wbserialnumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSBoardInfo)
 private:
  inline void set_has_wbname();
  inline void clear_has_wbname();
  inline void set_has_wbmode();
  inline void clear_has_wbmode();
  inline void set_has_wbpagenum();
  inline void clear_has_wbpagenum();
  inline void set_has_wbcreatetime();
  inline void clear_has_wbcreatetime();
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_wbcreator();
  inline void clear_has_wbcreator();
  inline void set_has_wbwidth();
  inline void clear_has_wbwidth();
  inline void set_has_wbheight();
  inline void clear_has_wbheight();
  inline void set_has_wbanonyid();
  inline void clear_has_wbanonyid();
  inline void set_has_uploadurl();
  inline void clear_has_uploadurl();
  inline void set_has_downloadurl();
  inline void clear_has_downloadurl();
  inline void set_has_elementurl();
  inline void clear_has_elementurl();
  inline void set_has_pageid();
  inline void clear_has_pageid();
  inline void set_has_wbserialnumber();
  inline void clear_has_wbserialnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* wbname_;
  int wbmode_;
  ::google::protobuf::uint32 wbpagenum_;
  ::std::string* tabid_;
  ::google::protobuf::uint32 wbcreatetime_;
  ::google::protobuf::uint32 wbwidth_;
  ::std::string* wbcreator_;
  ::google::protobuf::uint32 wbheight_;
  ::google::protobuf::uint32 wbanonyid_;
  ::std::string* uploadurl_;
  ::std::string* downloadurl_;
  ::std::string* elementurl_;
  ::google::protobuf::uint32 pageid_;
  ::google::protobuf::uint32 wbserialnumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSNewWhiteBoard : public ::google::protobuf::Message {
 public:
  TDCSNewWhiteBoard();
  virtual ~TDCSNewWhiteBoard();

  TDCSNewWhiteBoard(const TDCSNewWhiteBoard& from);

  inline TDCSNewWhiteBoard& operator=(const TDCSNewWhiteBoard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSNewWhiteBoard& default_instance();

  void Swap(TDCSNewWhiteBoard* other);

  // implements Message ----------------------------------------------

  TDCSNewWhiteBoard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSNewWhiteBoard& from);
  void MergeFrom(const TDCSNewWhiteBoard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional .mt.TDCSBoardInfo boardinfo = 2;
  inline bool has_boardinfo() const;
  inline void clear_boardinfo();
  static const int kBoardinfoFieldNumber = 2;
  inline const ::mt::TDCSBoardInfo& boardinfo() const;
  inline ::mt::TDCSBoardInfo* mutable_boardinfo();
  inline ::mt::TDCSBoardInfo* release_boardinfo();
  inline void set_allocated_boardinfo(::mt::TDCSBoardInfo* boardinfo);

  // @@protoc_insertion_point(class_scope:mt.TDCSNewWhiteBoard)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_boardinfo();
  inline void clear_has_boardinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::mt::TDCSBoardInfo* boardinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSNewWhiteBoard* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSGetAllBoard : public ::google::protobuf::Message {
 public:
  TDCSGetAllBoard();
  virtual ~TDCSGetAllBoard();

  TDCSGetAllBoard(const TDCSGetAllBoard& from);

  inline TDCSGetAllBoard& operator=(const TDCSGetAllBoard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSGetAllBoard& default_instance();

  void Swap(TDCSGetAllBoard* other);

  // implements Message ----------------------------------------------

  TDCSGetAllBoard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSGetAllBoard& from);
  void MergeFrom(const TDCSGetAllBoard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // repeated .mt.TDCSBoardInfo boardinfo = 2;
  inline int boardinfo_size() const;
  inline void clear_boardinfo();
  static const int kBoardinfoFieldNumber = 2;
  inline const ::mt::TDCSBoardInfo& boardinfo(int index) const;
  inline ::mt::TDCSBoardInfo* mutable_boardinfo(int index);
  inline ::mt::TDCSBoardInfo* add_boardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSBoardInfo >&
      boardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSBoardInfo >*
      mutable_boardinfo();

  // @@protoc_insertion_point(class_scope:mt.TDCSGetAllBoard)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSBoardInfo > boardinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSGetAllBoard* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSSwitchReq : public ::google::protobuf::Message {
 public:
  TDCSSwitchReq();
  virtual ~TDCSSwitchReq();

  TDCSSwitchReq(const TDCSSwitchReq& from);

  inline TDCSSwitchReq& operator=(const TDCSSwitchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSSwitchReq& default_instance();

  void Swap(TDCSSwitchReq* other);

  // implements Message ----------------------------------------------

  TDCSSwitchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSSwitchReq& from);
  void MergeFrom(const TDCSSwitchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string tabid = 2;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 2;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 wbpageid = 3;
  inline bool has_wbpageid() const;
  inline void clear_wbpageid();
  static const int kWbpageidFieldNumber = 3;
  inline ::google::protobuf::uint32 wbpageid() const;
  inline void set_wbpageid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSSwitchReq)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_wbpageid();
  inline void clear_has_wbpageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::std::string* tabid_;
  ::google::protobuf::uint32 wbpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSSwitchReq* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSUserInfo : public ::google::protobuf::Message {
 public:
  TDCSUserInfo();
  virtual ~TDCSUserInfo();

  TDCSUserInfo(const TDCSUserInfo& from);

  inline TDCSUserInfo& operator=(const TDCSUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSUserInfo& default_instance();

  void Swap(TDCSUserInfo* other);

  // implements Message ----------------------------------------------

  TDCSUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSUserInfo& from);
  void MergeFrom(const TDCSUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string confname = 2;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 2;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // optional .mt.TDCSConfUserInfo userinfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 3;
  inline const ::mt::TDCSConfUserInfo& userinfo() const;
  inline ::mt::TDCSConfUserInfo* mutable_userinfo();
  inline ::mt::TDCSConfUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::mt::TDCSConfUserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:mt.TDCSUserInfo)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::std::string* confname_;
  ::mt::TDCSConfUserInfo* userinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSUserInfos : public ::google::protobuf::Message {
 public:
  TDCSUserInfos();
  virtual ~TDCSUserInfos();

  TDCSUserInfos(const TDCSUserInfos& from);

  inline TDCSUserInfos& operator=(const TDCSUserInfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSUserInfos& default_instance();

  void Swap(TDCSUserInfos* other);

  // implements Message ----------------------------------------------

  TDCSUserInfos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSUserInfos& from);
  void MergeFrom(const TDCSUserInfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string confname = 2;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 2;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // repeated .mt.TDCSConfUserInfo userinfo = 3;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 3;
  inline const ::mt::TDCSConfUserInfo& userinfo(int index) const;
  inline ::mt::TDCSConfUserInfo* mutable_userinfo(int index);
  inline ::mt::TDCSConfUserInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
      mutable_userinfo();

  // @@protoc_insertion_point(class_scope:mt.TDCSUserInfos)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_confname();
  inline void clear_has_confname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::std::string* confname_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo > userinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSUserInfos* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSUserRole : public ::google::protobuf::Message {
 public:
  TDCSUserRole();
  virtual ~TDCSUserRole();

  TDCSUserRole(const TDCSUserRole& from);

  inline TDCSUserRole& operator=(const TDCSUserRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSUserRole& default_instance();

  void Swap(TDCSUserRole* other);

  // implements Message ----------------------------------------------

  TDCSUserRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSUserRole& from);
  void MergeFrom(const TDCSUserRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // repeated .mt.TDCSConfUserInfo userinfolist = 2;
  inline int userinfolist_size() const;
  inline void clear_userinfolist();
  static const int kUserinfolistFieldNumber = 2;
  inline const ::mt::TDCSConfUserInfo& userinfolist(int index) const;
  inline ::mt::TDCSConfUserInfo* mutable_userinfolist(int index);
  inline ::mt::TDCSConfUserInfo* add_userinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
      userinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
      mutable_userinfolist();

  // @@protoc_insertion_point(class_scope:mt.TDCSUserRole)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo > userinfolist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSUserRole* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbPoint : public ::google::protobuf::Message {
 public:
  TDCSWbPoint();
  virtual ~TDCSWbPoint();

  TDCSWbPoint(const TDCSWbPoint& from);

  inline TDCSWbPoint& operator=(const TDCSWbPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbPoint& default_instance();

  void Swap(TDCSWbPoint* other);

  // implements Message ----------------------------------------------

  TDCSWbPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbPoint& from);
  void MergeFrom(const TDCSWbPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 posx = 1;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 1;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 posy = 2;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 2;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbPoint)
 private:
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbPoint* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbEntity : public ::google::protobuf::Message {
 public:
  TDCSWbEntity();
  virtual ~TDCSWbEntity();

  TDCSWbEntity(const TDCSWbEntity& from);

  inline TDCSWbEntity& operator=(const TDCSWbEntity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbEntity& default_instance();

  void Swap(TDCSWbEntity* other);

  // implements Message ----------------------------------------------

  TDCSWbEntity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbEntity& from);
  void MergeFrom(const TDCSWbEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string entityid = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityidFieldNumber = 1;
  inline const ::std::string& entityid() const;
  inline void set_entityid(const ::std::string& value);
  inline void set_entityid(const char* value);
  inline void set_entityid(const char* value, size_t size);
  inline ::std::string* mutable_entityid();
  inline ::std::string* release_entityid();
  inline void set_allocated_entityid(::std::string* entityid);

  // optional bool lock = 2;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 2;
  inline bool lock() const;
  inline void set_lock(bool value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbEntity)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_lock();
  inline void clear_has_lock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* entityid_;
  bool lock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbEntity* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbLine : public ::google::protobuf::Message {
 public:
  TDCSWbLine();
  virtual ~TDCSWbLine();

  TDCSWbLine(const TDCSWbLine& from);

  inline TDCSWbLine& operator=(const TDCSWbLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbLine& default_instance();

  void Swap(TDCSWbLine* other);

  // implements Message ----------------------------------------------

  TDCSWbLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbLine& from);
  void MergeFrom(const TDCSWbLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.TDCSWbEntity entity = 1;
  inline bool has_entity() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 1;
  inline const ::mt::TDCSWbEntity& entity() const;
  inline ::mt::TDCSWbEntity* mutable_entity();
  inline ::mt::TDCSWbEntity* release_entity();
  inline void set_allocated_entity(::mt::TDCSWbEntity* entity);

  // optional .mt.TDCSWbPoint beginpt = 2;
  inline bool has_beginpt() const;
  inline void clear_beginpt();
  static const int kBeginptFieldNumber = 2;
  inline const ::mt::TDCSWbPoint& beginpt() const;
  inline ::mt::TDCSWbPoint* mutable_beginpt();
  inline ::mt::TDCSWbPoint* release_beginpt();
  inline void set_allocated_beginpt(::mt::TDCSWbPoint* beginpt);

  // optional .mt.TDCSWbPoint endpt = 3;
  inline bool has_endpt() const;
  inline void clear_endpt();
  static const int kEndptFieldNumber = 3;
  inline const ::mt::TDCSWbPoint& endpt() const;
  inline ::mt::TDCSWbPoint* mutable_endpt();
  inline ::mt::TDCSWbPoint* release_endpt();
  inline void set_allocated_endpt(::mt::TDCSWbPoint* endpt);

  // optional uint32 linewidth = 4;
  inline bool has_linewidth() const;
  inline void clear_linewidth();
  static const int kLinewidthFieldNumber = 4;
  inline ::google::protobuf::uint32 linewidth() const;
  inline void set_linewidth(::google::protobuf::uint32 value);

  // optional uint32 rgb = 5;
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 5;
  inline ::google::protobuf::uint32 rgb() const;
  inline void set_rgb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbLine)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_beginpt();
  inline void clear_has_beginpt();
  inline void set_has_endpt();
  inline void clear_has_endpt();
  inline void set_has_linewidth();
  inline void clear_has_linewidth();
  inline void set_has_rgb();
  inline void clear_has_rgb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mt::TDCSWbEntity* entity_;
  ::mt::TDCSWbPoint* beginpt_;
  ::mt::TDCSWbPoint* endpt_;
  ::google::protobuf::uint32 linewidth_;
  ::google::protobuf::uint32 rgb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbLine* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbCircle : public ::google::protobuf::Message {
 public:
  TDCSWbCircle();
  virtual ~TDCSWbCircle();

  TDCSWbCircle(const TDCSWbCircle& from);

  inline TDCSWbCircle& operator=(const TDCSWbCircle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbCircle& default_instance();

  void Swap(TDCSWbCircle* other);

  // implements Message ----------------------------------------------

  TDCSWbCircle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbCircle& from);
  void MergeFrom(const TDCSWbCircle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.TDCSWbEntity entity = 1;
  inline bool has_entity() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 1;
  inline const ::mt::TDCSWbEntity& entity() const;
  inline ::mt::TDCSWbEntity* mutable_entity();
  inline ::mt::TDCSWbEntity* release_entity();
  inline void set_allocated_entity(::mt::TDCSWbEntity* entity);

  // optional .mt.TDCSWbPoint beginpt = 2;
  inline bool has_beginpt() const;
  inline void clear_beginpt();
  static const int kBeginptFieldNumber = 2;
  inline const ::mt::TDCSWbPoint& beginpt() const;
  inline ::mt::TDCSWbPoint* mutable_beginpt();
  inline ::mt::TDCSWbPoint* release_beginpt();
  inline void set_allocated_beginpt(::mt::TDCSWbPoint* beginpt);

  // optional .mt.TDCSWbPoint endpt = 3;
  inline bool has_endpt() const;
  inline void clear_endpt();
  static const int kEndptFieldNumber = 3;
  inline const ::mt::TDCSWbPoint& endpt() const;
  inline ::mt::TDCSWbPoint* mutable_endpt();
  inline ::mt::TDCSWbPoint* release_endpt();
  inline void set_allocated_endpt(::mt::TDCSWbPoint* endpt);

  // optional uint32 linewidth = 4;
  inline bool has_linewidth() const;
  inline void clear_linewidth();
  static const int kLinewidthFieldNumber = 4;
  inline ::google::protobuf::uint32 linewidth() const;
  inline void set_linewidth(::google::protobuf::uint32 value);

  // optional uint32 rgb = 5;
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 5;
  inline ::google::protobuf::uint32 rgb() const;
  inline void set_rgb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbCircle)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_beginpt();
  inline void clear_has_beginpt();
  inline void set_has_endpt();
  inline void clear_has_endpt();
  inline void set_has_linewidth();
  inline void clear_has_linewidth();
  inline void set_has_rgb();
  inline void clear_has_rgb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mt::TDCSWbEntity* entity_;
  ::mt::TDCSWbPoint* beginpt_;
  ::mt::TDCSWbPoint* endpt_;
  ::google::protobuf::uint32 linewidth_;
  ::google::protobuf::uint32 rgb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbCircle* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbRectangle : public ::google::protobuf::Message {
 public:
  TDCSWbRectangle();
  virtual ~TDCSWbRectangle();

  TDCSWbRectangle(const TDCSWbRectangle& from);

  inline TDCSWbRectangle& operator=(const TDCSWbRectangle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbRectangle& default_instance();

  void Swap(TDCSWbRectangle* other);

  // implements Message ----------------------------------------------

  TDCSWbRectangle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbRectangle& from);
  void MergeFrom(const TDCSWbRectangle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.TDCSWbEntity entity = 1;
  inline bool has_entity() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 1;
  inline const ::mt::TDCSWbEntity& entity() const;
  inline ::mt::TDCSWbEntity* mutable_entity();
  inline ::mt::TDCSWbEntity* release_entity();
  inline void set_allocated_entity(::mt::TDCSWbEntity* entity);

  // optional .mt.TDCSWbPoint beginpt = 2;
  inline bool has_beginpt() const;
  inline void clear_beginpt();
  static const int kBeginptFieldNumber = 2;
  inline const ::mt::TDCSWbPoint& beginpt() const;
  inline ::mt::TDCSWbPoint* mutable_beginpt();
  inline ::mt::TDCSWbPoint* release_beginpt();
  inline void set_allocated_beginpt(::mt::TDCSWbPoint* beginpt);

  // optional .mt.TDCSWbPoint endpt = 3;
  inline bool has_endpt() const;
  inline void clear_endpt();
  static const int kEndptFieldNumber = 3;
  inline const ::mt::TDCSWbPoint& endpt() const;
  inline ::mt::TDCSWbPoint* mutable_endpt();
  inline ::mt::TDCSWbPoint* release_endpt();
  inline void set_allocated_endpt(::mt::TDCSWbPoint* endpt);

  // optional uint32 linewidth = 4;
  inline bool has_linewidth() const;
  inline void clear_linewidth();
  static const int kLinewidthFieldNumber = 4;
  inline ::google::protobuf::uint32 linewidth() const;
  inline void set_linewidth(::google::protobuf::uint32 value);

  // optional uint32 rgb = 5;
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 5;
  inline ::google::protobuf::uint32 rgb() const;
  inline void set_rgb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbRectangle)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_beginpt();
  inline void clear_has_beginpt();
  inline void set_has_endpt();
  inline void clear_has_endpt();
  inline void set_has_linewidth();
  inline void clear_has_linewidth();
  inline void set_has_rgb();
  inline void clear_has_rgb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mt::TDCSWbEntity* entity_;
  ::mt::TDCSWbPoint* beginpt_;
  ::mt::TDCSWbPoint* endpt_;
  ::google::protobuf::uint32 linewidth_;
  ::google::protobuf::uint32 rgb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbRectangle* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbPencil : public ::google::protobuf::Message {
 public:
  TDCSWbPencil();
  virtual ~TDCSWbPencil();

  TDCSWbPencil(const TDCSWbPencil& from);

  inline TDCSWbPencil& operator=(const TDCSWbPencil& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbPencil& default_instance();

  void Swap(TDCSWbPencil* other);

  // implements Message ----------------------------------------------

  TDCSWbPencil* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbPencil& from);
  void MergeFrom(const TDCSWbPencil& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.TDCSWbEntity entity = 1;
  inline bool has_entity() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 1;
  inline const ::mt::TDCSWbEntity& entity() const;
  inline ::mt::TDCSWbEntity* mutable_entity();
  inline ::mt::TDCSWbEntity* release_entity();
  inline void set_allocated_entity(::mt::TDCSWbEntity* entity);

  // repeated .mt.TDCSWbPoint list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::mt::TDCSWbPoint& list(int index) const;
  inline ::mt::TDCSWbPoint* mutable_list(int index);
  inline ::mt::TDCSWbPoint* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >*
      mutable_list();

  // optional uint32 linewidth = 3;
  inline bool has_linewidth() const;
  inline void clear_linewidth();
  static const int kLinewidthFieldNumber = 3;
  inline ::google::protobuf::uint32 linewidth() const;
  inline void set_linewidth(::google::protobuf::uint32 value);

  // optional uint32 rgb = 4;
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 4;
  inline ::google::protobuf::uint32 rgb() const;
  inline void set_rgb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbPencil)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_linewidth();
  inline void clear_has_linewidth();
  inline void set_has_rgb();
  inline void clear_has_rgb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mt::TDCSWbEntity* entity_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint > list_;
  ::google::protobuf::uint32 linewidth_;
  ::google::protobuf::uint32 rgb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbPencil* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbColorPen : public ::google::protobuf::Message {
 public:
  TDCSWbColorPen();
  virtual ~TDCSWbColorPen();

  TDCSWbColorPen(const TDCSWbColorPen& from);

  inline TDCSWbColorPen& operator=(const TDCSWbColorPen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbColorPen& default_instance();

  void Swap(TDCSWbColorPen* other);

  // implements Message ----------------------------------------------

  TDCSWbColorPen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbColorPen& from);
  void MergeFrom(const TDCSWbColorPen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.TDCSWbEntity entity = 1;
  inline bool has_entity() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 1;
  inline const ::mt::TDCSWbEntity& entity() const;
  inline ::mt::TDCSWbEntity* mutable_entity();
  inline ::mt::TDCSWbEntity* release_entity();
  inline void set_allocated_entity(::mt::TDCSWbEntity* entity);

  // repeated .mt.TDCSWbPoint list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::mt::TDCSWbPoint& list(int index) const;
  inline ::mt::TDCSWbPoint* mutable_list(int index);
  inline ::mt::TDCSWbPoint* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >*
      mutable_list();

  // optional uint32 linewidth = 3;
  inline bool has_linewidth() const;
  inline void clear_linewidth();
  static const int kLinewidthFieldNumber = 3;
  inline ::google::protobuf::uint32 linewidth() const;
  inline void set_linewidth(::google::protobuf::uint32 value);

  // optional uint32 rgb = 4;
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 4;
  inline ::google::protobuf::uint32 rgb() const;
  inline void set_rgb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbColorPen)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_linewidth();
  inline void clear_has_linewidth();
  inline void set_has_rgb();
  inline void clear_has_rgb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mt::TDCSWbEntity* entity_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint > list_;
  ::google::protobuf::uint32 linewidth_;
  ::google::protobuf::uint32 rgb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbColorPen* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbImage : public ::google::protobuf::Message {
 public:
  TDCSWbImage();
  virtual ~TDCSWbImage();

  TDCSWbImage(const TDCSWbImage& from);

  inline TDCSWbImage& operator=(const TDCSWbImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbImage& default_instance();

  void Swap(TDCSWbImage* other);

  // implements Message ----------------------------------------------

  TDCSWbImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbImage& from);
  void MergeFrom(const TDCSWbImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.TDCSWbEntity entity = 1;
  inline bool has_entity() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 1;
  inline const ::mt::TDCSWbEntity& entity() const;
  inline ::mt::TDCSWbEntity* mutable_entity();
  inline ::mt::TDCSWbEntity* release_entity();
  inline void set_allocated_entity(::mt::TDCSWbEntity* entity);

  // optional .mt.TDCSWbPoint boardpt = 2;
  inline bool has_boardpt() const;
  inline void clear_boardpt();
  static const int kBoardptFieldNumber = 2;
  inline const ::mt::TDCSWbPoint& boardpt() const;
  inline ::mt::TDCSWbPoint* mutable_boardpt();
  inline ::mt::TDCSWbPoint* release_boardpt();
  inline void set_allocated_boardpt(::mt::TDCSWbPoint* boardpt);

  // optional uint32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional .mt.EmWbImageState networkstate = 5;
  inline bool has_networkstate() const;
  inline void clear_networkstate();
  static const int kNetworkstateFieldNumber = 5;
  inline ::mt::EmWbImageState networkstate() const;
  inline void set_networkstate(::mt::EmWbImageState value);

  // optional string filename = 6;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 6;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional bool bkimg = 7;
  inline bool has_bkimg() const;
  inline void clear_bkimg();
  static const int kBkimgFieldNumber = 7;
  inline bool bkimg() const;
  inline void set_bkimg(bool value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbImage)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_boardpt();
  inline void clear_has_boardpt();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_networkstate();
  inline void clear_has_networkstate();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_bkimg();
  inline void clear_has_bkimg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mt::TDCSWbEntity* entity_;
  ::mt::TDCSWbPoint* boardpt_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::std::string* filename_;
  int networkstate_;
  bool bkimg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbImage* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbLineOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbLineOperInfo();
  virtual ~TDCSWbLineOperInfo();

  TDCSWbLineOperInfo(const TDCSWbLineOperInfo& from);

  inline TDCSWbLineOperInfo& operator=(const TDCSWbLineOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbLineOperInfo& default_instance();

  void Swap(TDCSWbLineOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbLineOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbLineOperInfo& from);
  void MergeFrom(const TDCSWbLineOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional .mt.TDCSWbLine line = 3;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 3;
  inline const ::mt::TDCSWbLine& line() const;
  inline ::mt::TDCSWbLine* mutable_line();
  inline ::mt::TDCSWbLine* release_line();
  inline void set_allocated_line(::mt::TDCSWbLine* line);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbLineOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_line();
  inline void clear_has_line();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::mt::TDCSWbLine* line_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbLineOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbCircleOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbCircleOperInfo();
  virtual ~TDCSWbCircleOperInfo();

  TDCSWbCircleOperInfo(const TDCSWbCircleOperInfo& from);

  inline TDCSWbCircleOperInfo& operator=(const TDCSWbCircleOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbCircleOperInfo& default_instance();

  void Swap(TDCSWbCircleOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbCircleOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbCircleOperInfo& from);
  void MergeFrom(const TDCSWbCircleOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional .mt.TDCSWbCircle circle = 3;
  inline bool has_circle() const;
  inline void clear_circle();
  static const int kCircleFieldNumber = 3;
  inline const ::mt::TDCSWbCircle& circle() const;
  inline ::mt::TDCSWbCircle* mutable_circle();
  inline ::mt::TDCSWbCircle* release_circle();
  inline void set_allocated_circle(::mt::TDCSWbCircle* circle);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbCircleOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_circle();
  inline void clear_has_circle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::mt::TDCSWbCircle* circle_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbCircleOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbRectangleOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbRectangleOperInfo();
  virtual ~TDCSWbRectangleOperInfo();

  TDCSWbRectangleOperInfo(const TDCSWbRectangleOperInfo& from);

  inline TDCSWbRectangleOperInfo& operator=(const TDCSWbRectangleOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbRectangleOperInfo& default_instance();

  void Swap(TDCSWbRectangleOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbRectangleOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbRectangleOperInfo& from);
  void MergeFrom(const TDCSWbRectangleOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional .mt.TDCSWbRectangle rectangle = 3;
  inline bool has_rectangle() const;
  inline void clear_rectangle();
  static const int kRectangleFieldNumber = 3;
  inline const ::mt::TDCSWbRectangle& rectangle() const;
  inline ::mt::TDCSWbRectangle* mutable_rectangle();
  inline ::mt::TDCSWbRectangle* release_rectangle();
  inline void set_allocated_rectangle(::mt::TDCSWbRectangle* rectangle);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbRectangleOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_rectangle();
  inline void clear_has_rectangle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::mt::TDCSWbRectangle* rectangle_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbRectangleOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbPencilOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbPencilOperInfo();
  virtual ~TDCSWbPencilOperInfo();

  TDCSWbPencilOperInfo(const TDCSWbPencilOperInfo& from);

  inline TDCSWbPencilOperInfo& operator=(const TDCSWbPencilOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbPencilOperInfo& default_instance();

  void Swap(TDCSWbPencilOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbPencilOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbPencilOperInfo& from);
  void MergeFrom(const TDCSWbPencilOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional bool finished = 3;
  inline bool has_finished() const;
  inline void clear_finished();
  static const int kFinishedFieldNumber = 3;
  inline bool finished() const;
  inline void set_finished(bool value);

  // optional .mt.TDCSWbPencil pencil = 4;
  inline bool has_pencil() const;
  inline void clear_pencil();
  static const int kPencilFieldNumber = 4;
  inline const ::mt::TDCSWbPencil& pencil() const;
  inline ::mt::TDCSWbPencil* mutable_pencil();
  inline ::mt::TDCSWbPencil* release_pencil();
  inline void set_allocated_pencil(::mt::TDCSWbPencil* pencil);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbPencilOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_finished();
  inline void clear_has_finished();
  inline void set_has_pencil();
  inline void clear_has_pencil();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::google::protobuf::uint32 subpageid_;
  bool finished_;
  ::mt::TDCSWbPencil* pencil_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbPencilOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbColorPenOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbColorPenOperInfo();
  virtual ~TDCSWbColorPenOperInfo();

  TDCSWbColorPenOperInfo(const TDCSWbColorPenOperInfo& from);

  inline TDCSWbColorPenOperInfo& operator=(const TDCSWbColorPenOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbColorPenOperInfo& default_instance();

  void Swap(TDCSWbColorPenOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbColorPenOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbColorPenOperInfo& from);
  void MergeFrom(const TDCSWbColorPenOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional .mt.TDCSWbColorPen coloepen = 3;
  inline bool has_coloepen() const;
  inline void clear_coloepen();
  static const int kColoepenFieldNumber = 3;
  inline const ::mt::TDCSWbColorPen& coloepen() const;
  inline ::mt::TDCSWbColorPen* mutable_coloepen();
  inline ::mt::TDCSWbColorPen* release_coloepen();
  inline void set_allocated_coloepen(::mt::TDCSWbColorPen* coloepen);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbColorPenOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_coloepen();
  inline void clear_has_coloepen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::mt::TDCSWbColorPen* coloepen_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbColorPenOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbImageOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbImageOperInfo();
  virtual ~TDCSWbImageOperInfo();

  TDCSWbImageOperInfo(const TDCSWbImageOperInfo& from);

  inline TDCSWbImageOperInfo& operator=(const TDCSWbImageOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbImageOperInfo& default_instance();

  void Swap(TDCSWbImageOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbImageOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbImageOperInfo& from);
  void MergeFrom(const TDCSWbImageOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional .mt.TDCSWbImage image = 3;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 3;
  inline const ::mt::TDCSWbImage& image() const;
  inline ::mt::TDCSWbImage* mutable_image();
  inline ::mt::TDCSWbImage* release_image();
  inline void set_allocated_image(::mt::TDCSWbImage* image);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbImageOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_image();
  inline void clear_has_image();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::mt::TDCSWbImage* image_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbImageOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbTabPageIdInfo : public ::google::protobuf::Message {
 public:
  TDCSWbTabPageIdInfo();
  virtual ~TDCSWbTabPageIdInfo();

  TDCSWbTabPageIdInfo(const TDCSWbTabPageIdInfo& from);

  inline TDCSWbTabPageIdInfo& operator=(const TDCSWbTabPageIdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbTabPageIdInfo& default_instance();

  void Swap(TDCSWbTabPageIdInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbTabPageIdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbTabPageIdInfo& from);
  void MergeFrom(const TDCSWbTabPageIdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbTabPageIdInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbTabPageIdInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbRemovePageIdInfo : public ::google::protobuf::Message {
 public:
  TDCSWbRemovePageIdInfo();
  virtual ~TDCSWbRemovePageIdInfo();

  TDCSWbRemovePageIdInfo(const TDCSWbRemovePageIdInfo& from);

  inline TDCSWbRemovePageIdInfo& operator=(const TDCSWbRemovePageIdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbRemovePageIdInfo& default_instance();

  void Swap(TDCSWbRemovePageIdInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbRemovePageIdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbRemovePageIdInfo& from);
  void MergeFrom(const TDCSWbRemovePageIdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional string nexttabpageid = 2;
  inline bool has_nexttabpageid() const;
  inline void clear_nexttabpageid();
  static const int kNexttabpageidFieldNumber = 2;
  inline const ::std::string& nexttabpageid() const;
  inline void set_nexttabpageid(const ::std::string& value);
  inline void set_nexttabpageid(const char* value);
  inline void set_nexttabpageid(const char* value, size_t size);
  inline ::std::string* mutable_nexttabpageid();
  inline ::std::string* release_nexttabpageid();
  inline void set_allocated_nexttabpageid(::std::string* nexttabpageid);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbRemovePageIdInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_nexttabpageid();
  inline void clear_has_nexttabpageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::std::string* nexttabpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbRemovePageIdInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbAddSubPageInfo : public ::google::protobuf::Message {
 public:
  TDCSWbAddSubPageInfo();
  virtual ~TDCSWbAddSubPageInfo();

  TDCSWbAddSubPageInfo(const TDCSWbAddSubPageInfo& from);

  inline TDCSWbAddSubPageInfo& operator=(const TDCSWbAddSubPageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbAddSubPageInfo& default_instance();

  void Swap(TDCSWbAddSubPageInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbAddSubPageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbAddSubPageInfo& from);
  void MergeFrom(const TDCSWbAddSubPageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpagecount = 2;
  inline bool has_subpagecount() const;
  inline void clear_subpagecount();
  static const int kSubpagecountFieldNumber = 2;
  inline ::google::protobuf::uint32 subpagecount() const;
  inline void set_subpagecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbAddSubPageInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpagecount();
  inline void clear_has_subpagecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::google::protobuf::uint32 subpagecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbAddSubPageInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbSwitchPageInfo : public ::google::protobuf::Message {
 public:
  TDCSWbSwitchPageInfo();
  virtual ~TDCSWbSwitchPageInfo();

  TDCSWbSwitchPageInfo(const TDCSWbSwitchPageInfo& from);

  inline TDCSWbSwitchPageInfo& operator=(const TDCSWbSwitchPageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbSwitchPageInfo& default_instance();

  void Swap(TDCSWbSwitchPageInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbSwitchPageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbSwitchPageInfo& from);
  void MergeFrom(const TDCSWbSwitchPageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbSwitchPageInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbSwitchPageInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbEraseOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbEraseOperInfo();
  virtual ~TDCSWbEraseOperInfo();

  TDCSWbEraseOperInfo(const TDCSWbEraseOperInfo& from);

  inline TDCSWbEraseOperInfo& operator=(const TDCSWbEraseOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbEraseOperInfo& default_instance();

  void Swap(TDCSWbEraseOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbEraseOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbEraseOperInfo& from);
  void MergeFrom(const TDCSWbEraseOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional .mt.TDCSWbPoint beginpt = 3;
  inline bool has_beginpt() const;
  inline void clear_beginpt();
  static const int kBeginptFieldNumber = 3;
  inline const ::mt::TDCSWbPoint& beginpt() const;
  inline ::mt::TDCSWbPoint* mutable_beginpt();
  inline ::mt::TDCSWbPoint* release_beginpt();
  inline void set_allocated_beginpt(::mt::TDCSWbPoint* beginpt);

  // optional .mt.TDCSWbPoint endpt = 4;
  inline bool has_endpt() const;
  inline void clear_endpt();
  static const int kEndptFieldNumber = 4;
  inline const ::mt::TDCSWbPoint& endpt() const;
  inline ::mt::TDCSWbPoint* mutable_endpt();
  inline ::mt::TDCSWbPoint* release_endpt();
  inline void set_allocated_endpt(::mt::TDCSWbPoint* endpt);

  // optional bool nexvision = 5;
  inline bool has_nexvision() const;
  inline void clear_nexvision();
  static const int kNexvisionFieldNumber = 5;
  inline bool nexvision() const;
  inline void set_nexvision(bool value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbEraseOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_beginpt();
  inline void clear_has_beginpt();
  inline void set_has_endpt();
  inline void clear_has_endpt();
  inline void set_has_nexvision();
  inline void clear_has_nexvision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::mt::TDCSWbPoint* beginpt_;
  ::google::protobuf::uint32 subpageid_;
  bool nexvision_;
  ::mt::TDCSWbPoint* endpt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbEraseOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbZoomInfo : public ::google::protobuf::Message {
 public:
  TDCSWbZoomInfo();
  virtual ~TDCSWbZoomInfo();

  TDCSWbZoomInfo(const TDCSWbZoomInfo& from);

  inline TDCSWbZoomInfo& operator=(const TDCSWbZoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbZoomInfo& default_instance();

  void Swap(TDCSWbZoomInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbZoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbZoomInfo& from);
  void MergeFrom(const TDCSWbZoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 zoom = 2;
  inline bool has_zoom() const;
  inline void clear_zoom();
  static const int kZoomFieldNumber = 2;
  inline ::google::protobuf::uint32 zoom() const;
  inline void set_zoom(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSWbZoomInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_zoom();
  inline void clear_has_zoom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::google::protobuf::uint32 zoom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbZoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSOperReq : public ::google::protobuf::Message {
 public:
  TDCSOperReq();
  virtual ~TDCSOperReq();

  TDCSOperReq(const TDCSOperReq& from);

  inline TDCSOperReq& operator=(const TDCSOperReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSOperReq& default_instance();

  void Swap(TDCSOperReq* other);

  // implements Message ----------------------------------------------

  TDCSOperReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSOperReq& from);
  void MergeFrom(const TDCSOperReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.EmDcsOper oper = 1;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 1;
  inline ::mt::EmDcsOper oper() const;
  inline void set_oper(::mt::EmDcsOper value);

  // optional string confe164 = 2;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 2;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string tabid = 3;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 3;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 wbpageid = 4;
  inline bool has_wbpageid() const;
  inline void clear_wbpageid();
  static const int kWbpageidFieldNumber = 4;
  inline ::google::protobuf::uint32 wbpageid() const;
  inline void set_wbpageid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TDCSOperReq)
 private:
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_wbpageid();
  inline void clear_has_wbpageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  int oper_;
  ::google::protobuf::uint32 wbpageid_;
  ::std::string* tabid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSOperReq* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSRegInfo : public ::google::protobuf::Message {
 public:
  TDCSRegInfo();
  virtual ~TDCSRegInfo();

  TDCSRegInfo(const TDCSRegInfo& from);

  inline TDCSRegInfo& operator=(const TDCSRegInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSRegInfo& default_instance();

  void Swap(TDCSRegInfo* other);

  // implements Message ----------------------------------------------

  TDCSRegInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSRegInfo& from);
  void MergeFrom(const TDCSRegInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional .mt.EmMtDcsType mttype = 3;
  inline bool has_mttype() const;
  inline void clear_mttype();
  static const int kMttypeFieldNumber = 3;
  inline ::mt::EmMtDcsType mttype() const;
  inline void set_mttype(::mt::EmMtDcsType value);

  // @@protoc_insertion_point(class_scope:mt.TDCSRegInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_mttype();
  inline void clear_has_mttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  int mttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSRegInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSScrollScreenInfo : public ::google::protobuf::Message {
 public:
  TDCSScrollScreenInfo();
  virtual ~TDCSScrollScreenInfo();

  TDCSScrollScreenInfo(const TDCSScrollScreenInfo& from);

  inline TDCSScrollScreenInfo& operator=(const TDCSScrollScreenInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSScrollScreenInfo& default_instance();

  void Swap(TDCSScrollScreenInfo* other);

  // implements Message ----------------------------------------------

  TDCSScrollScreenInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSScrollScreenInfo& from);
  void MergeFrom(const TDCSScrollScreenInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional .mt.TDCSWbPoint point = 3;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 3;
  inline const ::mt::TDCSWbPoint& point() const;
  inline ::mt::TDCSWbPoint* mutable_point();
  inline ::mt::TDCSWbPoint* release_point();
  inline void set_allocated_point(::mt::TDCSWbPoint* point);

  // @@protoc_insertion_point(class_scope:mt.TDCSScrollScreenInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::mt::TDCSWbPoint* point_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSScrollScreenInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSOperContent : public ::google::protobuf::Message {
 public:
  TDCSOperContent();
  virtual ~TDCSOperContent();

  TDCSOperContent(const TDCSOperContent& from);

  inline TDCSOperContent& operator=(const TDCSOperContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSOperContent& default_instance();

  void Swap(TDCSOperContent* other);

  // implements Message ----------------------------------------------

  TDCSOperContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSOperContent& from);
  void MergeFrom(const TDCSOperContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.EmDcsOper oper = 1;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 1;
  inline ::mt::EmDcsOper oper() const;
  inline void set_oper(::mt::EmDcsOper value);

  // optional uint32 msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional string tabid = 3;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 3;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 wbpageid = 4;
  inline bool has_wbpageid() const;
  inline void clear_wbpageid();
  static const int kWbpageidFieldNumber = 4;
  inline ::google::protobuf::uint32 wbpageid() const;
  inline void set_wbpageid(::google::protobuf::uint32 value);

  // optional string confe164 = 5;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 5;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional uint32 msgsequence = 6;
  inline bool has_msgsequence() const;
  inline void clear_msgsequence();
  static const int kMsgsequenceFieldNumber = 6;
  inline ::google::protobuf::uint32 msgsequence() const;
  inline void set_msgsequence(::google::protobuf::uint32 value);

  // optional string frome164 = 7;
  inline bool has_frome164() const;
  inline void clear_frome164();
  static const int kFrome164FieldNumber = 7;
  inline const ::std::string& frome164() const;
  inline void set_frome164(const ::std::string& value);
  inline void set_frome164(const char* value);
  inline void set_frome164(const char* value, size_t size);
  inline ::std::string* mutable_frome164();
  inline ::std::string* release_frome164();
  inline void set_allocated_frome164(::std::string* frome164);

  // @@protoc_insertion_point(class_scope:mt.TDCSOperContent)
 private:
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_wbpageid();
  inline void clear_has_wbpageid();
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_msgsequence();
  inline void clear_has_msgsequence();
  inline void set_has_frome164();
  inline void clear_has_frome164();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int oper_;
  ::google::protobuf::uint32 msgid_;
  ::std::string* tabid_;
  ::std::string* confe164_;
  ::google::protobuf::uint32 wbpageid_;
  ::google::protobuf::uint32 msgsequence_;
  ::std::string* frome164_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSOperContent* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSImageUrl : public ::google::protobuf::Message {
 public:
  TDCSImageUrl();
  virtual ~TDCSImageUrl();

  TDCSImageUrl(const TDCSImageUrl& from);

  inline TDCSImageUrl& operator=(const TDCSImageUrl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSImageUrl& default_instance();

  void Swap(TDCSImageUrl* other);

  // implements Message ----------------------------------------------

  TDCSImageUrl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSImageUrl& from);
  void MergeFrom(const TDCSImageUrl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional string tabid = 2;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 2;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 pageid = 3;
  inline bool has_pageid() const;
  inline void clear_pageid();
  static const int kPageidFieldNumber = 3;
  inline ::google::protobuf::uint32 pageid() const;
  inline void set_pageid(::google::protobuf::uint32 value);

  // optional string picurl = 4;
  inline bool has_picurl() const;
  inline void clear_picurl();
  static const int kPicurlFieldNumber = 4;
  inline const ::std::string& picurl() const;
  inline void set_picurl(const ::std::string& value);
  inline void set_picurl(const char* value);
  inline void set_picurl(const char* value, size_t size);
  inline ::std::string* mutable_picurl();
  inline ::std::string* release_picurl();
  inline void set_allocated_picurl(::std::string* picurl);

  // optional string wbpicentityid = 5;
  inline bool has_wbpicentityid() const;
  inline void clear_wbpicentityid();
  static const int kWbpicentityidFieldNumber = 5;
  inline const ::std::string& wbpicentityid() const;
  inline void set_wbpicentityid(const ::std::string& value);
  inline void set_wbpicentityid(const char* value);
  inline void set_wbpicentityid(const char* value, size_t size);
  inline ::std::string* mutable_wbpicentityid();
  inline ::std::string* release_wbpicentityid();
  inline void set_allocated_wbpicentityid(::std::string* wbpicentityid);

  // @@protoc_insertion_point(class_scope:mt.TDCSImageUrl)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_pageid();
  inline void clear_has_pageid();
  inline void set_has_picurl();
  inline void clear_has_picurl();
  inline void set_has_wbpicentityid();
  inline void clear_has_wbpicentityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  ::std::string* tabid_;
  ::std::string* picurl_;
  ::std::string* wbpicentityid_;
  ::google::protobuf::uint32 pageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSImageUrl* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSConnectResult : public ::google::protobuf::Message {
 public:
  TDCSConnectResult();
  virtual ~TDCSConnectResult();

  TDCSConnectResult(const TDCSConnectResult& from);

  inline TDCSConnectResult& operator=(const TDCSConnectResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSConnectResult& default_instance();

  void Swap(TDCSConnectResult* other);

  // implements Message ----------------------------------------------

  TDCSConnectResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSConnectResult& from);
  void MergeFrom(const TDCSConnectResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // optional .mt.EmDcsConnectErrCode errorcode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  inline ::mt::EmDcsConnectErrCode errorcode() const;
  inline void set_errorcode(::mt::EmDcsConnectErrCode value);

  // @@protoc_insertion_point(class_scope:mt.TDCSConnectResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool success_;
  int errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSConnectResult* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSRejectJoinConf : public ::google::protobuf::Message {
 public:
  TDCSRejectJoinConf();
  virtual ~TDCSRejectJoinConf();

  TDCSRejectJoinConf(const TDCSRejectJoinConf& from);

  inline TDCSRejectJoinConf& operator=(const TDCSRejectJoinConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSRejectJoinConf& default_instance();

  void Swap(TDCSRejectJoinConf* other);

  // implements Message ----------------------------------------------

  TDCSRejectJoinConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSRejectJoinConf& from);
  void MergeFrom(const TDCSRejectJoinConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string confe164 = 1;
  inline bool has_confe164() const;
  inline void clear_confe164();
  static const int kConfe164FieldNumber = 1;
  inline const ::std::string& confe164() const;
  inline void set_confe164(const ::std::string& value);
  inline void set_confe164(const char* value);
  inline void set_confe164(const char* value, size_t size);
  inline ::std::string* mutable_confe164();
  inline ::std::string* release_confe164();
  inline void set_allocated_confe164(::std::string* confe164);

  // optional .mt.EmDcsAdpRejectJoinConfCode reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::mt::EmDcsAdpRejectJoinConfCode reason() const;
  inline void set_reason(::mt::EmDcsAdpRejectJoinConfCode value);

  // @@protoc_insertion_point(class_scope:mt.TDCSRejectJoinConf)
 private:
  inline void set_has_confe164();
  inline void clear_has_confe164();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* confe164_;
  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSRejectJoinConf* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSFileLoadResult : public ::google::protobuf::Message {
 public:
  TDCSFileLoadResult();
  virtual ~TDCSFileLoadResult();

  TDCSFileLoadResult(const TDCSFileLoadResult& from);

  inline TDCSFileLoadResult& operator=(const TDCSFileLoadResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSFileLoadResult& default_instance();

  void Swap(TDCSFileLoadResult* other);

  // implements Message ----------------------------------------------

  TDCSFileLoadResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSFileLoadResult& from);
  void MergeFrom(const TDCSFileLoadResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // optional bool elementfile = 2;
  inline bool has_elementfile() const;
  inline void clear_elementfile();
  static const int kElementfileFieldNumber = 2;
  inline bool elementfile() const;
  inline void set_elementfile(bool value);

  // optional string filenamepath = 3;
  inline bool has_filenamepath() const;
  inline void clear_filenamepath();
  static const int kFilenamepathFieldNumber = 3;
  inline const ::std::string& filenamepath() const;
  inline void set_filenamepath(const ::std::string& value);
  inline void set_filenamepath(const char* value);
  inline void set_filenamepath(const char* value, size_t size);
  inline ::std::string* mutable_filenamepath();
  inline ::std::string* release_filenamepath();
  inline void set_allocated_filenamepath(::std::string* filenamepath);

  // optional string wbpicentityid = 4;
  inline bool has_wbpicentityid() const;
  inline void clear_wbpicentityid();
  static const int kWbpicentityidFieldNumber = 4;
  inline const ::std::string& wbpicentityid() const;
  inline void set_wbpicentityid(const ::std::string& value);
  inline void set_wbpicentityid(const char* value);
  inline void set_wbpicentityid(const char* value, size_t size);
  inline ::std::string* mutable_wbpicentityid();
  inline ::std::string* release_wbpicentityid();
  inline void set_allocated_wbpicentityid(::std::string* wbpicentityid);

  // optional string tabid = 5;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 5;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // @@protoc_insertion_point(class_scope:mt.TDCSFileLoadResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_elementfile();
  inline void clear_has_elementfile();
  inline void set_has_filenamepath();
  inline void clear_has_filenamepath();
  inline void set_has_wbpicentityid();
  inline void clear_has_wbpicentityid();
  inline void set_has_tabid();
  inline void clear_has_tabid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filenamepath_;
  ::std::string* wbpicentityid_;
  ::std::string* tabid_;
  bool success_;
  bool elementfile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSFileLoadResult* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSFileInfo : public ::google::protobuf::Message {
 public:
  TDCSFileInfo();
  virtual ~TDCSFileInfo();

  TDCSFileInfo(const TDCSFileInfo& from);

  inline TDCSFileInfo& operator=(const TDCSFileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSFileInfo& default_instance();

  void Swap(TDCSFileInfo* other);

  // implements Message ----------------------------------------------

  TDCSFileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSFileInfo& from);
  void MergeFrom(const TDCSFileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filenamepath = 1;
  inline bool has_filenamepath() const;
  inline void clear_filenamepath();
  static const int kFilenamepathFieldNumber = 1;
  inline const ::std::string& filenamepath() const;
  inline void set_filenamepath(const ::std::string& value);
  inline void set_filenamepath(const char* value);
  inline void set_filenamepath(const char* value, size_t size);
  inline ::std::string* mutable_filenamepath();
  inline ::std::string* release_filenamepath();
  inline void set_allocated_filenamepath(::std::string* filenamepath);

  // optional string wbpicentityid = 2;
  inline bool has_wbpicentityid() const;
  inline void clear_wbpicentityid();
  static const int kWbpicentityidFieldNumber = 2;
  inline const ::std::string& wbpicentityid() const;
  inline void set_wbpicentityid(const ::std::string& value);
  inline void set_wbpicentityid(const char* value);
  inline void set_wbpicentityid(const char* value, size_t size);
  inline ::std::string* mutable_wbpicentityid();
  inline ::std::string* release_wbpicentityid();
  inline void set_allocated_wbpicentityid(::std::string* wbpicentityid);

  // optional bool elementcachefile = 3;
  inline bool has_elementcachefile() const;
  inline void clear_elementcachefile();
  static const int kElementcachefileFieldNumber = 3;
  inline bool elementcachefile() const;
  inline void set_elementcachefile(bool value);

  // optional string tabid = 4;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 4;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // @@protoc_insertion_point(class_scope:mt.TDCSFileInfo)
 private:
  inline void set_has_filenamepath();
  inline void clear_has_filenamepath();
  inline void set_has_wbpicentityid();
  inline void clear_has_wbpicentityid();
  inline void set_has_elementcachefile();
  inline void clear_has_elementcachefile();
  inline void set_has_tabid();
  inline void clear_has_tabid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filenamepath_;
  ::std::string* wbpicentityid_;
  ::std::string* tabid_;
  bool elementcachefile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSFileInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbDisPlayInfo : public ::google::protobuf::Message {
 public:
  TDCSWbDisPlayInfo();
  virtual ~TDCSWbDisPlayInfo();

  TDCSWbDisPlayInfo(const TDCSWbDisPlayInfo& from);

  inline TDCSWbDisPlayInfo& operator=(const TDCSWbDisPlayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbDisPlayInfo& default_instance();

  void Swap(TDCSWbDisPlayInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbDisPlayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbDisPlayInfo& from);
  void MergeFrom(const TDCSWbDisPlayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // repeated string matrixvalue = 3;
  inline int matrixvalue_size() const;
  inline void clear_matrixvalue();
  static const int kMatrixvalueFieldNumber = 3;
  inline const ::std::string& matrixvalue(int index) const;
  inline ::std::string* mutable_matrixvalue(int index);
  inline void set_matrixvalue(int index, const ::std::string& value);
  inline void set_matrixvalue(int index, const char* value);
  inline void set_matrixvalue(int index, const char* value, size_t size);
  inline ::std::string* add_matrixvalue();
  inline void add_matrixvalue(const ::std::string& value);
  inline void add_matrixvalue(const char* value);
  inline void add_matrixvalue(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& matrixvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_matrixvalue();

  // @@protoc_insertion_point(class_scope:mt.TDCSWbDisPlayInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> matrixvalue_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbDisPlayInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbReginEraseOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbReginEraseOperInfo();
  virtual ~TDCSWbReginEraseOperInfo();

  TDCSWbReginEraseOperInfo(const TDCSWbReginEraseOperInfo& from);

  inline TDCSWbReginEraseOperInfo& operator=(const TDCSWbReginEraseOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbReginEraseOperInfo& default_instance();

  void Swap(TDCSWbReginEraseOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbReginEraseOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbReginEraseOperInfo& from);
  void MergeFrom(const TDCSWbReginEraseOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional string graphsid = 3;
  inline bool has_graphsid() const;
  inline void clear_graphsid();
  static const int kGraphsidFieldNumber = 3;
  inline const ::std::string& graphsid() const;
  inline void set_graphsid(const ::std::string& value);
  inline void set_graphsid(const char* value);
  inline void set_graphsid(const char* value, size_t size);
  inline ::std::string* mutable_graphsid();
  inline ::std::string* release_graphsid();
  inline void set_allocated_graphsid(::std::string* graphsid);

  // optional uint32 erasewidth = 4;
  inline bool has_erasewidth() const;
  inline void clear_erasewidth();
  static const int kErasewidthFieldNumber = 4;
  inline ::google::protobuf::uint32 erasewidth() const;
  inline void set_erasewidth(::google::protobuf::uint32 value);

  // optional uint32 eraseheight = 5;
  inline bool has_eraseheight() const;
  inline void clear_eraseheight();
  static const int kEraseheightFieldNumber = 5;
  inline ::google::protobuf::uint32 eraseheight() const;
  inline void set_eraseheight(::google::protobuf::uint32 value);

  // repeated .mt.TDCSWbPoint point = 6;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 6;
  inline const ::mt::TDCSWbPoint& point(int index) const;
  inline ::mt::TDCSWbPoint* mutable_point(int index);
  inline ::mt::TDCSWbPoint* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >*
      mutable_point();

  // @@protoc_insertion_point(class_scope:mt.TDCSWbReginEraseOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_graphsid();
  inline void clear_has_graphsid();
  inline void set_has_erasewidth();
  inline void clear_has_erasewidth();
  inline void set_has_eraseheight();
  inline void clear_has_eraseheight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::std::string* graphsid_;
  ::google::protobuf::uint32 subpageid_;
  ::google::protobuf::uint32 erasewidth_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint > point_;
  ::google::protobuf::uint32 eraseheight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbReginEraseOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbInsertPicOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbInsertPicOperInfo();
  virtual ~TDCSWbInsertPicOperInfo();

  TDCSWbInsertPicOperInfo(const TDCSWbInsertPicOperInfo& from);

  inline TDCSWbInsertPicOperInfo& operator=(const TDCSWbInsertPicOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbInsertPicOperInfo& default_instance();

  void Swap(TDCSWbInsertPicOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbInsertPicOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbInsertPicOperInfo& from);
  void MergeFrom(const TDCSWbInsertPicOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // optional string imgid = 3;
  inline bool has_imgid() const;
  inline void clear_imgid();
  static const int kImgidFieldNumber = 3;
  inline const ::std::string& imgid() const;
  inline void set_imgid(const ::std::string& value);
  inline void set_imgid(const char* value);
  inline void set_imgid(const char* value, size_t size);
  inline ::std::string* mutable_imgid();
  inline ::std::string* release_imgid();
  inline void set_allocated_imgid(::std::string* imgid);

  // optional uint32 imgwidth = 4;
  inline bool has_imgwidth() const;
  inline void clear_imgwidth();
  static const int kImgwidthFieldNumber = 4;
  inline ::google::protobuf::uint32 imgwidth() const;
  inline void set_imgwidth(::google::protobuf::uint32 value);

  // optional uint32 imgheight = 5;
  inline bool has_imgheight() const;
  inline void clear_imgheight();
  static const int kImgheightFieldNumber = 5;
  inline ::google::protobuf::uint32 imgheight() const;
  inline void set_imgheight(::google::protobuf::uint32 value);

  // optional .mt.TDCSWbPoint point = 6;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 6;
  inline const ::mt::TDCSWbPoint& point() const;
  inline ::mt::TDCSWbPoint* mutable_point();
  inline ::mt::TDCSWbPoint* release_point();
  inline void set_allocated_point(::mt::TDCSWbPoint* point);

  // optional string picname = 7;
  inline bool has_picname() const;
  inline void clear_picname();
  static const int kPicnameFieldNumber = 7;
  inline const ::std::string& picname() const;
  inline void set_picname(const ::std::string& value);
  inline void set_picname(const char* value);
  inline void set_picname(const char* value, size_t size);
  inline ::std::string* mutable_picname();
  inline ::std::string* release_picname();
  inline void set_allocated_picname(::std::string* picname);

  // repeated string matrixvalue = 8;
  inline int matrixvalue_size() const;
  inline void clear_matrixvalue();
  static const int kMatrixvalueFieldNumber = 8;
  inline const ::std::string& matrixvalue(int index) const;
  inline ::std::string* mutable_matrixvalue(int index);
  inline void set_matrixvalue(int index, const ::std::string& value);
  inline void set_matrixvalue(int index, const char* value);
  inline void set_matrixvalue(int index, const char* value, size_t size);
  inline ::std::string* add_matrixvalue();
  inline void add_matrixvalue(const ::std::string& value);
  inline void add_matrixvalue(const char* value);
  inline void add_matrixvalue(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& matrixvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_matrixvalue();

  // @@protoc_insertion_point(class_scope:mt.TDCSWbInsertPicOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();
  inline void set_has_imgid();
  inline void clear_has_imgid();
  inline void set_has_imgwidth();
  inline void clear_has_imgwidth();
  inline void set_has_imgheight();
  inline void clear_has_imgheight();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_picname();
  inline void clear_has_picname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::std::string* imgid_;
  ::google::protobuf::uint32 subpageid_;
  ::google::protobuf::uint32 imgwidth_;
  ::mt::TDCSWbPoint* point_;
  ::std::string* picname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> matrixvalue_;
  ::google::protobuf::uint32 imgheight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbInsertPicOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbGraphsInfo : public ::google::protobuf::Message {
 public:
  TDCSWbGraphsInfo();
  virtual ~TDCSWbGraphsInfo();

  TDCSWbGraphsInfo(const TDCSWbGraphsInfo& from);

  inline TDCSWbGraphsInfo& operator=(const TDCSWbGraphsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbGraphsInfo& default_instance();

  void Swap(TDCSWbGraphsInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbGraphsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbGraphsInfo& from);
  void MergeFrom(const TDCSWbGraphsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string graphsid = 1;
  inline bool has_graphsid() const;
  inline void clear_graphsid();
  static const int kGraphsidFieldNumber = 1;
  inline const ::std::string& graphsid() const;
  inline void set_graphsid(const ::std::string& value);
  inline void set_graphsid(const char* value);
  inline void set_graphsid(const char* value, size_t size);
  inline ::std::string* mutable_graphsid();
  inline ::std::string* release_graphsid();
  inline void set_allocated_graphsid(::std::string* graphsid);

  // repeated string matrixvalue = 2;
  inline int matrixvalue_size() const;
  inline void clear_matrixvalue();
  static const int kMatrixvalueFieldNumber = 2;
  inline const ::std::string& matrixvalue(int index) const;
  inline ::std::string* mutable_matrixvalue(int index);
  inline void set_matrixvalue(int index, const ::std::string& value);
  inline void set_matrixvalue(int index, const char* value);
  inline void set_matrixvalue(int index, const char* value, size_t size);
  inline ::std::string* add_matrixvalue();
  inline void add_matrixvalue(const ::std::string& value);
  inline void add_matrixvalue(const char* value);
  inline void add_matrixvalue(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& matrixvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_matrixvalue();

  // @@protoc_insertion_point(class_scope:mt.TDCSWbGraphsInfo)
 private:
  inline void set_has_graphsid();
  inline void clear_has_graphsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* graphsid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> matrixvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbGraphsInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbPitchPicOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbPitchPicOperInfo();
  virtual ~TDCSWbPitchPicOperInfo();

  TDCSWbPitchPicOperInfo(const TDCSWbPitchPicOperInfo& from);

  inline TDCSWbPitchPicOperInfo& operator=(const TDCSWbPitchPicOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbPitchPicOperInfo& default_instance();

  void Swap(TDCSWbPitchPicOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbPitchPicOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbPitchPicOperInfo& from);
  void MergeFrom(const TDCSWbPitchPicOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // repeated .mt.TDCSWbGraphsInfo graphsinfo = 3;
  inline int graphsinfo_size() const;
  inline void clear_graphsinfo();
  static const int kGraphsinfoFieldNumber = 3;
  inline const ::mt::TDCSWbGraphsInfo& graphsinfo(int index) const;
  inline ::mt::TDCSWbGraphsInfo* mutable_graphsinfo(int index);
  inline ::mt::TDCSWbGraphsInfo* add_graphsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbGraphsInfo >&
      graphsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbGraphsInfo >*
      mutable_graphsinfo();

  // @@protoc_insertion_point(class_scope:mt.TDCSWbPitchPicOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbGraphsInfo > graphsinfo_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbPitchPicOperInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDCSWbDelPicOperInfo : public ::google::protobuf::Message {
 public:
  TDCSWbDelPicOperInfo();
  virtual ~TDCSWbDelPicOperInfo();

  TDCSWbDelPicOperInfo(const TDCSWbDelPicOperInfo& from);

  inline TDCSWbDelPicOperInfo& operator=(const TDCSWbDelPicOperInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDCSWbDelPicOperInfo& default_instance();

  void Swap(TDCSWbDelPicOperInfo* other);

  // implements Message ----------------------------------------------

  TDCSWbDelPicOperInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDCSWbDelPicOperInfo& from);
  void MergeFrom(const TDCSWbDelPicOperInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tabid = 1;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 1;
  inline const ::std::string& tabid() const;
  inline void set_tabid(const ::std::string& value);
  inline void set_tabid(const char* value);
  inline void set_tabid(const char* value, size_t size);
  inline ::std::string* mutable_tabid();
  inline ::std::string* release_tabid();
  inline void set_allocated_tabid(::std::string* tabid);

  // optional uint32 subpageid = 2;
  inline bool has_subpageid() const;
  inline void clear_subpageid();
  static const int kSubpageidFieldNumber = 2;
  inline ::google::protobuf::uint32 subpageid() const;
  inline void set_subpageid(::google::protobuf::uint32 value);

  // repeated string graphsid = 3;
  inline int graphsid_size() const;
  inline void clear_graphsid();
  static const int kGraphsidFieldNumber = 3;
  inline const ::std::string& graphsid(int index) const;
  inline ::std::string* mutable_graphsid(int index);
  inline void set_graphsid(int index, const ::std::string& value);
  inline void set_graphsid(int index, const char* value);
  inline void set_graphsid(int index, const char* value, size_t size);
  inline ::std::string* add_graphsid();
  inline void add_graphsid(const ::std::string& value);
  inline void add_graphsid(const char* value);
  inline void add_graphsid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& graphsid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_graphsid();

  // @@protoc_insertion_point(class_scope:mt.TDCSWbDelPicOperInfo)
 private:
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_subpageid();
  inline void clear_has_subpageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tabid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> graphsid_;
  ::google::protobuf::uint32 subpageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structdcs_2eproto();
  friend void protobuf_AssignDesc_structdcs_2eproto();
  friend void protobuf_ShutdownFile_structdcs_2eproto();

  void InitAsDefaultInstance();
  static TDCSWbDelPicOperInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TMTDCSResult

// optional bool success = 1;
inline bool TMTDCSResult::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMTDCSResult::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMTDCSResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMTDCSResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TMTDCSResult::success() const {
  return success_;
}
inline void TMTDCSResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional uint32 errorcode = 2;
inline bool TMTDCSResult::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMTDCSResult::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMTDCSResult::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMTDCSResult::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 TMTDCSResult::errorcode() const {
  return errorcode_;
}
inline void TMTDCSResult::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional string confe164 = 3;
inline bool TMTDCSResult::has_confe164() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMTDCSResult::set_has_confe164() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMTDCSResult::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMTDCSResult::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TMTDCSResult::confe164() const {
  return *confe164_;
}
inline void TMTDCSResult::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TMTDCSResult::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TMTDCSResult::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TMTDCSResult::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TMTDCSResult::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TMTDCSResult::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TDCSConfUserInfo

// optional string e164 = 1;
inline bool TDCSConfUserInfo::has_e164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSConfUserInfo::set_has_e164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSConfUserInfo::clear_has_e164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSConfUserInfo::clear_e164() {
  if (e164_ != &::google::protobuf::internal::kEmptyString) {
    e164_->clear();
  }
  clear_has_e164();
}
inline const ::std::string& TDCSConfUserInfo::e164() const {
  return *e164_;
}
inline void TDCSConfUserInfo::set_e164(const ::std::string& value) {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  e164_->assign(value);
}
inline void TDCSConfUserInfo::set_e164(const char* value) {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  e164_->assign(value);
}
inline void TDCSConfUserInfo::set_e164(const char* value, size_t size) {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  e164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSConfUserInfo::mutable_e164() {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  return e164_;
}
inline ::std::string* TDCSConfUserInfo::release_e164() {
  clear_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = e164_;
    e164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSConfUserInfo::set_allocated_e164(::std::string* e164) {
  if (e164_ != &::google::protobuf::internal::kEmptyString) {
    delete e164_;
  }
  if (e164) {
    set_has_e164();
    e164_ = e164;
  } else {
    clear_has_e164();
    e164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool TDCSConfUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSConfUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSConfUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSConfUserInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TDCSConfUserInfo::name() const {
  return *name_;
}
inline void TDCSConfUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TDCSConfUserInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TDCSConfUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSConfUserInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TDCSConfUserInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSConfUserInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.EmMtDcsType mttype = 3;
inline bool TDCSConfUserInfo::has_mttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSConfUserInfo::set_has_mttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSConfUserInfo::clear_has_mttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSConfUserInfo::clear_mttype() {
  mttype_ = 0;
  clear_has_mttype();
}
inline ::mt::EmMtDcsType TDCSConfUserInfo::mttype() const {
  return static_cast< ::mt::EmMtDcsType >(mttype_);
}
inline void TDCSConfUserInfo::set_mttype(::mt::EmMtDcsType value) {
  assert(::mt::EmMtDcsType_IsValid(value));
  set_has_mttype();
  mttype_ = value;
}

// optional bool online = 4;
inline bool TDCSConfUserInfo::has_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSConfUserInfo::set_has_online() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSConfUserInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSConfUserInfo::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool TDCSConfUserInfo::online() const {
  return online_;
}
inline void TDCSConfUserInfo::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional bool isoper = 5;
inline bool TDCSConfUserInfo::has_isoper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSConfUserInfo::set_has_isoper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSConfUserInfo::clear_has_isoper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSConfUserInfo::clear_isoper() {
  isoper_ = false;
  clear_has_isoper();
}
inline bool TDCSConfUserInfo::isoper() const {
  return isoper_;
}
inline void TDCSConfUserInfo::set_isoper(bool value) {
  set_has_isoper();
  isoper_ = value;
}

// optional bool isconfadmin = 6;
inline bool TDCSConfUserInfo::has_isconfadmin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDCSConfUserInfo::set_has_isconfadmin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDCSConfUserInfo::clear_has_isconfadmin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDCSConfUserInfo::clear_isconfadmin() {
  isconfadmin_ = false;
  clear_has_isconfadmin();
}
inline bool TDCSConfUserInfo::isconfadmin() const {
  return isconfadmin_;
}
inline void TDCSConfUserInfo::set_isconfadmin(bool value) {
  set_has_isconfadmin();
  isconfadmin_ = value;
}

// -------------------------------------------------------------------

// TDCSCreateConf

// optional .mt.EmMtDcsConfType conftype = 1;
inline bool TDCSCreateConf::has_conftype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSCreateConf::set_has_conftype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSCreateConf::clear_has_conftype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSCreateConf::clear_conftype() {
  conftype_ = 0;
  clear_has_conftype();
}
inline ::mt::EmMtDcsConfType TDCSCreateConf::conftype() const {
  return static_cast< ::mt::EmMtDcsConfType >(conftype_);
}
inline void TDCSCreateConf::set_conftype(::mt::EmMtDcsConfType value) {
  assert(::mt::EmMtDcsConfType_IsValid(value));
  set_has_conftype();
  conftype_ = value;
}

// optional string confe164 = 2;
inline bool TDCSCreateConf::has_confe164() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSCreateConf::set_has_confe164() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSCreateConf::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSCreateConf::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSCreateConf::confe164() const {
  return *confe164_;
}
inline void TDCSCreateConf::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSCreateConf::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSCreateConf::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSCreateConf::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSCreateConf::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSCreateConf::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string confname = 3;
inline bool TDCSCreateConf::has_confname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSCreateConf::set_has_confname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSCreateConf::clear_has_confname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSCreateConf::clear_confname() {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& TDCSCreateConf::confname() const {
  return *confname_;
}
inline void TDCSCreateConf::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSCreateConf::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSCreateConf::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSCreateConf::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  return confname_;
}
inline ::std::string* TDCSCreateConf::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSCreateConf::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.EmMtDcsConfMode confmode = 4;
inline bool TDCSCreateConf::has_confmode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSCreateConf::set_has_confmode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSCreateConf::clear_has_confmode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSCreateConf::clear_confmode() {
  confmode_ = 0;
  clear_has_confmode();
}
inline ::mt::EmMtDcsConfMode TDCSCreateConf::confmode() const {
  return static_cast< ::mt::EmMtDcsConfMode >(confmode_);
}
inline void TDCSCreateConf::set_confmode(::mt::EmMtDcsConfMode value) {
  assert(::mt::EmMtDcsConfMode_IsValid(value));
  set_has_confmode();
  confmode_ = value;
}

// repeated .mt.TDCSConfUserInfo userlist = 5;
inline int TDCSCreateConf::userlist_size() const {
  return userlist_.size();
}
inline void TDCSCreateConf::clear_userlist() {
  userlist_.Clear();
}
inline const ::mt::TDCSConfUserInfo& TDCSCreateConf::userlist(int index) const {
  return userlist_.Get(index);
}
inline ::mt::TDCSConfUserInfo* TDCSCreateConf::mutable_userlist(int index) {
  return userlist_.Mutable(index);
}
inline ::mt::TDCSConfUserInfo* TDCSCreateConf::add_userlist() {
  return userlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
TDCSCreateConf::userlist() const {
  return userlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
TDCSCreateConf::mutable_userlist() {
  return &userlist_;
}

// optional string confadmine164 = 6;
inline bool TDCSCreateConf::has_confadmine164() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDCSCreateConf::set_has_confadmine164() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDCSCreateConf::clear_has_confadmine164() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDCSCreateConf::clear_confadmine164() {
  if (confadmine164_ != &::google::protobuf::internal::kEmptyString) {
    confadmine164_->clear();
  }
  clear_has_confadmine164();
}
inline const ::std::string& TDCSCreateConf::confadmine164() const {
  return *confadmine164_;
}
inline void TDCSCreateConf::set_confadmine164(const ::std::string& value) {
  set_has_confadmine164();
  if (confadmine164_ == &::google::protobuf::internal::kEmptyString) {
    confadmine164_ = new ::std::string;
  }
  confadmine164_->assign(value);
}
inline void TDCSCreateConf::set_confadmine164(const char* value) {
  set_has_confadmine164();
  if (confadmine164_ == &::google::protobuf::internal::kEmptyString) {
    confadmine164_ = new ::std::string;
  }
  confadmine164_->assign(value);
}
inline void TDCSCreateConf::set_confadmine164(const char* value, size_t size) {
  set_has_confadmine164();
  if (confadmine164_ == &::google::protobuf::internal::kEmptyString) {
    confadmine164_ = new ::std::string;
  }
  confadmine164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSCreateConf::mutable_confadmine164() {
  set_has_confadmine164();
  if (confadmine164_ == &::google::protobuf::internal::kEmptyString) {
    confadmine164_ = new ::std::string;
  }
  return confadmine164_;
}
inline ::std::string* TDCSCreateConf::release_confadmine164() {
  clear_has_confadmine164();
  if (confadmine164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confadmine164_;
    confadmine164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSCreateConf::set_allocated_confadmine164(::std::string* confadmine164) {
  if (confadmine164_ != &::google::protobuf::internal::kEmptyString) {
    delete confadmine164_;
  }
  if (confadmine164) {
    set_has_confadmine164();
    confadmine164_ = confadmine164;
  } else {
    clear_has_confadmine164();
    confadmine164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.EmMtDcsType adminmttype = 7;
inline bool TDCSCreateConf::has_adminmttype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TDCSCreateConf::set_has_adminmttype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TDCSCreateConf::clear_has_adminmttype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TDCSCreateConf::clear_adminmttype() {
  adminmttype_ = 0;
  clear_has_adminmttype();
}
inline ::mt::EmMtDcsType TDCSCreateConf::adminmttype() const {
  return static_cast< ::mt::EmMtDcsType >(adminmttype_);
}
inline void TDCSCreateConf::set_adminmttype(::mt::EmMtDcsType value) {
  assert(::mt::EmMtDcsType_IsValid(value));
  set_has_adminmttype();
  adminmttype_ = value;
}

// -------------------------------------------------------------------

// TDCSConfAddr

// optional string ip = 1;
inline bool TDCSConfAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSConfAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSConfAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSConfAddr::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& TDCSConfAddr::ip() const {
  return *ip_;
}
inline void TDCSConfAddr::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TDCSConfAddr::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TDCSConfAddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSConfAddr::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* TDCSConfAddr::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSConfAddr::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string domain = 2;
inline bool TDCSConfAddr::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSConfAddr::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSConfAddr::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSConfAddr::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& TDCSConfAddr::domain() const {
  return *domain_;
}
inline void TDCSConfAddr::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void TDCSConfAddr::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void TDCSConfAddr::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSConfAddr::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* TDCSConfAddr::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSConfAddr::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 3;
inline bool TDCSConfAddr::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSConfAddr::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSConfAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSConfAddr::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 TDCSConfAddr::port() const {
  return port_;
}
inline void TDCSConfAddr::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// TDCSCreateConfResult

// optional string confe164 = 1;
inline bool TDCSCreateConfResult::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSCreateConfResult::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSCreateConfResult::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSCreateConfResult::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSCreateConfResult::confe164() const {
  return *confe164_;
}
inline void TDCSCreateConfResult::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSCreateConfResult::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSCreateConfResult::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSCreateConfResult::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSCreateConfResult::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSCreateConfResult::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string confname = 2;
inline bool TDCSCreateConfResult::has_confname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSCreateConfResult::set_has_confname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSCreateConfResult::clear_has_confname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSCreateConfResult::clear_confname() {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& TDCSCreateConfResult::confname() const {
  return *confname_;
}
inline void TDCSCreateConfResult::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSCreateConfResult::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSCreateConfResult::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSCreateConfResult::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  return confname_;
}
inline ::std::string* TDCSCreateConfResult::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSCreateConfResult::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool success = 3;
inline bool TDCSCreateConfResult::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSCreateConfResult::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSCreateConfResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSCreateConfResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TDCSCreateConfResult::success() const {
  return success_;
}
inline void TDCSCreateConfResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional uint32 errorcode = 4;
inline bool TDCSCreateConfResult::has_errorcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSCreateConfResult::set_has_errorcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSCreateConfResult::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSCreateConfResult::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 TDCSCreateConfResult::errorcode() const {
  return errorcode_;
}
inline void TDCSCreateConfResult::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional .mt.EmMtDcsConfMode confmode = 5;
inline bool TDCSCreateConfResult::has_confmode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSCreateConfResult::set_has_confmode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSCreateConfResult::clear_has_confmode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSCreateConfResult::clear_confmode() {
  confmode_ = 0;
  clear_has_confmode();
}
inline ::mt::EmMtDcsConfMode TDCSCreateConfResult::confmode() const {
  return static_cast< ::mt::EmMtDcsConfMode >(confmode_);
}
inline void TDCSCreateConfResult::set_confmode(::mt::EmMtDcsConfMode value) {
  assert(::mt::EmMtDcsConfMode_IsValid(value));
  set_has_confmode();
  confmode_ = value;
}

// optional .mt.EmMtDcsConfType conftype = 6;
inline bool TDCSCreateConfResult::has_conftype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDCSCreateConfResult::set_has_conftype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDCSCreateConfResult::clear_has_conftype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDCSCreateConfResult::clear_conftype() {
  conftype_ = 0;
  clear_has_conftype();
}
inline ::mt::EmMtDcsConfType TDCSCreateConfResult::conftype() const {
  return static_cast< ::mt::EmMtDcsConfType >(conftype_);
}
inline void TDCSCreateConfResult::set_conftype(::mt::EmMtDcsConfType value) {
  assert(::mt::EmMtDcsConfType_IsValid(value));
  set_has_conftype();
  conftype_ = value;
}

// optional .mt.TDCSConfAddr confaddr = 7;
inline bool TDCSCreateConfResult::has_confaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TDCSCreateConfResult::set_has_confaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TDCSCreateConfResult::clear_has_confaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TDCSCreateConfResult::clear_confaddr() {
  if (confaddr_ != NULL) confaddr_->::mt::TDCSConfAddr::Clear();
  clear_has_confaddr();
}
inline const ::mt::TDCSConfAddr& TDCSCreateConfResult::confaddr() const {
  return confaddr_ != NULL ? *confaddr_ : *default_instance_->confaddr_;
}
inline ::mt::TDCSConfAddr* TDCSCreateConfResult::mutable_confaddr() {
  set_has_confaddr();
  if (confaddr_ == NULL) confaddr_ = new ::mt::TDCSConfAddr;
  return confaddr_;
}
inline ::mt::TDCSConfAddr* TDCSCreateConfResult::release_confaddr() {
  clear_has_confaddr();
  ::mt::TDCSConfAddr* temp = confaddr_;
  confaddr_ = NULL;
  return temp;
}
inline void TDCSCreateConfResult::set_allocated_confaddr(::mt::TDCSConfAddr* confaddr) {
  delete confaddr_;
  confaddr_ = confaddr;
  if (confaddr) {
    set_has_confaddr();
  } else {
    clear_has_confaddr();
  }
}

// optional bool bcreator = 8;
inline bool TDCSCreateConfResult::has_bcreator() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TDCSCreateConfResult::set_has_bcreator() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TDCSCreateConfResult::clear_has_bcreator() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TDCSCreateConfResult::clear_bcreator() {
  bcreator_ = false;
  clear_has_bcreator();
}
inline bool TDCSCreateConfResult::bcreator() const {
  return bcreator_;
}
inline void TDCSCreateConfResult::set_bcreator(bool value) {
  set_has_bcreator();
  bcreator_ = value;
}

// -------------------------------------------------------------------

// TDCSSetConfInfoResult

// optional bool success = 1;
inline bool TDCSSetConfInfoResult::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSSetConfInfoResult::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSSetConfInfoResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSSetConfInfoResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TDCSSetConfInfoResult::success() const {
  return success_;
}
inline void TDCSSetConfInfoResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional uint32 errorcode = 2;
inline bool TDCSSetConfInfoResult::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSSetConfInfoResult::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSSetConfInfoResult::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSSetConfInfoResult::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 TDCSSetConfInfoResult::errorcode() const {
  return errorcode_;
}
inline void TDCSSetConfInfoResult::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional string confe164 = 3;
inline bool TDCSSetConfInfoResult::has_confe164() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSSetConfInfoResult::set_has_confe164() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSSetConfInfoResult::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSSetConfInfoResult::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSSetConfInfoResult::confe164() const {
  return *confe164_;
}
inline void TDCSSetConfInfoResult::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSSetConfInfoResult::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSSetConfInfoResult::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSSetConfInfoResult::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSSetConfInfoResult::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSSetConfInfoResult::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string confname = 4;
inline bool TDCSSetConfInfoResult::has_confname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSSetConfInfoResult::set_has_confname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSSetConfInfoResult::clear_has_confname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSSetConfInfoResult::clear_confname() {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& TDCSSetConfInfoResult::confname() const {
  return *confname_;
}
inline void TDCSSetConfInfoResult::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSSetConfInfoResult::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSSetConfInfoResult::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSSetConfInfoResult::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  return confname_;
}
inline ::std::string* TDCSSetConfInfoResult::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSSetConfInfoResult::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.EmMtDcsConfMode confmode = 5;
inline bool TDCSSetConfInfoResult::has_confmode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSSetConfInfoResult::set_has_confmode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSSetConfInfoResult::clear_has_confmode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSSetConfInfoResult::clear_confmode() {
  confmode_ = 0;
  clear_has_confmode();
}
inline ::mt::EmMtDcsConfMode TDCSSetConfInfoResult::confmode() const {
  return static_cast< ::mt::EmMtDcsConfMode >(confmode_);
}
inline void TDCSSetConfInfoResult::set_confmode(::mt::EmMtDcsConfMode value) {
  assert(::mt::EmMtDcsConfMode_IsValid(value));
  set_has_confmode();
  confmode_ = value;
}

// optional .mt.EmMtDcsConfType conftype = 6;
inline bool TDCSSetConfInfoResult::has_conftype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDCSSetConfInfoResult::set_has_conftype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDCSSetConfInfoResult::clear_has_conftype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDCSSetConfInfoResult::clear_conftype() {
  conftype_ = 0;
  clear_has_conftype();
}
inline ::mt::EmMtDcsConfType TDCSSetConfInfoResult::conftype() const {
  return static_cast< ::mt::EmMtDcsConfType >(conftype_);
}
inline void TDCSSetConfInfoResult::set_conftype(::mt::EmMtDcsConfType value) {
  assert(::mt::EmMtDcsConfType_IsValid(value));
  set_has_conftype();
  conftype_ = value;
}

// -------------------------------------------------------------------

// TDCSBoardResult

// optional bool success = 1;
inline bool TDCSBoardResult::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSBoardResult::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSBoardResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSBoardResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TDCSBoardResult::success() const {
  return success_;
}
inline void TDCSBoardResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional uint32 errorcode = 2;
inline bool TDCSBoardResult::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSBoardResult::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSBoardResult::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSBoardResult::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 TDCSBoardResult::errorcode() const {
  return errorcode_;
}
inline void TDCSBoardResult::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional string confe164 = 3;
inline bool TDCSBoardResult::has_confe164() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSBoardResult::set_has_confe164() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSBoardResult::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSBoardResult::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSBoardResult::confe164() const {
  return *confe164_;
}
inline void TDCSBoardResult::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSBoardResult::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSBoardResult::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSBoardResult::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSBoardResult::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSBoardResult::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tabid = 4;
inline bool TDCSBoardResult::has_tabid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSBoardResult::set_has_tabid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSBoardResult::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSBoardResult::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSBoardResult::tabid() const {
  return *tabid_;
}
inline void TDCSBoardResult::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSBoardResult::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSBoardResult::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSBoardResult::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSBoardResult::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSBoardResult::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pageid = 5;
inline bool TDCSBoardResult::has_pageid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSBoardResult::set_has_pageid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSBoardResult::clear_has_pageid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSBoardResult::clear_pageid() {
  pageid_ = 0u;
  clear_has_pageid();
}
inline ::google::protobuf::uint32 TDCSBoardResult::pageid() const {
  return pageid_;
}
inline void TDCSBoardResult::set_pageid(::google::protobuf::uint32 value) {
  set_has_pageid();
  pageid_ = value;
}

// -------------------------------------------------------------------

// TDCSOperator

// optional string confe164 = 1;
inline bool TDCSOperator::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSOperator::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSOperator::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSOperator::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSOperator::confe164() const {
  return *confe164_;
}
inline void TDCSOperator::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSOperator::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSOperator::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSOperator::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSOperator::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSOperator::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .mt.TDCSConfUserInfo operlist = 2;
inline int TDCSOperator::operlist_size() const {
  return operlist_.size();
}
inline void TDCSOperator::clear_operlist() {
  operlist_.Clear();
}
inline const ::mt::TDCSConfUserInfo& TDCSOperator::operlist(int index) const {
  return operlist_.Get(index);
}
inline ::mt::TDCSConfUserInfo* TDCSOperator::mutable_operlist(int index) {
  return operlist_.Mutable(index);
}
inline ::mt::TDCSConfUserInfo* TDCSOperator::add_operlist() {
  return operlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
TDCSOperator::operlist() const {
  return operlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
TDCSOperator::mutable_operlist() {
  return &operlist_;
}

// -------------------------------------------------------------------

// TDCSInviteUsr

// optional string confe164 = 1;
inline bool TDCSInviteUsr::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSInviteUsr::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSInviteUsr::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSInviteUsr::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSInviteUsr::confe164() const {
  return *confe164_;
}
inline void TDCSInviteUsr::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSInviteUsr::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSInviteUsr::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSInviteUsr::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSInviteUsr::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSInviteUsr::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.TDCSConfAddr confaddr = 3;
inline bool TDCSInviteUsr::has_confaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSInviteUsr::set_has_confaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSInviteUsr::clear_has_confaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSInviteUsr::clear_confaddr() {
  if (confaddr_ != NULL) confaddr_->::mt::TDCSConfAddr::Clear();
  clear_has_confaddr();
}
inline const ::mt::TDCSConfAddr& TDCSInviteUsr::confaddr() const {
  return confaddr_ != NULL ? *confaddr_ : *default_instance_->confaddr_;
}
inline ::mt::TDCSConfAddr* TDCSInviteUsr::mutable_confaddr() {
  set_has_confaddr();
  if (confaddr_ == NULL) confaddr_ = new ::mt::TDCSConfAddr;
  return confaddr_;
}
inline ::mt::TDCSConfAddr* TDCSInviteUsr::release_confaddr() {
  clear_has_confaddr();
  ::mt::TDCSConfAddr* temp = confaddr_;
  confaddr_ = NULL;
  return temp;
}
inline void TDCSInviteUsr::set_allocated_confaddr(::mt::TDCSConfAddr* confaddr) {
  delete confaddr_;
  confaddr_ = confaddr;
  if (confaddr) {
    set_has_confaddr();
  } else {
    clear_has_confaddr();
  }
}

// -------------------------------------------------------------------

// TDCSJoinConfResult

// optional string confe164 = 1;
inline bool TDCSJoinConfResult::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSJoinConfResult::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSJoinConfResult::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSJoinConfResult::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSJoinConfResult::confe164() const {
  return *confe164_;
}
inline void TDCSJoinConfResult::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSJoinConfResult::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSJoinConfResult::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSJoinConfResult::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSJoinConfResult::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSJoinConfResult::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string confname = 2;
inline bool TDCSJoinConfResult::has_confname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSJoinConfResult::set_has_confname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSJoinConfResult::clear_has_confname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSJoinConfResult::clear_confname() {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& TDCSJoinConfResult::confname() const {
  return *confname_;
}
inline void TDCSJoinConfResult::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSJoinConfResult::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSJoinConfResult::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSJoinConfResult::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  return confname_;
}
inline ::std::string* TDCSJoinConfResult::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSJoinConfResult::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.EmMtDcsConfType conftype = 3;
inline bool TDCSJoinConfResult::has_conftype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSJoinConfResult::set_has_conftype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSJoinConfResult::clear_has_conftype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSJoinConfResult::clear_conftype() {
  conftype_ = 0;
  clear_has_conftype();
}
inline ::mt::EmMtDcsConfType TDCSJoinConfResult::conftype() const {
  return static_cast< ::mt::EmMtDcsConfType >(conftype_);
}
inline void TDCSJoinConfResult::set_conftype(::mt::EmMtDcsConfType value) {
  assert(::mt::EmMtDcsConfType_IsValid(value));
  set_has_conftype();
  conftype_ = value;
}

// optional .mt.EmMtDcsConfMode confmode = 4;
inline bool TDCSJoinConfResult::has_confmode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSJoinConfResult::set_has_confmode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSJoinConfResult::clear_has_confmode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSJoinConfResult::clear_confmode() {
  confmode_ = 0;
  clear_has_confmode();
}
inline ::mt::EmMtDcsConfMode TDCSJoinConfResult::confmode() const {
  return static_cast< ::mt::EmMtDcsConfMode >(confmode_);
}
inline void TDCSJoinConfResult::set_confmode(::mt::EmMtDcsConfMode value) {
  assert(::mt::EmMtDcsConfMode_IsValid(value));
  set_has_confmode();
  confmode_ = value;
}

// optional bool success = 5;
inline bool TDCSJoinConfResult::has_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSJoinConfResult::set_has_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSJoinConfResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSJoinConfResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TDCSJoinConfResult::success() const {
  return success_;
}
inline void TDCSJoinConfResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional uint32 errorcode = 6;
inline bool TDCSJoinConfResult::has_errorcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDCSJoinConfResult::set_has_errorcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDCSJoinConfResult::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDCSJoinConfResult::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 TDCSJoinConfResult::errorcode() const {
  return errorcode_;
}
inline void TDCSJoinConfResult::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional bool isoper = 7;
inline bool TDCSJoinConfResult::has_isoper() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TDCSJoinConfResult::set_has_isoper() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TDCSJoinConfResult::clear_has_isoper() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TDCSJoinConfResult::clear_isoper() {
  isoper_ = false;
  clear_has_isoper();
}
inline bool TDCSJoinConfResult::isoper() const {
  return isoper_;
}
inline void TDCSJoinConfResult::set_isoper(bool value) {
  set_has_isoper();
  isoper_ = value;
}

// optional bool isconfadmin = 8;
inline bool TDCSJoinConfResult::has_isconfadmin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TDCSJoinConfResult::set_has_isconfadmin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TDCSJoinConfResult::clear_has_isconfadmin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TDCSJoinConfResult::clear_isconfadmin() {
  isconfadmin_ = false;
  clear_has_isconfadmin();
}
inline bool TDCSJoinConfResult::isconfadmin() const {
  return isconfadmin_;
}
inline void TDCSJoinConfResult::set_isconfadmin(bool value) {
  set_has_isconfadmin();
  isconfadmin_ = value;
}

// -------------------------------------------------------------------

// TDCSMemberInfo

// optional string confe164 = 1;
inline bool TDCSMemberInfo::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSMemberInfo::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSMemberInfo::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSMemberInfo::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSMemberInfo::confe164() const {
  return *confe164_;
}
inline void TDCSMemberInfo::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSMemberInfo::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSMemberInfo::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSMemberInfo::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSMemberInfo::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSMemberInfo::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .mt.TDCSConfUserInfo userlist = 2;
inline int TDCSMemberInfo::userlist_size() const {
  return userlist_.size();
}
inline void TDCSMemberInfo::clear_userlist() {
  userlist_.Clear();
}
inline const ::mt::TDCSConfUserInfo& TDCSMemberInfo::userlist(int index) const {
  return userlist_.Get(index);
}
inline ::mt::TDCSConfUserInfo* TDCSMemberInfo::mutable_userlist(int index) {
  return userlist_.Mutable(index);
}
inline ::mt::TDCSConfUserInfo* TDCSMemberInfo::add_userlist() {
  return userlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
TDCSMemberInfo::userlist() const {
  return userlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
TDCSMemberInfo::mutable_userlist() {
  return &userlist_;
}

// -------------------------------------------------------------------

// TDCSConfInfo

// optional string confe164 = 1;
inline bool TDCSConfInfo::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSConfInfo::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSConfInfo::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSConfInfo::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSConfInfo::confe164() const {
  return *confe164_;
}
inline void TDCSConfInfo::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSConfInfo::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSConfInfo::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSConfInfo::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSConfInfo::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSConfInfo::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string confname = 2;
inline bool TDCSConfInfo::has_confname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSConfInfo::set_has_confname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSConfInfo::clear_has_confname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSConfInfo::clear_confname() {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& TDCSConfInfo::confname() const {
  return *confname_;
}
inline void TDCSConfInfo::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSConfInfo::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSConfInfo::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSConfInfo::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  return confname_;
}
inline ::std::string* TDCSConfInfo::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSConfInfo::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.EmMtDcsConfMode confmode = 3;
inline bool TDCSConfInfo::has_confmode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSConfInfo::set_has_confmode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSConfInfo::clear_has_confmode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSConfInfo::clear_confmode() {
  confmode_ = 0;
  clear_has_confmode();
}
inline ::mt::EmMtDcsConfMode TDCSConfInfo::confmode() const {
  return static_cast< ::mt::EmMtDcsConfMode >(confmode_);
}
inline void TDCSConfInfo::set_confmode(::mt::EmMtDcsConfMode value) {
  assert(::mt::EmMtDcsConfMode_IsValid(value));
  set_has_confmode();
  confmode_ = value;
}

// optional .mt.EmMtDcsConfType conftype = 4;
inline bool TDCSConfInfo::has_conftype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSConfInfo::set_has_conftype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSConfInfo::clear_has_conftype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSConfInfo::clear_conftype() {
  conftype_ = 0;
  clear_has_conftype();
}
inline ::mt::EmMtDcsConfType TDCSConfInfo::conftype() const {
  return static_cast< ::mt::EmMtDcsConfType >(conftype_);
}
inline void TDCSConfInfo::set_conftype(::mt::EmMtDcsConfType value) {
  assert(::mt::EmMtDcsConfType_IsValid(value));
  set_has_conftype();
  conftype_ = value;
}

// -------------------------------------------------------------------

// TDCSSetUserRole

// optional string confe164 = 1;
inline bool TDCSSetUserRole::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSSetUserRole::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSSetUserRole::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSSetUserRole::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSSetUserRole::confe164() const {
  return *confe164_;
}
inline void TDCSSetUserRole::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSSetUserRole::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSSetUserRole::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSSetUserRole::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSSetUserRole::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSSetUserRole::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .mt.TDCSConfUserInfo userlist = 2;
inline int TDCSSetUserRole::userlist_size() const {
  return userlist_.size();
}
inline void TDCSSetUserRole::clear_userlist() {
  userlist_.Clear();
}
inline const ::mt::TDCSConfUserInfo& TDCSSetUserRole::userlist(int index) const {
  return userlist_.Get(index);
}
inline ::mt::TDCSConfUserInfo* TDCSSetUserRole::mutable_userlist(int index) {
  return userlist_.Mutable(index);
}
inline ::mt::TDCSConfUserInfo* TDCSSetUserRole::add_userlist() {
  return userlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
TDCSSetUserRole::userlist() const {
  return userlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
TDCSSetUserRole::mutable_userlist() {
  return &userlist_;
}

// -------------------------------------------------------------------

// TDCSGetUserList

// repeated .mt.TDCSConfUserInfo userlist = 1;
inline int TDCSGetUserList::userlist_size() const {
  return userlist_.size();
}
inline void TDCSGetUserList::clear_userlist() {
  userlist_.Clear();
}
inline const ::mt::TDCSConfUserInfo& TDCSGetUserList::userlist(int index) const {
  return userlist_.Get(index);
}
inline ::mt::TDCSConfUserInfo* TDCSGetUserList::mutable_userlist(int index) {
  return userlist_.Mutable(index);
}
inline ::mt::TDCSConfUserInfo* TDCSGetUserList::add_userlist() {
  return userlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
TDCSGetUserList::userlist() const {
  return userlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
TDCSGetUserList::mutable_userlist() {
  return &userlist_;
}

// -------------------------------------------------------------------

// TDCSBoardInfo

// optional string wbname = 1;
inline bool TDCSBoardInfo::has_wbname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSBoardInfo::set_has_wbname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSBoardInfo::clear_has_wbname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSBoardInfo::clear_wbname() {
  if (wbname_ != &::google::protobuf::internal::kEmptyString) {
    wbname_->clear();
  }
  clear_has_wbname();
}
inline const ::std::string& TDCSBoardInfo::wbname() const {
  return *wbname_;
}
inline void TDCSBoardInfo::set_wbname(const ::std::string& value) {
  set_has_wbname();
  if (wbname_ == &::google::protobuf::internal::kEmptyString) {
    wbname_ = new ::std::string;
  }
  wbname_->assign(value);
}
inline void TDCSBoardInfo::set_wbname(const char* value) {
  set_has_wbname();
  if (wbname_ == &::google::protobuf::internal::kEmptyString) {
    wbname_ = new ::std::string;
  }
  wbname_->assign(value);
}
inline void TDCSBoardInfo::set_wbname(const char* value, size_t size) {
  set_has_wbname();
  if (wbname_ == &::google::protobuf::internal::kEmptyString) {
    wbname_ = new ::std::string;
  }
  wbname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSBoardInfo::mutable_wbname() {
  set_has_wbname();
  if (wbname_ == &::google::protobuf::internal::kEmptyString) {
    wbname_ = new ::std::string;
  }
  return wbname_;
}
inline ::std::string* TDCSBoardInfo::release_wbname() {
  clear_has_wbname();
  if (wbname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wbname_;
    wbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSBoardInfo::set_allocated_wbname(::std::string* wbname) {
  if (wbname_ != &::google::protobuf::internal::kEmptyString) {
    delete wbname_;
  }
  if (wbname) {
    set_has_wbname();
    wbname_ = wbname;
  } else {
    clear_has_wbname();
    wbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.EmMtDcsWbMode wbmode = 2;
inline bool TDCSBoardInfo::has_wbmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSBoardInfo::set_has_wbmode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSBoardInfo::clear_has_wbmode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSBoardInfo::clear_wbmode() {
  wbmode_ = 0;
  clear_has_wbmode();
}
inline ::mt::EmMtDcsWbMode TDCSBoardInfo::wbmode() const {
  return static_cast< ::mt::EmMtDcsWbMode >(wbmode_);
}
inline void TDCSBoardInfo::set_wbmode(::mt::EmMtDcsWbMode value) {
  assert(::mt::EmMtDcsWbMode_IsValid(value));
  set_has_wbmode();
  wbmode_ = value;
}

// optional uint32 wbpagenum = 3;
inline bool TDCSBoardInfo::has_wbpagenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSBoardInfo::set_has_wbpagenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSBoardInfo::clear_has_wbpagenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSBoardInfo::clear_wbpagenum() {
  wbpagenum_ = 0u;
  clear_has_wbpagenum();
}
inline ::google::protobuf::uint32 TDCSBoardInfo::wbpagenum() const {
  return wbpagenum_;
}
inline void TDCSBoardInfo::set_wbpagenum(::google::protobuf::uint32 value) {
  set_has_wbpagenum();
  wbpagenum_ = value;
}

// optional uint32 wbcreatetime = 4;
inline bool TDCSBoardInfo::has_wbcreatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSBoardInfo::set_has_wbcreatetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSBoardInfo::clear_has_wbcreatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSBoardInfo::clear_wbcreatetime() {
  wbcreatetime_ = 0u;
  clear_has_wbcreatetime();
}
inline ::google::protobuf::uint32 TDCSBoardInfo::wbcreatetime() const {
  return wbcreatetime_;
}
inline void TDCSBoardInfo::set_wbcreatetime(::google::protobuf::uint32 value) {
  set_has_wbcreatetime();
  wbcreatetime_ = value;
}

// optional string tabid = 5;
inline bool TDCSBoardInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSBoardInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSBoardInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSBoardInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSBoardInfo::tabid() const {
  return *tabid_;
}
inline void TDCSBoardInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSBoardInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSBoardInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSBoardInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSBoardInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSBoardInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wbcreator = 6;
inline bool TDCSBoardInfo::has_wbcreator() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDCSBoardInfo::set_has_wbcreator() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDCSBoardInfo::clear_has_wbcreator() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDCSBoardInfo::clear_wbcreator() {
  if (wbcreator_ != &::google::protobuf::internal::kEmptyString) {
    wbcreator_->clear();
  }
  clear_has_wbcreator();
}
inline const ::std::string& TDCSBoardInfo::wbcreator() const {
  return *wbcreator_;
}
inline void TDCSBoardInfo::set_wbcreator(const ::std::string& value) {
  set_has_wbcreator();
  if (wbcreator_ == &::google::protobuf::internal::kEmptyString) {
    wbcreator_ = new ::std::string;
  }
  wbcreator_->assign(value);
}
inline void TDCSBoardInfo::set_wbcreator(const char* value) {
  set_has_wbcreator();
  if (wbcreator_ == &::google::protobuf::internal::kEmptyString) {
    wbcreator_ = new ::std::string;
  }
  wbcreator_->assign(value);
}
inline void TDCSBoardInfo::set_wbcreator(const char* value, size_t size) {
  set_has_wbcreator();
  if (wbcreator_ == &::google::protobuf::internal::kEmptyString) {
    wbcreator_ = new ::std::string;
  }
  wbcreator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSBoardInfo::mutable_wbcreator() {
  set_has_wbcreator();
  if (wbcreator_ == &::google::protobuf::internal::kEmptyString) {
    wbcreator_ = new ::std::string;
  }
  return wbcreator_;
}
inline ::std::string* TDCSBoardInfo::release_wbcreator() {
  clear_has_wbcreator();
  if (wbcreator_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wbcreator_;
    wbcreator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSBoardInfo::set_allocated_wbcreator(::std::string* wbcreator) {
  if (wbcreator_ != &::google::protobuf::internal::kEmptyString) {
    delete wbcreator_;
  }
  if (wbcreator) {
    set_has_wbcreator();
    wbcreator_ = wbcreator;
  } else {
    clear_has_wbcreator();
    wbcreator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 wbwidth = 7;
inline bool TDCSBoardInfo::has_wbwidth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TDCSBoardInfo::set_has_wbwidth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TDCSBoardInfo::clear_has_wbwidth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TDCSBoardInfo::clear_wbwidth() {
  wbwidth_ = 0u;
  clear_has_wbwidth();
}
inline ::google::protobuf::uint32 TDCSBoardInfo::wbwidth() const {
  return wbwidth_;
}
inline void TDCSBoardInfo::set_wbwidth(::google::protobuf::uint32 value) {
  set_has_wbwidth();
  wbwidth_ = value;
}

// optional uint32 wbheight = 8;
inline bool TDCSBoardInfo::has_wbheight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TDCSBoardInfo::set_has_wbheight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TDCSBoardInfo::clear_has_wbheight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TDCSBoardInfo::clear_wbheight() {
  wbheight_ = 0u;
  clear_has_wbheight();
}
inline ::google::protobuf::uint32 TDCSBoardInfo::wbheight() const {
  return wbheight_;
}
inline void TDCSBoardInfo::set_wbheight(::google::protobuf::uint32 value) {
  set_has_wbheight();
  wbheight_ = value;
}

// optional uint32 wbanonyid = 9;
inline bool TDCSBoardInfo::has_wbanonyid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TDCSBoardInfo::set_has_wbanonyid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TDCSBoardInfo::clear_has_wbanonyid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TDCSBoardInfo::clear_wbanonyid() {
  wbanonyid_ = 0u;
  clear_has_wbanonyid();
}
inline ::google::protobuf::uint32 TDCSBoardInfo::wbanonyid() const {
  return wbanonyid_;
}
inline void TDCSBoardInfo::set_wbanonyid(::google::protobuf::uint32 value) {
  set_has_wbanonyid();
  wbanonyid_ = value;
}

// optional string uploadurl = 10;
inline bool TDCSBoardInfo::has_uploadurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TDCSBoardInfo::set_has_uploadurl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TDCSBoardInfo::clear_has_uploadurl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TDCSBoardInfo::clear_uploadurl() {
  if (uploadurl_ != &::google::protobuf::internal::kEmptyString) {
    uploadurl_->clear();
  }
  clear_has_uploadurl();
}
inline const ::std::string& TDCSBoardInfo::uploadurl() const {
  return *uploadurl_;
}
inline void TDCSBoardInfo::set_uploadurl(const ::std::string& value) {
  set_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    uploadurl_ = new ::std::string;
  }
  uploadurl_->assign(value);
}
inline void TDCSBoardInfo::set_uploadurl(const char* value) {
  set_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    uploadurl_ = new ::std::string;
  }
  uploadurl_->assign(value);
}
inline void TDCSBoardInfo::set_uploadurl(const char* value, size_t size) {
  set_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    uploadurl_ = new ::std::string;
  }
  uploadurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSBoardInfo::mutable_uploadurl() {
  set_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    uploadurl_ = new ::std::string;
  }
  return uploadurl_;
}
inline ::std::string* TDCSBoardInfo::release_uploadurl() {
  clear_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uploadurl_;
    uploadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSBoardInfo::set_allocated_uploadurl(::std::string* uploadurl) {
  if (uploadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete uploadurl_;
  }
  if (uploadurl) {
    set_has_uploadurl();
    uploadurl_ = uploadurl;
  } else {
    clear_has_uploadurl();
    uploadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string downloadurl = 11;
inline bool TDCSBoardInfo::has_downloadurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TDCSBoardInfo::set_has_downloadurl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TDCSBoardInfo::clear_has_downloadurl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TDCSBoardInfo::clear_downloadurl() {
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    downloadurl_->clear();
  }
  clear_has_downloadurl();
}
inline const ::std::string& TDCSBoardInfo::downloadurl() const {
  return *downloadurl_;
}
inline void TDCSBoardInfo::set_downloadurl(const ::std::string& value) {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  downloadurl_->assign(value);
}
inline void TDCSBoardInfo::set_downloadurl(const char* value) {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  downloadurl_->assign(value);
}
inline void TDCSBoardInfo::set_downloadurl(const char* value, size_t size) {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  downloadurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSBoardInfo::mutable_downloadurl() {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  return downloadurl_;
}
inline ::std::string* TDCSBoardInfo::release_downloadurl() {
  clear_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = downloadurl_;
    downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSBoardInfo::set_allocated_downloadurl(::std::string* downloadurl) {
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (downloadurl) {
    set_has_downloadurl();
    downloadurl_ = downloadurl;
  } else {
    clear_has_downloadurl();
    downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string elementurl = 12;
inline bool TDCSBoardInfo::has_elementurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TDCSBoardInfo::set_has_elementurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TDCSBoardInfo::clear_has_elementurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TDCSBoardInfo::clear_elementurl() {
  if (elementurl_ != &::google::protobuf::internal::kEmptyString) {
    elementurl_->clear();
  }
  clear_has_elementurl();
}
inline const ::std::string& TDCSBoardInfo::elementurl() const {
  return *elementurl_;
}
inline void TDCSBoardInfo::set_elementurl(const ::std::string& value) {
  set_has_elementurl();
  if (elementurl_ == &::google::protobuf::internal::kEmptyString) {
    elementurl_ = new ::std::string;
  }
  elementurl_->assign(value);
}
inline void TDCSBoardInfo::set_elementurl(const char* value) {
  set_has_elementurl();
  if (elementurl_ == &::google::protobuf::internal::kEmptyString) {
    elementurl_ = new ::std::string;
  }
  elementurl_->assign(value);
}
inline void TDCSBoardInfo::set_elementurl(const char* value, size_t size) {
  set_has_elementurl();
  if (elementurl_ == &::google::protobuf::internal::kEmptyString) {
    elementurl_ = new ::std::string;
  }
  elementurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSBoardInfo::mutable_elementurl() {
  set_has_elementurl();
  if (elementurl_ == &::google::protobuf::internal::kEmptyString) {
    elementurl_ = new ::std::string;
  }
  return elementurl_;
}
inline ::std::string* TDCSBoardInfo::release_elementurl() {
  clear_has_elementurl();
  if (elementurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = elementurl_;
    elementurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSBoardInfo::set_allocated_elementurl(::std::string* elementurl) {
  if (elementurl_ != &::google::protobuf::internal::kEmptyString) {
    delete elementurl_;
  }
  if (elementurl) {
    set_has_elementurl();
    elementurl_ = elementurl;
  } else {
    clear_has_elementurl();
    elementurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pageid = 13;
inline bool TDCSBoardInfo::has_pageid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TDCSBoardInfo::set_has_pageid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TDCSBoardInfo::clear_has_pageid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TDCSBoardInfo::clear_pageid() {
  pageid_ = 0u;
  clear_has_pageid();
}
inline ::google::protobuf::uint32 TDCSBoardInfo::pageid() const {
  return pageid_;
}
inline void TDCSBoardInfo::set_pageid(::google::protobuf::uint32 value) {
  set_has_pageid();
  pageid_ = value;
}

// optional uint32 wbserialnumber = 14;
inline bool TDCSBoardInfo::has_wbserialnumber() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TDCSBoardInfo::set_has_wbserialnumber() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TDCSBoardInfo::clear_has_wbserialnumber() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TDCSBoardInfo::clear_wbserialnumber() {
  wbserialnumber_ = 0u;
  clear_has_wbserialnumber();
}
inline ::google::protobuf::uint32 TDCSBoardInfo::wbserialnumber() const {
  return wbserialnumber_;
}
inline void TDCSBoardInfo::set_wbserialnumber(::google::protobuf::uint32 value) {
  set_has_wbserialnumber();
  wbserialnumber_ = value;
}

// -------------------------------------------------------------------

// TDCSNewWhiteBoard

// optional string confe164 = 1;
inline bool TDCSNewWhiteBoard::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSNewWhiteBoard::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSNewWhiteBoard::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSNewWhiteBoard::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSNewWhiteBoard::confe164() const {
  return *confe164_;
}
inline void TDCSNewWhiteBoard::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSNewWhiteBoard::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSNewWhiteBoard::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSNewWhiteBoard::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSNewWhiteBoard::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSNewWhiteBoard::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.TDCSBoardInfo boardinfo = 2;
inline bool TDCSNewWhiteBoard::has_boardinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSNewWhiteBoard::set_has_boardinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSNewWhiteBoard::clear_has_boardinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSNewWhiteBoard::clear_boardinfo() {
  if (boardinfo_ != NULL) boardinfo_->::mt::TDCSBoardInfo::Clear();
  clear_has_boardinfo();
}
inline const ::mt::TDCSBoardInfo& TDCSNewWhiteBoard::boardinfo() const {
  return boardinfo_ != NULL ? *boardinfo_ : *default_instance_->boardinfo_;
}
inline ::mt::TDCSBoardInfo* TDCSNewWhiteBoard::mutable_boardinfo() {
  set_has_boardinfo();
  if (boardinfo_ == NULL) boardinfo_ = new ::mt::TDCSBoardInfo;
  return boardinfo_;
}
inline ::mt::TDCSBoardInfo* TDCSNewWhiteBoard::release_boardinfo() {
  clear_has_boardinfo();
  ::mt::TDCSBoardInfo* temp = boardinfo_;
  boardinfo_ = NULL;
  return temp;
}
inline void TDCSNewWhiteBoard::set_allocated_boardinfo(::mt::TDCSBoardInfo* boardinfo) {
  delete boardinfo_;
  boardinfo_ = boardinfo;
  if (boardinfo) {
    set_has_boardinfo();
  } else {
    clear_has_boardinfo();
  }
}

// -------------------------------------------------------------------

// TDCSGetAllBoard

// optional string confe164 = 1;
inline bool TDCSGetAllBoard::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSGetAllBoard::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSGetAllBoard::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSGetAllBoard::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSGetAllBoard::confe164() const {
  return *confe164_;
}
inline void TDCSGetAllBoard::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSGetAllBoard::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSGetAllBoard::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSGetAllBoard::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSGetAllBoard::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSGetAllBoard::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .mt.TDCSBoardInfo boardinfo = 2;
inline int TDCSGetAllBoard::boardinfo_size() const {
  return boardinfo_.size();
}
inline void TDCSGetAllBoard::clear_boardinfo() {
  boardinfo_.Clear();
}
inline const ::mt::TDCSBoardInfo& TDCSGetAllBoard::boardinfo(int index) const {
  return boardinfo_.Get(index);
}
inline ::mt::TDCSBoardInfo* TDCSGetAllBoard::mutable_boardinfo(int index) {
  return boardinfo_.Mutable(index);
}
inline ::mt::TDCSBoardInfo* TDCSGetAllBoard::add_boardinfo() {
  return boardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSBoardInfo >&
TDCSGetAllBoard::boardinfo() const {
  return boardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSBoardInfo >*
TDCSGetAllBoard::mutable_boardinfo() {
  return &boardinfo_;
}

// -------------------------------------------------------------------

// TDCSSwitchReq

// optional string confe164 = 1;
inline bool TDCSSwitchReq::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSSwitchReq::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSSwitchReq::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSSwitchReq::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSSwitchReq::confe164() const {
  return *confe164_;
}
inline void TDCSSwitchReq::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSSwitchReq::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSSwitchReq::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSSwitchReq::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSSwitchReq::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSSwitchReq::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tabid = 2;
inline bool TDCSSwitchReq::has_tabid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSSwitchReq::set_has_tabid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSSwitchReq::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSSwitchReq::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSSwitchReq::tabid() const {
  return *tabid_;
}
inline void TDCSSwitchReq::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSSwitchReq::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSSwitchReq::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSSwitchReq::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSSwitchReq::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSSwitchReq::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 wbpageid = 3;
inline bool TDCSSwitchReq::has_wbpageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSSwitchReq::set_has_wbpageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSSwitchReq::clear_has_wbpageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSSwitchReq::clear_wbpageid() {
  wbpageid_ = 0u;
  clear_has_wbpageid();
}
inline ::google::protobuf::uint32 TDCSSwitchReq::wbpageid() const {
  return wbpageid_;
}
inline void TDCSSwitchReq::set_wbpageid(::google::protobuf::uint32 value) {
  set_has_wbpageid();
  wbpageid_ = value;
}

// -------------------------------------------------------------------

// TDCSUserInfo

// optional string confe164 = 1;
inline bool TDCSUserInfo::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSUserInfo::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSUserInfo::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSUserInfo::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSUserInfo::confe164() const {
  return *confe164_;
}
inline void TDCSUserInfo::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSUserInfo::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSUserInfo::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSUserInfo::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSUserInfo::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSUserInfo::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string confname = 2;
inline bool TDCSUserInfo::has_confname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSUserInfo::set_has_confname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSUserInfo::clear_has_confname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSUserInfo::clear_confname() {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& TDCSUserInfo::confname() const {
  return *confname_;
}
inline void TDCSUserInfo::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSUserInfo::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSUserInfo::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSUserInfo::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  return confname_;
}
inline ::std::string* TDCSUserInfo::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSUserInfo::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.TDCSConfUserInfo userinfo = 3;
inline bool TDCSUserInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSUserInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSUserInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSUserInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::mt::TDCSConfUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::mt::TDCSConfUserInfo& TDCSUserInfo::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::mt::TDCSConfUserInfo* TDCSUserInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::mt::TDCSConfUserInfo;
  return userinfo_;
}
inline ::mt::TDCSConfUserInfo* TDCSUserInfo::release_userinfo() {
  clear_has_userinfo();
  ::mt::TDCSConfUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TDCSUserInfo::set_allocated_userinfo(::mt::TDCSConfUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// -------------------------------------------------------------------

// TDCSUserInfos

// optional string confe164 = 1;
inline bool TDCSUserInfos::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSUserInfos::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSUserInfos::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSUserInfos::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSUserInfos::confe164() const {
  return *confe164_;
}
inline void TDCSUserInfos::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSUserInfos::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSUserInfos::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSUserInfos::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSUserInfos::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSUserInfos::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string confname = 2;
inline bool TDCSUserInfos::has_confname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSUserInfos::set_has_confname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSUserInfos::clear_has_confname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSUserInfos::clear_confname() {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& TDCSUserInfos::confname() const {
  return *confname_;
}
inline void TDCSUserInfos::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSUserInfos::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
}
inline void TDCSUserInfos::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSUserInfos::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    confname_ = new ::std::string;
  }
  return confname_;
}
inline ::std::string* TDCSUserInfos::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSUserInfos::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::kEmptyString) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .mt.TDCSConfUserInfo userinfo = 3;
inline int TDCSUserInfos::userinfo_size() const {
  return userinfo_.size();
}
inline void TDCSUserInfos::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::mt::TDCSConfUserInfo& TDCSUserInfos::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::mt::TDCSConfUserInfo* TDCSUserInfos::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline ::mt::TDCSConfUserInfo* TDCSUserInfos::add_userinfo() {
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
TDCSUserInfos::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
TDCSUserInfos::mutable_userinfo() {
  return &userinfo_;
}

// -------------------------------------------------------------------

// TDCSUserRole

// optional string confe164 = 1;
inline bool TDCSUserRole::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSUserRole::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSUserRole::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSUserRole::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSUserRole::confe164() const {
  return *confe164_;
}
inline void TDCSUserRole::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSUserRole::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSUserRole::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSUserRole::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSUserRole::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSUserRole::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .mt.TDCSConfUserInfo userinfolist = 2;
inline int TDCSUserRole::userinfolist_size() const {
  return userinfolist_.size();
}
inline void TDCSUserRole::clear_userinfolist() {
  userinfolist_.Clear();
}
inline const ::mt::TDCSConfUserInfo& TDCSUserRole::userinfolist(int index) const {
  return userinfolist_.Get(index);
}
inline ::mt::TDCSConfUserInfo* TDCSUserRole::mutable_userinfolist(int index) {
  return userinfolist_.Mutable(index);
}
inline ::mt::TDCSConfUserInfo* TDCSUserRole::add_userinfolist() {
  return userinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >&
TDCSUserRole::userinfolist() const {
  return userinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSConfUserInfo >*
TDCSUserRole::mutable_userinfolist() {
  return &userinfolist_;
}

// -------------------------------------------------------------------

// TDCSWbPoint

// optional int32 posx = 1;
inline bool TDCSWbPoint::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbPoint::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbPoint::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbPoint::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TDCSWbPoint::posx() const {
  return posx_;
}
inline void TDCSWbPoint::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
}

// optional int32 posy = 2;
inline bool TDCSWbPoint::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbPoint::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbPoint::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbPoint::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TDCSWbPoint::posy() const {
  return posy_;
}
inline void TDCSWbPoint::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
}

// -------------------------------------------------------------------

// TDCSWbEntity

// optional string entityid = 1;
inline bool TDCSWbEntity::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbEntity::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbEntity::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbEntity::clear_entityid() {
  if (entityid_ != &::google::protobuf::internal::kEmptyString) {
    entityid_->clear();
  }
  clear_has_entityid();
}
inline const ::std::string& TDCSWbEntity::entityid() const {
  return *entityid_;
}
inline void TDCSWbEntity::set_entityid(const ::std::string& value) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(value);
}
inline void TDCSWbEntity::set_entityid(const char* value) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(value);
}
inline void TDCSWbEntity::set_entityid(const char* value, size_t size) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbEntity::mutable_entityid() {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  return entityid_;
}
inline ::std::string* TDCSWbEntity::release_entityid() {
  clear_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entityid_;
    entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbEntity::set_allocated_entityid(::std::string* entityid) {
  if (entityid_ != &::google::protobuf::internal::kEmptyString) {
    delete entityid_;
  }
  if (entityid) {
    set_has_entityid();
    entityid_ = entityid;
  } else {
    clear_has_entityid();
    entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool lock = 2;
inline bool TDCSWbEntity::has_lock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbEntity::set_has_lock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbEntity::clear_has_lock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbEntity::clear_lock() {
  lock_ = false;
  clear_has_lock();
}
inline bool TDCSWbEntity::lock() const {
  return lock_;
}
inline void TDCSWbEntity::set_lock(bool value) {
  set_has_lock();
  lock_ = value;
}

// -------------------------------------------------------------------

// TDCSWbLine

// optional .mt.TDCSWbEntity entity = 1;
inline bool TDCSWbLine::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbLine::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbLine::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbLine::clear_entity() {
  if (entity_ != NULL) entity_->::mt::TDCSWbEntity::Clear();
  clear_has_entity();
}
inline const ::mt::TDCSWbEntity& TDCSWbLine::entity() const {
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbLine::mutable_entity() {
  set_has_entity();
  if (entity_ == NULL) entity_ = new ::mt::TDCSWbEntity;
  return entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbLine::release_entity() {
  clear_has_entity();
  ::mt::TDCSWbEntity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void TDCSWbLine::set_allocated_entity(::mt::TDCSWbEntity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
}

// optional .mt.TDCSWbPoint beginpt = 2;
inline bool TDCSWbLine::has_beginpt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbLine::set_has_beginpt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbLine::clear_has_beginpt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbLine::clear_beginpt() {
  if (beginpt_ != NULL) beginpt_->::mt::TDCSWbPoint::Clear();
  clear_has_beginpt();
}
inline const ::mt::TDCSWbPoint& TDCSWbLine::beginpt() const {
  return beginpt_ != NULL ? *beginpt_ : *default_instance_->beginpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbLine::mutable_beginpt() {
  set_has_beginpt();
  if (beginpt_ == NULL) beginpt_ = new ::mt::TDCSWbPoint;
  return beginpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbLine::release_beginpt() {
  clear_has_beginpt();
  ::mt::TDCSWbPoint* temp = beginpt_;
  beginpt_ = NULL;
  return temp;
}
inline void TDCSWbLine::set_allocated_beginpt(::mt::TDCSWbPoint* beginpt) {
  delete beginpt_;
  beginpt_ = beginpt;
  if (beginpt) {
    set_has_beginpt();
  } else {
    clear_has_beginpt();
  }
}

// optional .mt.TDCSWbPoint endpt = 3;
inline bool TDCSWbLine::has_endpt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbLine::set_has_endpt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbLine::clear_has_endpt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbLine::clear_endpt() {
  if (endpt_ != NULL) endpt_->::mt::TDCSWbPoint::Clear();
  clear_has_endpt();
}
inline const ::mt::TDCSWbPoint& TDCSWbLine::endpt() const {
  return endpt_ != NULL ? *endpt_ : *default_instance_->endpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbLine::mutable_endpt() {
  set_has_endpt();
  if (endpt_ == NULL) endpt_ = new ::mt::TDCSWbPoint;
  return endpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbLine::release_endpt() {
  clear_has_endpt();
  ::mt::TDCSWbPoint* temp = endpt_;
  endpt_ = NULL;
  return temp;
}
inline void TDCSWbLine::set_allocated_endpt(::mt::TDCSWbPoint* endpt) {
  delete endpt_;
  endpt_ = endpt;
  if (endpt) {
    set_has_endpt();
  } else {
    clear_has_endpt();
  }
}

// optional uint32 linewidth = 4;
inline bool TDCSWbLine::has_linewidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbLine::set_has_linewidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbLine::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbLine::clear_linewidth() {
  linewidth_ = 0u;
  clear_has_linewidth();
}
inline ::google::protobuf::uint32 TDCSWbLine::linewidth() const {
  return linewidth_;
}
inline void TDCSWbLine::set_linewidth(::google::protobuf::uint32 value) {
  set_has_linewidth();
  linewidth_ = value;
}

// optional uint32 rgb = 5;
inline bool TDCSWbLine::has_rgb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSWbLine::set_has_rgb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSWbLine::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSWbLine::clear_rgb() {
  rgb_ = 0u;
  clear_has_rgb();
}
inline ::google::protobuf::uint32 TDCSWbLine::rgb() const {
  return rgb_;
}
inline void TDCSWbLine::set_rgb(::google::protobuf::uint32 value) {
  set_has_rgb();
  rgb_ = value;
}

// -------------------------------------------------------------------

// TDCSWbCircle

// optional .mt.TDCSWbEntity entity = 1;
inline bool TDCSWbCircle::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbCircle::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbCircle::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbCircle::clear_entity() {
  if (entity_ != NULL) entity_->::mt::TDCSWbEntity::Clear();
  clear_has_entity();
}
inline const ::mt::TDCSWbEntity& TDCSWbCircle::entity() const {
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbCircle::mutable_entity() {
  set_has_entity();
  if (entity_ == NULL) entity_ = new ::mt::TDCSWbEntity;
  return entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbCircle::release_entity() {
  clear_has_entity();
  ::mt::TDCSWbEntity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void TDCSWbCircle::set_allocated_entity(::mt::TDCSWbEntity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
}

// optional .mt.TDCSWbPoint beginpt = 2;
inline bool TDCSWbCircle::has_beginpt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbCircle::set_has_beginpt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbCircle::clear_has_beginpt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbCircle::clear_beginpt() {
  if (beginpt_ != NULL) beginpt_->::mt::TDCSWbPoint::Clear();
  clear_has_beginpt();
}
inline const ::mt::TDCSWbPoint& TDCSWbCircle::beginpt() const {
  return beginpt_ != NULL ? *beginpt_ : *default_instance_->beginpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbCircle::mutable_beginpt() {
  set_has_beginpt();
  if (beginpt_ == NULL) beginpt_ = new ::mt::TDCSWbPoint;
  return beginpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbCircle::release_beginpt() {
  clear_has_beginpt();
  ::mt::TDCSWbPoint* temp = beginpt_;
  beginpt_ = NULL;
  return temp;
}
inline void TDCSWbCircle::set_allocated_beginpt(::mt::TDCSWbPoint* beginpt) {
  delete beginpt_;
  beginpt_ = beginpt;
  if (beginpt) {
    set_has_beginpt();
  } else {
    clear_has_beginpt();
  }
}

// optional .mt.TDCSWbPoint endpt = 3;
inline bool TDCSWbCircle::has_endpt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbCircle::set_has_endpt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbCircle::clear_has_endpt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbCircle::clear_endpt() {
  if (endpt_ != NULL) endpt_->::mt::TDCSWbPoint::Clear();
  clear_has_endpt();
}
inline const ::mt::TDCSWbPoint& TDCSWbCircle::endpt() const {
  return endpt_ != NULL ? *endpt_ : *default_instance_->endpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbCircle::mutable_endpt() {
  set_has_endpt();
  if (endpt_ == NULL) endpt_ = new ::mt::TDCSWbPoint;
  return endpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbCircle::release_endpt() {
  clear_has_endpt();
  ::mt::TDCSWbPoint* temp = endpt_;
  endpt_ = NULL;
  return temp;
}
inline void TDCSWbCircle::set_allocated_endpt(::mt::TDCSWbPoint* endpt) {
  delete endpt_;
  endpt_ = endpt;
  if (endpt) {
    set_has_endpt();
  } else {
    clear_has_endpt();
  }
}

// optional uint32 linewidth = 4;
inline bool TDCSWbCircle::has_linewidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbCircle::set_has_linewidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbCircle::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbCircle::clear_linewidth() {
  linewidth_ = 0u;
  clear_has_linewidth();
}
inline ::google::protobuf::uint32 TDCSWbCircle::linewidth() const {
  return linewidth_;
}
inline void TDCSWbCircle::set_linewidth(::google::protobuf::uint32 value) {
  set_has_linewidth();
  linewidth_ = value;
}

// optional uint32 rgb = 5;
inline bool TDCSWbCircle::has_rgb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSWbCircle::set_has_rgb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSWbCircle::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSWbCircle::clear_rgb() {
  rgb_ = 0u;
  clear_has_rgb();
}
inline ::google::protobuf::uint32 TDCSWbCircle::rgb() const {
  return rgb_;
}
inline void TDCSWbCircle::set_rgb(::google::protobuf::uint32 value) {
  set_has_rgb();
  rgb_ = value;
}

// -------------------------------------------------------------------

// TDCSWbRectangle

// optional .mt.TDCSWbEntity entity = 1;
inline bool TDCSWbRectangle::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbRectangle::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbRectangle::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbRectangle::clear_entity() {
  if (entity_ != NULL) entity_->::mt::TDCSWbEntity::Clear();
  clear_has_entity();
}
inline const ::mt::TDCSWbEntity& TDCSWbRectangle::entity() const {
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbRectangle::mutable_entity() {
  set_has_entity();
  if (entity_ == NULL) entity_ = new ::mt::TDCSWbEntity;
  return entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbRectangle::release_entity() {
  clear_has_entity();
  ::mt::TDCSWbEntity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void TDCSWbRectangle::set_allocated_entity(::mt::TDCSWbEntity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
}

// optional .mt.TDCSWbPoint beginpt = 2;
inline bool TDCSWbRectangle::has_beginpt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbRectangle::set_has_beginpt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbRectangle::clear_has_beginpt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbRectangle::clear_beginpt() {
  if (beginpt_ != NULL) beginpt_->::mt::TDCSWbPoint::Clear();
  clear_has_beginpt();
}
inline const ::mt::TDCSWbPoint& TDCSWbRectangle::beginpt() const {
  return beginpt_ != NULL ? *beginpt_ : *default_instance_->beginpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbRectangle::mutable_beginpt() {
  set_has_beginpt();
  if (beginpt_ == NULL) beginpt_ = new ::mt::TDCSWbPoint;
  return beginpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbRectangle::release_beginpt() {
  clear_has_beginpt();
  ::mt::TDCSWbPoint* temp = beginpt_;
  beginpt_ = NULL;
  return temp;
}
inline void TDCSWbRectangle::set_allocated_beginpt(::mt::TDCSWbPoint* beginpt) {
  delete beginpt_;
  beginpt_ = beginpt;
  if (beginpt) {
    set_has_beginpt();
  } else {
    clear_has_beginpt();
  }
}

// optional .mt.TDCSWbPoint endpt = 3;
inline bool TDCSWbRectangle::has_endpt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbRectangle::set_has_endpt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbRectangle::clear_has_endpt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbRectangle::clear_endpt() {
  if (endpt_ != NULL) endpt_->::mt::TDCSWbPoint::Clear();
  clear_has_endpt();
}
inline const ::mt::TDCSWbPoint& TDCSWbRectangle::endpt() const {
  return endpt_ != NULL ? *endpt_ : *default_instance_->endpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbRectangle::mutable_endpt() {
  set_has_endpt();
  if (endpt_ == NULL) endpt_ = new ::mt::TDCSWbPoint;
  return endpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbRectangle::release_endpt() {
  clear_has_endpt();
  ::mt::TDCSWbPoint* temp = endpt_;
  endpt_ = NULL;
  return temp;
}
inline void TDCSWbRectangle::set_allocated_endpt(::mt::TDCSWbPoint* endpt) {
  delete endpt_;
  endpt_ = endpt;
  if (endpt) {
    set_has_endpt();
  } else {
    clear_has_endpt();
  }
}

// optional uint32 linewidth = 4;
inline bool TDCSWbRectangle::has_linewidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbRectangle::set_has_linewidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbRectangle::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbRectangle::clear_linewidth() {
  linewidth_ = 0u;
  clear_has_linewidth();
}
inline ::google::protobuf::uint32 TDCSWbRectangle::linewidth() const {
  return linewidth_;
}
inline void TDCSWbRectangle::set_linewidth(::google::protobuf::uint32 value) {
  set_has_linewidth();
  linewidth_ = value;
}

// optional uint32 rgb = 5;
inline bool TDCSWbRectangle::has_rgb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSWbRectangle::set_has_rgb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSWbRectangle::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSWbRectangle::clear_rgb() {
  rgb_ = 0u;
  clear_has_rgb();
}
inline ::google::protobuf::uint32 TDCSWbRectangle::rgb() const {
  return rgb_;
}
inline void TDCSWbRectangle::set_rgb(::google::protobuf::uint32 value) {
  set_has_rgb();
  rgb_ = value;
}

// -------------------------------------------------------------------

// TDCSWbPencil

// optional .mt.TDCSWbEntity entity = 1;
inline bool TDCSWbPencil::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbPencil::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbPencil::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbPencil::clear_entity() {
  if (entity_ != NULL) entity_->::mt::TDCSWbEntity::Clear();
  clear_has_entity();
}
inline const ::mt::TDCSWbEntity& TDCSWbPencil::entity() const {
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbPencil::mutable_entity() {
  set_has_entity();
  if (entity_ == NULL) entity_ = new ::mt::TDCSWbEntity;
  return entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbPencil::release_entity() {
  clear_has_entity();
  ::mt::TDCSWbEntity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void TDCSWbPencil::set_allocated_entity(::mt::TDCSWbEntity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
}

// repeated .mt.TDCSWbPoint list = 2;
inline int TDCSWbPencil::list_size() const {
  return list_.size();
}
inline void TDCSWbPencil::clear_list() {
  list_.Clear();
}
inline const ::mt::TDCSWbPoint& TDCSWbPencil::list(int index) const {
  return list_.Get(index);
}
inline ::mt::TDCSWbPoint* TDCSWbPencil::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::mt::TDCSWbPoint* TDCSWbPencil::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >&
TDCSWbPencil::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >*
TDCSWbPencil::mutable_list() {
  return &list_;
}

// optional uint32 linewidth = 3;
inline bool TDCSWbPencil::has_linewidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbPencil::set_has_linewidth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbPencil::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbPencil::clear_linewidth() {
  linewidth_ = 0u;
  clear_has_linewidth();
}
inline ::google::protobuf::uint32 TDCSWbPencil::linewidth() const {
  return linewidth_;
}
inline void TDCSWbPencil::set_linewidth(::google::protobuf::uint32 value) {
  set_has_linewidth();
  linewidth_ = value;
}

// optional uint32 rgb = 4;
inline bool TDCSWbPencil::has_rgb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbPencil::set_has_rgb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbPencil::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbPencil::clear_rgb() {
  rgb_ = 0u;
  clear_has_rgb();
}
inline ::google::protobuf::uint32 TDCSWbPencil::rgb() const {
  return rgb_;
}
inline void TDCSWbPencil::set_rgb(::google::protobuf::uint32 value) {
  set_has_rgb();
  rgb_ = value;
}

// -------------------------------------------------------------------

// TDCSWbColorPen

// optional .mt.TDCSWbEntity entity = 1;
inline bool TDCSWbColorPen::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbColorPen::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbColorPen::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbColorPen::clear_entity() {
  if (entity_ != NULL) entity_->::mt::TDCSWbEntity::Clear();
  clear_has_entity();
}
inline const ::mt::TDCSWbEntity& TDCSWbColorPen::entity() const {
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbColorPen::mutable_entity() {
  set_has_entity();
  if (entity_ == NULL) entity_ = new ::mt::TDCSWbEntity;
  return entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbColorPen::release_entity() {
  clear_has_entity();
  ::mt::TDCSWbEntity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void TDCSWbColorPen::set_allocated_entity(::mt::TDCSWbEntity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
}

// repeated .mt.TDCSWbPoint list = 2;
inline int TDCSWbColorPen::list_size() const {
  return list_.size();
}
inline void TDCSWbColorPen::clear_list() {
  list_.Clear();
}
inline const ::mt::TDCSWbPoint& TDCSWbColorPen::list(int index) const {
  return list_.Get(index);
}
inline ::mt::TDCSWbPoint* TDCSWbColorPen::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::mt::TDCSWbPoint* TDCSWbColorPen::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >&
TDCSWbColorPen::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >*
TDCSWbColorPen::mutable_list() {
  return &list_;
}

// optional uint32 linewidth = 3;
inline bool TDCSWbColorPen::has_linewidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbColorPen::set_has_linewidth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbColorPen::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbColorPen::clear_linewidth() {
  linewidth_ = 0u;
  clear_has_linewidth();
}
inline ::google::protobuf::uint32 TDCSWbColorPen::linewidth() const {
  return linewidth_;
}
inline void TDCSWbColorPen::set_linewidth(::google::protobuf::uint32 value) {
  set_has_linewidth();
  linewidth_ = value;
}

// optional uint32 rgb = 4;
inline bool TDCSWbColorPen::has_rgb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbColorPen::set_has_rgb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbColorPen::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbColorPen::clear_rgb() {
  rgb_ = 0u;
  clear_has_rgb();
}
inline ::google::protobuf::uint32 TDCSWbColorPen::rgb() const {
  return rgb_;
}
inline void TDCSWbColorPen::set_rgb(::google::protobuf::uint32 value) {
  set_has_rgb();
  rgb_ = value;
}

// -------------------------------------------------------------------

// TDCSWbImage

// optional .mt.TDCSWbEntity entity = 1;
inline bool TDCSWbImage::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbImage::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbImage::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbImage::clear_entity() {
  if (entity_ != NULL) entity_->::mt::TDCSWbEntity::Clear();
  clear_has_entity();
}
inline const ::mt::TDCSWbEntity& TDCSWbImage::entity() const {
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbImage::mutable_entity() {
  set_has_entity();
  if (entity_ == NULL) entity_ = new ::mt::TDCSWbEntity;
  return entity_;
}
inline ::mt::TDCSWbEntity* TDCSWbImage::release_entity() {
  clear_has_entity();
  ::mt::TDCSWbEntity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void TDCSWbImage::set_allocated_entity(::mt::TDCSWbEntity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
}

// optional .mt.TDCSWbPoint boardpt = 2;
inline bool TDCSWbImage::has_boardpt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbImage::set_has_boardpt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbImage::clear_has_boardpt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbImage::clear_boardpt() {
  if (boardpt_ != NULL) boardpt_->::mt::TDCSWbPoint::Clear();
  clear_has_boardpt();
}
inline const ::mt::TDCSWbPoint& TDCSWbImage::boardpt() const {
  return boardpt_ != NULL ? *boardpt_ : *default_instance_->boardpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbImage::mutable_boardpt() {
  set_has_boardpt();
  if (boardpt_ == NULL) boardpt_ = new ::mt::TDCSWbPoint;
  return boardpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbImage::release_boardpt() {
  clear_has_boardpt();
  ::mt::TDCSWbPoint* temp = boardpt_;
  boardpt_ = NULL;
  return temp;
}
inline void TDCSWbImage::set_allocated_boardpt(::mt::TDCSWbPoint* boardpt) {
  delete boardpt_;
  boardpt_ = boardpt;
  if (boardpt) {
    set_has_boardpt();
  } else {
    clear_has_boardpt();
  }
}

// optional uint32 width = 3;
inline bool TDCSWbImage::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbImage::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbImage::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 TDCSWbImage::width() const {
  return width_;
}
inline void TDCSWbImage::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// optional uint32 height = 4;
inline bool TDCSWbImage::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbImage::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbImage::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 TDCSWbImage::height() const {
  return height_;
}
inline void TDCSWbImage::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// optional .mt.EmWbImageState networkstate = 5;
inline bool TDCSWbImage::has_networkstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSWbImage::set_has_networkstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSWbImage::clear_has_networkstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSWbImage::clear_networkstate() {
  networkstate_ = 0;
  clear_has_networkstate();
}
inline ::mt::EmWbImageState TDCSWbImage::networkstate() const {
  return static_cast< ::mt::EmWbImageState >(networkstate_);
}
inline void TDCSWbImage::set_networkstate(::mt::EmWbImageState value) {
  assert(::mt::EmWbImageState_IsValid(value));
  set_has_networkstate();
  networkstate_ = value;
}

// optional string filename = 6;
inline bool TDCSWbImage::has_filename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDCSWbImage::set_has_filename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDCSWbImage::clear_has_filename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDCSWbImage::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& TDCSWbImage::filename() const {
  return *filename_;
}
inline void TDCSWbImage::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void TDCSWbImage::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void TDCSWbImage::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbImage::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* TDCSWbImage::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbImage::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool bkimg = 7;
inline bool TDCSWbImage::has_bkimg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TDCSWbImage::set_has_bkimg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TDCSWbImage::clear_has_bkimg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TDCSWbImage::clear_bkimg() {
  bkimg_ = false;
  clear_has_bkimg();
}
inline bool TDCSWbImage::bkimg() const {
  return bkimg_;
}
inline void TDCSWbImage::set_bkimg(bool value) {
  set_has_bkimg();
  bkimg_ = value;
}

// -------------------------------------------------------------------

// TDCSWbLineOperInfo

// optional string tabid = 1;
inline bool TDCSWbLineOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbLineOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbLineOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbLineOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbLineOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbLineOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbLineOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbLineOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbLineOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbLineOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbLineOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbLineOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbLineOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbLineOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbLineOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbLineOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbLineOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional .mt.TDCSWbLine line = 3;
inline bool TDCSWbLineOperInfo::has_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbLineOperInfo::set_has_line() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbLineOperInfo::clear_has_line() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbLineOperInfo::clear_line() {
  if (line_ != NULL) line_->::mt::TDCSWbLine::Clear();
  clear_has_line();
}
inline const ::mt::TDCSWbLine& TDCSWbLineOperInfo::line() const {
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
inline ::mt::TDCSWbLine* TDCSWbLineOperInfo::mutable_line() {
  set_has_line();
  if (line_ == NULL) line_ = new ::mt::TDCSWbLine;
  return line_;
}
inline ::mt::TDCSWbLine* TDCSWbLineOperInfo::release_line() {
  clear_has_line();
  ::mt::TDCSWbLine* temp = line_;
  line_ = NULL;
  return temp;
}
inline void TDCSWbLineOperInfo::set_allocated_line(::mt::TDCSWbLine* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
}

// -------------------------------------------------------------------

// TDCSWbCircleOperInfo

// optional string tabid = 1;
inline bool TDCSWbCircleOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbCircleOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbCircleOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbCircleOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbCircleOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbCircleOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbCircleOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbCircleOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbCircleOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbCircleOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbCircleOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbCircleOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbCircleOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbCircleOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbCircleOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbCircleOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbCircleOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional .mt.TDCSWbCircle circle = 3;
inline bool TDCSWbCircleOperInfo::has_circle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbCircleOperInfo::set_has_circle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbCircleOperInfo::clear_has_circle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbCircleOperInfo::clear_circle() {
  if (circle_ != NULL) circle_->::mt::TDCSWbCircle::Clear();
  clear_has_circle();
}
inline const ::mt::TDCSWbCircle& TDCSWbCircleOperInfo::circle() const {
  return circle_ != NULL ? *circle_ : *default_instance_->circle_;
}
inline ::mt::TDCSWbCircle* TDCSWbCircleOperInfo::mutable_circle() {
  set_has_circle();
  if (circle_ == NULL) circle_ = new ::mt::TDCSWbCircle;
  return circle_;
}
inline ::mt::TDCSWbCircle* TDCSWbCircleOperInfo::release_circle() {
  clear_has_circle();
  ::mt::TDCSWbCircle* temp = circle_;
  circle_ = NULL;
  return temp;
}
inline void TDCSWbCircleOperInfo::set_allocated_circle(::mt::TDCSWbCircle* circle) {
  delete circle_;
  circle_ = circle;
  if (circle) {
    set_has_circle();
  } else {
    clear_has_circle();
  }
}

// -------------------------------------------------------------------

// TDCSWbRectangleOperInfo

// optional string tabid = 1;
inline bool TDCSWbRectangleOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbRectangleOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbRectangleOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbRectangleOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbRectangleOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbRectangleOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbRectangleOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbRectangleOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbRectangleOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbRectangleOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbRectangleOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbRectangleOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbRectangleOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbRectangleOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbRectangleOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbRectangleOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbRectangleOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional .mt.TDCSWbRectangle rectangle = 3;
inline bool TDCSWbRectangleOperInfo::has_rectangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbRectangleOperInfo::set_has_rectangle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbRectangleOperInfo::clear_has_rectangle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbRectangleOperInfo::clear_rectangle() {
  if (rectangle_ != NULL) rectangle_->::mt::TDCSWbRectangle::Clear();
  clear_has_rectangle();
}
inline const ::mt::TDCSWbRectangle& TDCSWbRectangleOperInfo::rectangle() const {
  return rectangle_ != NULL ? *rectangle_ : *default_instance_->rectangle_;
}
inline ::mt::TDCSWbRectangle* TDCSWbRectangleOperInfo::mutable_rectangle() {
  set_has_rectangle();
  if (rectangle_ == NULL) rectangle_ = new ::mt::TDCSWbRectangle;
  return rectangle_;
}
inline ::mt::TDCSWbRectangle* TDCSWbRectangleOperInfo::release_rectangle() {
  clear_has_rectangle();
  ::mt::TDCSWbRectangle* temp = rectangle_;
  rectangle_ = NULL;
  return temp;
}
inline void TDCSWbRectangleOperInfo::set_allocated_rectangle(::mt::TDCSWbRectangle* rectangle) {
  delete rectangle_;
  rectangle_ = rectangle;
  if (rectangle) {
    set_has_rectangle();
  } else {
    clear_has_rectangle();
  }
}

// -------------------------------------------------------------------

// TDCSWbPencilOperInfo

// optional string tabid = 1;
inline bool TDCSWbPencilOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbPencilOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbPencilOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbPencilOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbPencilOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbPencilOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbPencilOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbPencilOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbPencilOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbPencilOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbPencilOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbPencilOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbPencilOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbPencilOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbPencilOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbPencilOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbPencilOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional bool finished = 3;
inline bool TDCSWbPencilOperInfo::has_finished() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbPencilOperInfo::set_has_finished() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbPencilOperInfo::clear_has_finished() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbPencilOperInfo::clear_finished() {
  finished_ = false;
  clear_has_finished();
}
inline bool TDCSWbPencilOperInfo::finished() const {
  return finished_;
}
inline void TDCSWbPencilOperInfo::set_finished(bool value) {
  set_has_finished();
  finished_ = value;
}

// optional .mt.TDCSWbPencil pencil = 4;
inline bool TDCSWbPencilOperInfo::has_pencil() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbPencilOperInfo::set_has_pencil() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbPencilOperInfo::clear_has_pencil() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbPencilOperInfo::clear_pencil() {
  if (pencil_ != NULL) pencil_->::mt::TDCSWbPencil::Clear();
  clear_has_pencil();
}
inline const ::mt::TDCSWbPencil& TDCSWbPencilOperInfo::pencil() const {
  return pencil_ != NULL ? *pencil_ : *default_instance_->pencil_;
}
inline ::mt::TDCSWbPencil* TDCSWbPencilOperInfo::mutable_pencil() {
  set_has_pencil();
  if (pencil_ == NULL) pencil_ = new ::mt::TDCSWbPencil;
  return pencil_;
}
inline ::mt::TDCSWbPencil* TDCSWbPencilOperInfo::release_pencil() {
  clear_has_pencil();
  ::mt::TDCSWbPencil* temp = pencil_;
  pencil_ = NULL;
  return temp;
}
inline void TDCSWbPencilOperInfo::set_allocated_pencil(::mt::TDCSWbPencil* pencil) {
  delete pencil_;
  pencil_ = pencil;
  if (pencil) {
    set_has_pencil();
  } else {
    clear_has_pencil();
  }
}

// -------------------------------------------------------------------

// TDCSWbColorPenOperInfo

// optional string tabid = 1;
inline bool TDCSWbColorPenOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbColorPenOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbColorPenOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbColorPenOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbColorPenOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbColorPenOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbColorPenOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbColorPenOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbColorPenOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbColorPenOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbColorPenOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbColorPenOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbColorPenOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbColorPenOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbColorPenOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbColorPenOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbColorPenOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional .mt.TDCSWbColorPen coloepen = 3;
inline bool TDCSWbColorPenOperInfo::has_coloepen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbColorPenOperInfo::set_has_coloepen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbColorPenOperInfo::clear_has_coloepen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbColorPenOperInfo::clear_coloepen() {
  if (coloepen_ != NULL) coloepen_->::mt::TDCSWbColorPen::Clear();
  clear_has_coloepen();
}
inline const ::mt::TDCSWbColorPen& TDCSWbColorPenOperInfo::coloepen() const {
  return coloepen_ != NULL ? *coloepen_ : *default_instance_->coloepen_;
}
inline ::mt::TDCSWbColorPen* TDCSWbColorPenOperInfo::mutable_coloepen() {
  set_has_coloepen();
  if (coloepen_ == NULL) coloepen_ = new ::mt::TDCSWbColorPen;
  return coloepen_;
}
inline ::mt::TDCSWbColorPen* TDCSWbColorPenOperInfo::release_coloepen() {
  clear_has_coloepen();
  ::mt::TDCSWbColorPen* temp = coloepen_;
  coloepen_ = NULL;
  return temp;
}
inline void TDCSWbColorPenOperInfo::set_allocated_coloepen(::mt::TDCSWbColorPen* coloepen) {
  delete coloepen_;
  coloepen_ = coloepen;
  if (coloepen) {
    set_has_coloepen();
  } else {
    clear_has_coloepen();
  }
}

// -------------------------------------------------------------------

// TDCSWbImageOperInfo

// optional string tabid = 1;
inline bool TDCSWbImageOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbImageOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbImageOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbImageOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbImageOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbImageOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbImageOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbImageOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbImageOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbImageOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbImageOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbImageOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbImageOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbImageOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbImageOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbImageOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbImageOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional .mt.TDCSWbImage image = 3;
inline bool TDCSWbImageOperInfo::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbImageOperInfo::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbImageOperInfo::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbImageOperInfo::clear_image() {
  if (image_ != NULL) image_->::mt::TDCSWbImage::Clear();
  clear_has_image();
}
inline const ::mt::TDCSWbImage& TDCSWbImageOperInfo::image() const {
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::mt::TDCSWbImage* TDCSWbImageOperInfo::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::mt::TDCSWbImage;
  return image_;
}
inline ::mt::TDCSWbImage* TDCSWbImageOperInfo::release_image() {
  clear_has_image();
  ::mt::TDCSWbImage* temp = image_;
  image_ = NULL;
  return temp;
}
inline void TDCSWbImageOperInfo::set_allocated_image(::mt::TDCSWbImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
}

// -------------------------------------------------------------------

// TDCSWbTabPageIdInfo

// optional string tabid = 1;
inline bool TDCSWbTabPageIdInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbTabPageIdInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbTabPageIdInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbTabPageIdInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbTabPageIdInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbTabPageIdInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbTabPageIdInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbTabPageIdInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbTabPageIdInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbTabPageIdInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbTabPageIdInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbTabPageIdInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbTabPageIdInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbTabPageIdInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbTabPageIdInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbTabPageIdInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbTabPageIdInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// -------------------------------------------------------------------

// TDCSWbRemovePageIdInfo

// optional string tabid = 1;
inline bool TDCSWbRemovePageIdInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbRemovePageIdInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbRemovePageIdInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbRemovePageIdInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbRemovePageIdInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbRemovePageIdInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbRemovePageIdInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbRemovePageIdInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbRemovePageIdInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbRemovePageIdInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbRemovePageIdInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nexttabpageid = 2;
inline bool TDCSWbRemovePageIdInfo::has_nexttabpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbRemovePageIdInfo::set_has_nexttabpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbRemovePageIdInfo::clear_has_nexttabpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbRemovePageIdInfo::clear_nexttabpageid() {
  if (nexttabpageid_ != &::google::protobuf::internal::kEmptyString) {
    nexttabpageid_->clear();
  }
  clear_has_nexttabpageid();
}
inline const ::std::string& TDCSWbRemovePageIdInfo::nexttabpageid() const {
  return *nexttabpageid_;
}
inline void TDCSWbRemovePageIdInfo::set_nexttabpageid(const ::std::string& value) {
  set_has_nexttabpageid();
  if (nexttabpageid_ == &::google::protobuf::internal::kEmptyString) {
    nexttabpageid_ = new ::std::string;
  }
  nexttabpageid_->assign(value);
}
inline void TDCSWbRemovePageIdInfo::set_nexttabpageid(const char* value) {
  set_has_nexttabpageid();
  if (nexttabpageid_ == &::google::protobuf::internal::kEmptyString) {
    nexttabpageid_ = new ::std::string;
  }
  nexttabpageid_->assign(value);
}
inline void TDCSWbRemovePageIdInfo::set_nexttabpageid(const char* value, size_t size) {
  set_has_nexttabpageid();
  if (nexttabpageid_ == &::google::protobuf::internal::kEmptyString) {
    nexttabpageid_ = new ::std::string;
  }
  nexttabpageid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbRemovePageIdInfo::mutable_nexttabpageid() {
  set_has_nexttabpageid();
  if (nexttabpageid_ == &::google::protobuf::internal::kEmptyString) {
    nexttabpageid_ = new ::std::string;
  }
  return nexttabpageid_;
}
inline ::std::string* TDCSWbRemovePageIdInfo::release_nexttabpageid() {
  clear_has_nexttabpageid();
  if (nexttabpageid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nexttabpageid_;
    nexttabpageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbRemovePageIdInfo::set_allocated_nexttabpageid(::std::string* nexttabpageid) {
  if (nexttabpageid_ != &::google::protobuf::internal::kEmptyString) {
    delete nexttabpageid_;
  }
  if (nexttabpageid) {
    set_has_nexttabpageid();
    nexttabpageid_ = nexttabpageid;
  } else {
    clear_has_nexttabpageid();
    nexttabpageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TDCSWbAddSubPageInfo

// optional string tabid = 1;
inline bool TDCSWbAddSubPageInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbAddSubPageInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbAddSubPageInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbAddSubPageInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbAddSubPageInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbAddSubPageInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbAddSubPageInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbAddSubPageInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbAddSubPageInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbAddSubPageInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbAddSubPageInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpagecount = 2;
inline bool TDCSWbAddSubPageInfo::has_subpagecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbAddSubPageInfo::set_has_subpagecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbAddSubPageInfo::clear_has_subpagecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbAddSubPageInfo::clear_subpagecount() {
  subpagecount_ = 0u;
  clear_has_subpagecount();
}
inline ::google::protobuf::uint32 TDCSWbAddSubPageInfo::subpagecount() const {
  return subpagecount_;
}
inline void TDCSWbAddSubPageInfo::set_subpagecount(::google::protobuf::uint32 value) {
  set_has_subpagecount();
  subpagecount_ = value;
}

// -------------------------------------------------------------------

// TDCSWbSwitchPageInfo

// optional string tabid = 1;
inline bool TDCSWbSwitchPageInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbSwitchPageInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbSwitchPageInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbSwitchPageInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbSwitchPageInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbSwitchPageInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbSwitchPageInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbSwitchPageInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbSwitchPageInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbSwitchPageInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbSwitchPageInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbSwitchPageInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbSwitchPageInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbSwitchPageInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbSwitchPageInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbSwitchPageInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbSwitchPageInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// -------------------------------------------------------------------

// TDCSWbEraseOperInfo

// optional string tabid = 1;
inline bool TDCSWbEraseOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbEraseOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbEraseOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbEraseOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbEraseOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbEraseOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbEraseOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbEraseOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbEraseOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbEraseOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbEraseOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbEraseOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbEraseOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbEraseOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbEraseOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbEraseOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbEraseOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional .mt.TDCSWbPoint beginpt = 3;
inline bool TDCSWbEraseOperInfo::has_beginpt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbEraseOperInfo::set_has_beginpt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbEraseOperInfo::clear_has_beginpt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbEraseOperInfo::clear_beginpt() {
  if (beginpt_ != NULL) beginpt_->::mt::TDCSWbPoint::Clear();
  clear_has_beginpt();
}
inline const ::mt::TDCSWbPoint& TDCSWbEraseOperInfo::beginpt() const {
  return beginpt_ != NULL ? *beginpt_ : *default_instance_->beginpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbEraseOperInfo::mutable_beginpt() {
  set_has_beginpt();
  if (beginpt_ == NULL) beginpt_ = new ::mt::TDCSWbPoint;
  return beginpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbEraseOperInfo::release_beginpt() {
  clear_has_beginpt();
  ::mt::TDCSWbPoint* temp = beginpt_;
  beginpt_ = NULL;
  return temp;
}
inline void TDCSWbEraseOperInfo::set_allocated_beginpt(::mt::TDCSWbPoint* beginpt) {
  delete beginpt_;
  beginpt_ = beginpt;
  if (beginpt) {
    set_has_beginpt();
  } else {
    clear_has_beginpt();
  }
}

// optional .mt.TDCSWbPoint endpt = 4;
inline bool TDCSWbEraseOperInfo::has_endpt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbEraseOperInfo::set_has_endpt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbEraseOperInfo::clear_has_endpt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbEraseOperInfo::clear_endpt() {
  if (endpt_ != NULL) endpt_->::mt::TDCSWbPoint::Clear();
  clear_has_endpt();
}
inline const ::mt::TDCSWbPoint& TDCSWbEraseOperInfo::endpt() const {
  return endpt_ != NULL ? *endpt_ : *default_instance_->endpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbEraseOperInfo::mutable_endpt() {
  set_has_endpt();
  if (endpt_ == NULL) endpt_ = new ::mt::TDCSWbPoint;
  return endpt_;
}
inline ::mt::TDCSWbPoint* TDCSWbEraseOperInfo::release_endpt() {
  clear_has_endpt();
  ::mt::TDCSWbPoint* temp = endpt_;
  endpt_ = NULL;
  return temp;
}
inline void TDCSWbEraseOperInfo::set_allocated_endpt(::mt::TDCSWbPoint* endpt) {
  delete endpt_;
  endpt_ = endpt;
  if (endpt) {
    set_has_endpt();
  } else {
    clear_has_endpt();
  }
}

// optional bool nexvision = 5;
inline bool TDCSWbEraseOperInfo::has_nexvision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSWbEraseOperInfo::set_has_nexvision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSWbEraseOperInfo::clear_has_nexvision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSWbEraseOperInfo::clear_nexvision() {
  nexvision_ = false;
  clear_has_nexvision();
}
inline bool TDCSWbEraseOperInfo::nexvision() const {
  return nexvision_;
}
inline void TDCSWbEraseOperInfo::set_nexvision(bool value) {
  set_has_nexvision();
  nexvision_ = value;
}

// -------------------------------------------------------------------

// TDCSWbZoomInfo

// optional string tabid = 1;
inline bool TDCSWbZoomInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbZoomInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbZoomInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbZoomInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbZoomInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbZoomInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbZoomInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbZoomInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbZoomInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbZoomInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbZoomInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zoom = 2;
inline bool TDCSWbZoomInfo::has_zoom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbZoomInfo::set_has_zoom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbZoomInfo::clear_has_zoom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbZoomInfo::clear_zoom() {
  zoom_ = 0u;
  clear_has_zoom();
}
inline ::google::protobuf::uint32 TDCSWbZoomInfo::zoom() const {
  return zoom_;
}
inline void TDCSWbZoomInfo::set_zoom(::google::protobuf::uint32 value) {
  set_has_zoom();
  zoom_ = value;
}

// -------------------------------------------------------------------

// TDCSOperReq

// optional .mt.EmDcsOper oper = 1;
inline bool TDCSOperReq::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSOperReq::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSOperReq::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSOperReq::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::mt::EmDcsOper TDCSOperReq::oper() const {
  return static_cast< ::mt::EmDcsOper >(oper_);
}
inline void TDCSOperReq::set_oper(::mt::EmDcsOper value) {
  assert(::mt::EmDcsOper_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional string confe164 = 2;
inline bool TDCSOperReq::has_confe164() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSOperReq::set_has_confe164() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSOperReq::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSOperReq::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSOperReq::confe164() const {
  return *confe164_;
}
inline void TDCSOperReq::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSOperReq::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSOperReq::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSOperReq::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSOperReq::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSOperReq::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tabid = 3;
inline bool TDCSOperReq::has_tabid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSOperReq::set_has_tabid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSOperReq::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSOperReq::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSOperReq::tabid() const {
  return *tabid_;
}
inline void TDCSOperReq::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSOperReq::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSOperReq::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSOperReq::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSOperReq::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSOperReq::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 wbpageid = 4;
inline bool TDCSOperReq::has_wbpageid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSOperReq::set_has_wbpageid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSOperReq::clear_has_wbpageid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSOperReq::clear_wbpageid() {
  wbpageid_ = 0u;
  clear_has_wbpageid();
}
inline ::google::protobuf::uint32 TDCSOperReq::wbpageid() const {
  return wbpageid_;
}
inline void TDCSOperReq::set_wbpageid(::google::protobuf::uint32 value) {
  set_has_wbpageid();
  wbpageid_ = value;
}

// -------------------------------------------------------------------

// TDCSRegInfo

// optional string ip = 1;
inline bool TDCSRegInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSRegInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSRegInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSRegInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& TDCSRegInfo::ip() const {
  return *ip_;
}
inline void TDCSRegInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TDCSRegInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TDCSRegInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSRegInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* TDCSRegInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSRegInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 2;
inline bool TDCSRegInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSRegInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSRegInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSRegInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 TDCSRegInfo::port() const {
  return port_;
}
inline void TDCSRegInfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional .mt.EmMtDcsType mttype = 3;
inline bool TDCSRegInfo::has_mttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSRegInfo::set_has_mttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSRegInfo::clear_has_mttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSRegInfo::clear_mttype() {
  mttype_ = 0;
  clear_has_mttype();
}
inline ::mt::EmMtDcsType TDCSRegInfo::mttype() const {
  return static_cast< ::mt::EmMtDcsType >(mttype_);
}
inline void TDCSRegInfo::set_mttype(::mt::EmMtDcsType value) {
  assert(::mt::EmMtDcsType_IsValid(value));
  set_has_mttype();
  mttype_ = value;
}

// -------------------------------------------------------------------

// TDCSScrollScreenInfo

// optional string tabid = 1;
inline bool TDCSScrollScreenInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSScrollScreenInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSScrollScreenInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSScrollScreenInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSScrollScreenInfo::tabid() const {
  return *tabid_;
}
inline void TDCSScrollScreenInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSScrollScreenInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSScrollScreenInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSScrollScreenInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSScrollScreenInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSScrollScreenInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSScrollScreenInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSScrollScreenInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSScrollScreenInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSScrollScreenInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSScrollScreenInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSScrollScreenInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional .mt.TDCSWbPoint point = 3;
inline bool TDCSScrollScreenInfo::has_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSScrollScreenInfo::set_has_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSScrollScreenInfo::clear_has_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSScrollScreenInfo::clear_point() {
  if (point_ != NULL) point_->::mt::TDCSWbPoint::Clear();
  clear_has_point();
}
inline const ::mt::TDCSWbPoint& TDCSScrollScreenInfo::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::mt::TDCSWbPoint* TDCSScrollScreenInfo::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::mt::TDCSWbPoint;
  return point_;
}
inline ::mt::TDCSWbPoint* TDCSScrollScreenInfo::release_point() {
  clear_has_point();
  ::mt::TDCSWbPoint* temp = point_;
  point_ = NULL;
  return temp;
}
inline void TDCSScrollScreenInfo::set_allocated_point(::mt::TDCSWbPoint* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
}

// -------------------------------------------------------------------

// TDCSOperContent

// optional .mt.EmDcsOper oper = 1;
inline bool TDCSOperContent::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSOperContent::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSOperContent::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSOperContent::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::mt::EmDcsOper TDCSOperContent::oper() const {
  return static_cast< ::mt::EmDcsOper >(oper_);
}
inline void TDCSOperContent::set_oper(::mt::EmDcsOper value) {
  assert(::mt::EmDcsOper_IsValid(value));
  set_has_oper();
  oper_ = value;
}

// optional uint32 msgid = 2;
inline bool TDCSOperContent::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSOperContent::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSOperContent::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSOperContent::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 TDCSOperContent::msgid() const {
  return msgid_;
}
inline void TDCSOperContent::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional string tabid = 3;
inline bool TDCSOperContent::has_tabid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSOperContent::set_has_tabid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSOperContent::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSOperContent::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSOperContent::tabid() const {
  return *tabid_;
}
inline void TDCSOperContent::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSOperContent::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSOperContent::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSOperContent::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSOperContent::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSOperContent::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 wbpageid = 4;
inline bool TDCSOperContent::has_wbpageid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSOperContent::set_has_wbpageid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSOperContent::clear_has_wbpageid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSOperContent::clear_wbpageid() {
  wbpageid_ = 0u;
  clear_has_wbpageid();
}
inline ::google::protobuf::uint32 TDCSOperContent::wbpageid() const {
  return wbpageid_;
}
inline void TDCSOperContent::set_wbpageid(::google::protobuf::uint32 value) {
  set_has_wbpageid();
  wbpageid_ = value;
}

// optional string confe164 = 5;
inline bool TDCSOperContent::has_confe164() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSOperContent::set_has_confe164() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSOperContent::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSOperContent::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSOperContent::confe164() const {
  return *confe164_;
}
inline void TDCSOperContent::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSOperContent::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSOperContent::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSOperContent::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSOperContent::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSOperContent::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 msgsequence = 6;
inline bool TDCSOperContent::has_msgsequence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDCSOperContent::set_has_msgsequence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDCSOperContent::clear_has_msgsequence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDCSOperContent::clear_msgsequence() {
  msgsequence_ = 0u;
  clear_has_msgsequence();
}
inline ::google::protobuf::uint32 TDCSOperContent::msgsequence() const {
  return msgsequence_;
}
inline void TDCSOperContent::set_msgsequence(::google::protobuf::uint32 value) {
  set_has_msgsequence();
  msgsequence_ = value;
}

// optional string frome164 = 7;
inline bool TDCSOperContent::has_frome164() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TDCSOperContent::set_has_frome164() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TDCSOperContent::clear_has_frome164() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TDCSOperContent::clear_frome164() {
  if (frome164_ != &::google::protobuf::internal::kEmptyString) {
    frome164_->clear();
  }
  clear_has_frome164();
}
inline const ::std::string& TDCSOperContent::frome164() const {
  return *frome164_;
}
inline void TDCSOperContent::set_frome164(const ::std::string& value) {
  set_has_frome164();
  if (frome164_ == &::google::protobuf::internal::kEmptyString) {
    frome164_ = new ::std::string;
  }
  frome164_->assign(value);
}
inline void TDCSOperContent::set_frome164(const char* value) {
  set_has_frome164();
  if (frome164_ == &::google::protobuf::internal::kEmptyString) {
    frome164_ = new ::std::string;
  }
  frome164_->assign(value);
}
inline void TDCSOperContent::set_frome164(const char* value, size_t size) {
  set_has_frome164();
  if (frome164_ == &::google::protobuf::internal::kEmptyString) {
    frome164_ = new ::std::string;
  }
  frome164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSOperContent::mutable_frome164() {
  set_has_frome164();
  if (frome164_ == &::google::protobuf::internal::kEmptyString) {
    frome164_ = new ::std::string;
  }
  return frome164_;
}
inline ::std::string* TDCSOperContent::release_frome164() {
  clear_has_frome164();
  if (frome164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frome164_;
    frome164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSOperContent::set_allocated_frome164(::std::string* frome164) {
  if (frome164_ != &::google::protobuf::internal::kEmptyString) {
    delete frome164_;
  }
  if (frome164) {
    set_has_frome164();
    frome164_ = frome164;
  } else {
    clear_has_frome164();
    frome164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TDCSImageUrl

// optional string confe164 = 1;
inline bool TDCSImageUrl::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSImageUrl::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSImageUrl::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSImageUrl::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSImageUrl::confe164() const {
  return *confe164_;
}
inline void TDCSImageUrl::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSImageUrl::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSImageUrl::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSImageUrl::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSImageUrl::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSImageUrl::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tabid = 2;
inline bool TDCSImageUrl::has_tabid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSImageUrl::set_has_tabid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSImageUrl::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSImageUrl::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSImageUrl::tabid() const {
  return *tabid_;
}
inline void TDCSImageUrl::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSImageUrl::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSImageUrl::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSImageUrl::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSImageUrl::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSImageUrl::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pageid = 3;
inline bool TDCSImageUrl::has_pageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSImageUrl::set_has_pageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSImageUrl::clear_has_pageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSImageUrl::clear_pageid() {
  pageid_ = 0u;
  clear_has_pageid();
}
inline ::google::protobuf::uint32 TDCSImageUrl::pageid() const {
  return pageid_;
}
inline void TDCSImageUrl::set_pageid(::google::protobuf::uint32 value) {
  set_has_pageid();
  pageid_ = value;
}

// optional string picurl = 4;
inline bool TDCSImageUrl::has_picurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSImageUrl::set_has_picurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSImageUrl::clear_has_picurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSImageUrl::clear_picurl() {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    picurl_->clear();
  }
  clear_has_picurl();
}
inline const ::std::string& TDCSImageUrl::picurl() const {
  return *picurl_;
}
inline void TDCSImageUrl::set_picurl(const ::std::string& value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void TDCSImageUrl::set_picurl(const char* value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void TDCSImageUrl::set_picurl(const char* value, size_t size) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSImageUrl::mutable_picurl() {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  return picurl_;
}
inline ::std::string* TDCSImageUrl::release_picurl() {
  clear_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picurl_;
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSImageUrl::set_allocated_picurl(::std::string* picurl) {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (picurl) {
    set_has_picurl();
    picurl_ = picurl;
  } else {
    clear_has_picurl();
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wbpicentityid = 5;
inline bool TDCSImageUrl::has_wbpicentityid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSImageUrl::set_has_wbpicentityid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSImageUrl::clear_has_wbpicentityid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSImageUrl::clear_wbpicentityid() {
  if (wbpicentityid_ != &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_->clear();
  }
  clear_has_wbpicentityid();
}
inline const ::std::string& TDCSImageUrl::wbpicentityid() const {
  return *wbpicentityid_;
}
inline void TDCSImageUrl::set_wbpicentityid(const ::std::string& value) {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  wbpicentityid_->assign(value);
}
inline void TDCSImageUrl::set_wbpicentityid(const char* value) {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  wbpicentityid_->assign(value);
}
inline void TDCSImageUrl::set_wbpicentityid(const char* value, size_t size) {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  wbpicentityid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSImageUrl::mutable_wbpicentityid() {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  return wbpicentityid_;
}
inline ::std::string* TDCSImageUrl::release_wbpicentityid() {
  clear_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wbpicentityid_;
    wbpicentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSImageUrl::set_allocated_wbpicentityid(::std::string* wbpicentityid) {
  if (wbpicentityid_ != &::google::protobuf::internal::kEmptyString) {
    delete wbpicentityid_;
  }
  if (wbpicentityid) {
    set_has_wbpicentityid();
    wbpicentityid_ = wbpicentityid;
  } else {
    clear_has_wbpicentityid();
    wbpicentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TDCSConnectResult

// optional bool success = 1;
inline bool TDCSConnectResult::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSConnectResult::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSConnectResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSConnectResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TDCSConnectResult::success() const {
  return success_;
}
inline void TDCSConnectResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional .mt.EmDcsConnectErrCode errorcode = 2;
inline bool TDCSConnectResult::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSConnectResult::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSConnectResult::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSConnectResult::clear_errorcode() {
  errorcode_ = 1;
  clear_has_errorcode();
}
inline ::mt::EmDcsConnectErrCode TDCSConnectResult::errorcode() const {
  return static_cast< ::mt::EmDcsConnectErrCode >(errorcode_);
}
inline void TDCSConnectResult::set_errorcode(::mt::EmDcsConnectErrCode value) {
  assert(::mt::EmDcsConnectErrCode_IsValid(value));
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// TDCSRejectJoinConf

// optional string confe164 = 1;
inline bool TDCSRejectJoinConf::has_confe164() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSRejectJoinConf::set_has_confe164() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSRejectJoinConf::clear_has_confe164() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSRejectJoinConf::clear_confe164() {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    confe164_->clear();
  }
  clear_has_confe164();
}
inline const ::std::string& TDCSRejectJoinConf::confe164() const {
  return *confe164_;
}
inline void TDCSRejectJoinConf::set_confe164(const ::std::string& value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSRejectJoinConf::set_confe164(const char* value) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(value);
}
inline void TDCSRejectJoinConf::set_confe164(const char* value, size_t size) {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  confe164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSRejectJoinConf::mutable_confe164() {
  set_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    confe164_ = new ::std::string;
  }
  return confe164_;
}
inline ::std::string* TDCSRejectJoinConf::release_confe164() {
  clear_has_confe164();
  if (confe164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confe164_;
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSRejectJoinConf::set_allocated_confe164(::std::string* confe164) {
  if (confe164_ != &::google::protobuf::internal::kEmptyString) {
    delete confe164_;
  }
  if (confe164) {
    set_has_confe164();
    confe164_ = confe164;
  } else {
    clear_has_confe164();
    confe164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.EmDcsAdpRejectJoinConfCode reason = 2;
inline bool TDCSRejectJoinConf::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSRejectJoinConf::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSRejectJoinConf::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSRejectJoinConf::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::mt::EmDcsAdpRejectJoinConfCode TDCSRejectJoinConf::reason() const {
  return static_cast< ::mt::EmDcsAdpRejectJoinConfCode >(reason_);
}
inline void TDCSRejectJoinConf::set_reason(::mt::EmDcsAdpRejectJoinConfCode value) {
  assert(::mt::EmDcsAdpRejectJoinConfCode_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// TDCSFileLoadResult

// optional bool success = 1;
inline bool TDCSFileLoadResult::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSFileLoadResult::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSFileLoadResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSFileLoadResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TDCSFileLoadResult::success() const {
  return success_;
}
inline void TDCSFileLoadResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional bool elementfile = 2;
inline bool TDCSFileLoadResult::has_elementfile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSFileLoadResult::set_has_elementfile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSFileLoadResult::clear_has_elementfile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSFileLoadResult::clear_elementfile() {
  elementfile_ = false;
  clear_has_elementfile();
}
inline bool TDCSFileLoadResult::elementfile() const {
  return elementfile_;
}
inline void TDCSFileLoadResult::set_elementfile(bool value) {
  set_has_elementfile();
  elementfile_ = value;
}

// optional string filenamepath = 3;
inline bool TDCSFileLoadResult::has_filenamepath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSFileLoadResult::set_has_filenamepath() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSFileLoadResult::clear_has_filenamepath() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSFileLoadResult::clear_filenamepath() {
  if (filenamepath_ != &::google::protobuf::internal::kEmptyString) {
    filenamepath_->clear();
  }
  clear_has_filenamepath();
}
inline const ::std::string& TDCSFileLoadResult::filenamepath() const {
  return *filenamepath_;
}
inline void TDCSFileLoadResult::set_filenamepath(const ::std::string& value) {
  set_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    filenamepath_ = new ::std::string;
  }
  filenamepath_->assign(value);
}
inline void TDCSFileLoadResult::set_filenamepath(const char* value) {
  set_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    filenamepath_ = new ::std::string;
  }
  filenamepath_->assign(value);
}
inline void TDCSFileLoadResult::set_filenamepath(const char* value, size_t size) {
  set_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    filenamepath_ = new ::std::string;
  }
  filenamepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSFileLoadResult::mutable_filenamepath() {
  set_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    filenamepath_ = new ::std::string;
  }
  return filenamepath_;
}
inline ::std::string* TDCSFileLoadResult::release_filenamepath() {
  clear_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamepath_;
    filenamepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSFileLoadResult::set_allocated_filenamepath(::std::string* filenamepath) {
  if (filenamepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamepath_;
  }
  if (filenamepath) {
    set_has_filenamepath();
    filenamepath_ = filenamepath;
  } else {
    clear_has_filenamepath();
    filenamepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wbpicentityid = 4;
inline bool TDCSFileLoadResult::has_wbpicentityid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSFileLoadResult::set_has_wbpicentityid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSFileLoadResult::clear_has_wbpicentityid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSFileLoadResult::clear_wbpicentityid() {
  if (wbpicentityid_ != &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_->clear();
  }
  clear_has_wbpicentityid();
}
inline const ::std::string& TDCSFileLoadResult::wbpicentityid() const {
  return *wbpicentityid_;
}
inline void TDCSFileLoadResult::set_wbpicentityid(const ::std::string& value) {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  wbpicentityid_->assign(value);
}
inline void TDCSFileLoadResult::set_wbpicentityid(const char* value) {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  wbpicentityid_->assign(value);
}
inline void TDCSFileLoadResult::set_wbpicentityid(const char* value, size_t size) {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  wbpicentityid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSFileLoadResult::mutable_wbpicentityid() {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  return wbpicentityid_;
}
inline ::std::string* TDCSFileLoadResult::release_wbpicentityid() {
  clear_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wbpicentityid_;
    wbpicentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSFileLoadResult::set_allocated_wbpicentityid(::std::string* wbpicentityid) {
  if (wbpicentityid_ != &::google::protobuf::internal::kEmptyString) {
    delete wbpicentityid_;
  }
  if (wbpicentityid) {
    set_has_wbpicentityid();
    wbpicentityid_ = wbpicentityid;
  } else {
    clear_has_wbpicentityid();
    wbpicentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tabid = 5;
inline bool TDCSFileLoadResult::has_tabid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSFileLoadResult::set_has_tabid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSFileLoadResult::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSFileLoadResult::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSFileLoadResult::tabid() const {
  return *tabid_;
}
inline void TDCSFileLoadResult::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSFileLoadResult::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSFileLoadResult::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSFileLoadResult::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSFileLoadResult::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSFileLoadResult::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TDCSFileInfo

// optional string filenamepath = 1;
inline bool TDCSFileInfo::has_filenamepath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSFileInfo::set_has_filenamepath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSFileInfo::clear_has_filenamepath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSFileInfo::clear_filenamepath() {
  if (filenamepath_ != &::google::protobuf::internal::kEmptyString) {
    filenamepath_->clear();
  }
  clear_has_filenamepath();
}
inline const ::std::string& TDCSFileInfo::filenamepath() const {
  return *filenamepath_;
}
inline void TDCSFileInfo::set_filenamepath(const ::std::string& value) {
  set_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    filenamepath_ = new ::std::string;
  }
  filenamepath_->assign(value);
}
inline void TDCSFileInfo::set_filenamepath(const char* value) {
  set_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    filenamepath_ = new ::std::string;
  }
  filenamepath_->assign(value);
}
inline void TDCSFileInfo::set_filenamepath(const char* value, size_t size) {
  set_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    filenamepath_ = new ::std::string;
  }
  filenamepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSFileInfo::mutable_filenamepath() {
  set_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    filenamepath_ = new ::std::string;
  }
  return filenamepath_;
}
inline ::std::string* TDCSFileInfo::release_filenamepath() {
  clear_has_filenamepath();
  if (filenamepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamepath_;
    filenamepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSFileInfo::set_allocated_filenamepath(::std::string* filenamepath) {
  if (filenamepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamepath_;
  }
  if (filenamepath) {
    set_has_filenamepath();
    filenamepath_ = filenamepath;
  } else {
    clear_has_filenamepath();
    filenamepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wbpicentityid = 2;
inline bool TDCSFileInfo::has_wbpicentityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSFileInfo::set_has_wbpicentityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSFileInfo::clear_has_wbpicentityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSFileInfo::clear_wbpicentityid() {
  if (wbpicentityid_ != &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_->clear();
  }
  clear_has_wbpicentityid();
}
inline const ::std::string& TDCSFileInfo::wbpicentityid() const {
  return *wbpicentityid_;
}
inline void TDCSFileInfo::set_wbpicentityid(const ::std::string& value) {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  wbpicentityid_->assign(value);
}
inline void TDCSFileInfo::set_wbpicentityid(const char* value) {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  wbpicentityid_->assign(value);
}
inline void TDCSFileInfo::set_wbpicentityid(const char* value, size_t size) {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  wbpicentityid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSFileInfo::mutable_wbpicentityid() {
  set_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    wbpicentityid_ = new ::std::string;
  }
  return wbpicentityid_;
}
inline ::std::string* TDCSFileInfo::release_wbpicentityid() {
  clear_has_wbpicentityid();
  if (wbpicentityid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wbpicentityid_;
    wbpicentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSFileInfo::set_allocated_wbpicentityid(::std::string* wbpicentityid) {
  if (wbpicentityid_ != &::google::protobuf::internal::kEmptyString) {
    delete wbpicentityid_;
  }
  if (wbpicentityid) {
    set_has_wbpicentityid();
    wbpicentityid_ = wbpicentityid;
  } else {
    clear_has_wbpicentityid();
    wbpicentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool elementcachefile = 3;
inline bool TDCSFileInfo::has_elementcachefile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSFileInfo::set_has_elementcachefile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSFileInfo::clear_has_elementcachefile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSFileInfo::clear_elementcachefile() {
  elementcachefile_ = false;
  clear_has_elementcachefile();
}
inline bool TDCSFileInfo::elementcachefile() const {
  return elementcachefile_;
}
inline void TDCSFileInfo::set_elementcachefile(bool value) {
  set_has_elementcachefile();
  elementcachefile_ = value;
}

// optional string tabid = 4;
inline bool TDCSFileInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSFileInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSFileInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSFileInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSFileInfo::tabid() const {
  return *tabid_;
}
inline void TDCSFileInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSFileInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSFileInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSFileInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSFileInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSFileInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TDCSWbDisPlayInfo

// optional string tabid = 1;
inline bool TDCSWbDisPlayInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbDisPlayInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbDisPlayInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbDisPlayInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbDisPlayInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbDisPlayInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbDisPlayInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbDisPlayInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbDisPlayInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbDisPlayInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbDisPlayInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbDisPlayInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbDisPlayInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbDisPlayInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbDisPlayInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbDisPlayInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbDisPlayInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// repeated string matrixvalue = 3;
inline int TDCSWbDisPlayInfo::matrixvalue_size() const {
  return matrixvalue_.size();
}
inline void TDCSWbDisPlayInfo::clear_matrixvalue() {
  matrixvalue_.Clear();
}
inline const ::std::string& TDCSWbDisPlayInfo::matrixvalue(int index) const {
  return matrixvalue_.Get(index);
}
inline ::std::string* TDCSWbDisPlayInfo::mutable_matrixvalue(int index) {
  return matrixvalue_.Mutable(index);
}
inline void TDCSWbDisPlayInfo::set_matrixvalue(int index, const ::std::string& value) {
  matrixvalue_.Mutable(index)->assign(value);
}
inline void TDCSWbDisPlayInfo::set_matrixvalue(int index, const char* value) {
  matrixvalue_.Mutable(index)->assign(value);
}
inline void TDCSWbDisPlayInfo::set_matrixvalue(int index, const char* value, size_t size) {
  matrixvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbDisPlayInfo::add_matrixvalue() {
  return matrixvalue_.Add();
}
inline void TDCSWbDisPlayInfo::add_matrixvalue(const ::std::string& value) {
  matrixvalue_.Add()->assign(value);
}
inline void TDCSWbDisPlayInfo::add_matrixvalue(const char* value) {
  matrixvalue_.Add()->assign(value);
}
inline void TDCSWbDisPlayInfo::add_matrixvalue(const char* value, size_t size) {
  matrixvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TDCSWbDisPlayInfo::matrixvalue() const {
  return matrixvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TDCSWbDisPlayInfo::mutable_matrixvalue() {
  return &matrixvalue_;
}

// -------------------------------------------------------------------

// TDCSWbReginEraseOperInfo

// optional string tabid = 1;
inline bool TDCSWbReginEraseOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbReginEraseOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbReginEraseOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbReginEraseOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbReginEraseOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbReginEraseOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbReginEraseOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbReginEraseOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbReginEraseOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbReginEraseOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbReginEraseOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbReginEraseOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbReginEraseOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbReginEraseOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbReginEraseOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbReginEraseOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbReginEraseOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional string graphsid = 3;
inline bool TDCSWbReginEraseOperInfo::has_graphsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbReginEraseOperInfo::set_has_graphsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbReginEraseOperInfo::clear_has_graphsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbReginEraseOperInfo::clear_graphsid() {
  if (graphsid_ != &::google::protobuf::internal::kEmptyString) {
    graphsid_->clear();
  }
  clear_has_graphsid();
}
inline const ::std::string& TDCSWbReginEraseOperInfo::graphsid() const {
  return *graphsid_;
}
inline void TDCSWbReginEraseOperInfo::set_graphsid(const ::std::string& value) {
  set_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    graphsid_ = new ::std::string;
  }
  graphsid_->assign(value);
}
inline void TDCSWbReginEraseOperInfo::set_graphsid(const char* value) {
  set_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    graphsid_ = new ::std::string;
  }
  graphsid_->assign(value);
}
inline void TDCSWbReginEraseOperInfo::set_graphsid(const char* value, size_t size) {
  set_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    graphsid_ = new ::std::string;
  }
  graphsid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbReginEraseOperInfo::mutable_graphsid() {
  set_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    graphsid_ = new ::std::string;
  }
  return graphsid_;
}
inline ::std::string* TDCSWbReginEraseOperInfo::release_graphsid() {
  clear_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = graphsid_;
    graphsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbReginEraseOperInfo::set_allocated_graphsid(::std::string* graphsid) {
  if (graphsid_ != &::google::protobuf::internal::kEmptyString) {
    delete graphsid_;
  }
  if (graphsid) {
    set_has_graphsid();
    graphsid_ = graphsid;
  } else {
    clear_has_graphsid();
    graphsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 erasewidth = 4;
inline bool TDCSWbReginEraseOperInfo::has_erasewidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbReginEraseOperInfo::set_has_erasewidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbReginEraseOperInfo::clear_has_erasewidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbReginEraseOperInfo::clear_erasewidth() {
  erasewidth_ = 0u;
  clear_has_erasewidth();
}
inline ::google::protobuf::uint32 TDCSWbReginEraseOperInfo::erasewidth() const {
  return erasewidth_;
}
inline void TDCSWbReginEraseOperInfo::set_erasewidth(::google::protobuf::uint32 value) {
  set_has_erasewidth();
  erasewidth_ = value;
}

// optional uint32 eraseheight = 5;
inline bool TDCSWbReginEraseOperInfo::has_eraseheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSWbReginEraseOperInfo::set_has_eraseheight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSWbReginEraseOperInfo::clear_has_eraseheight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSWbReginEraseOperInfo::clear_eraseheight() {
  eraseheight_ = 0u;
  clear_has_eraseheight();
}
inline ::google::protobuf::uint32 TDCSWbReginEraseOperInfo::eraseheight() const {
  return eraseheight_;
}
inline void TDCSWbReginEraseOperInfo::set_eraseheight(::google::protobuf::uint32 value) {
  set_has_eraseheight();
  eraseheight_ = value;
}

// repeated .mt.TDCSWbPoint point = 6;
inline int TDCSWbReginEraseOperInfo::point_size() const {
  return point_.size();
}
inline void TDCSWbReginEraseOperInfo::clear_point() {
  point_.Clear();
}
inline const ::mt::TDCSWbPoint& TDCSWbReginEraseOperInfo::point(int index) const {
  return point_.Get(index);
}
inline ::mt::TDCSWbPoint* TDCSWbReginEraseOperInfo::mutable_point(int index) {
  return point_.Mutable(index);
}
inline ::mt::TDCSWbPoint* TDCSWbReginEraseOperInfo::add_point() {
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >&
TDCSWbReginEraseOperInfo::point() const {
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbPoint >*
TDCSWbReginEraseOperInfo::mutable_point() {
  return &point_;
}

// -------------------------------------------------------------------

// TDCSWbInsertPicOperInfo

// optional string tabid = 1;
inline bool TDCSWbInsertPicOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbInsertPicOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbInsertPicOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbInsertPicOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbInsertPicOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbInsertPicOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbInsertPicOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbInsertPicOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbInsertPicOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbInsertPicOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbInsertPicOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbInsertPicOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbInsertPicOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbInsertPicOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbInsertPicOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbInsertPicOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbInsertPicOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// optional string imgid = 3;
inline bool TDCSWbInsertPicOperInfo::has_imgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDCSWbInsertPicOperInfo::set_has_imgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDCSWbInsertPicOperInfo::clear_has_imgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDCSWbInsertPicOperInfo::clear_imgid() {
  if (imgid_ != &::google::protobuf::internal::kEmptyString) {
    imgid_->clear();
  }
  clear_has_imgid();
}
inline const ::std::string& TDCSWbInsertPicOperInfo::imgid() const {
  return *imgid_;
}
inline void TDCSWbInsertPicOperInfo::set_imgid(const ::std::string& value) {
  set_has_imgid();
  if (imgid_ == &::google::protobuf::internal::kEmptyString) {
    imgid_ = new ::std::string;
  }
  imgid_->assign(value);
}
inline void TDCSWbInsertPicOperInfo::set_imgid(const char* value) {
  set_has_imgid();
  if (imgid_ == &::google::protobuf::internal::kEmptyString) {
    imgid_ = new ::std::string;
  }
  imgid_->assign(value);
}
inline void TDCSWbInsertPicOperInfo::set_imgid(const char* value, size_t size) {
  set_has_imgid();
  if (imgid_ == &::google::protobuf::internal::kEmptyString) {
    imgid_ = new ::std::string;
  }
  imgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbInsertPicOperInfo::mutable_imgid() {
  set_has_imgid();
  if (imgid_ == &::google::protobuf::internal::kEmptyString) {
    imgid_ = new ::std::string;
  }
  return imgid_;
}
inline ::std::string* TDCSWbInsertPicOperInfo::release_imgid() {
  clear_has_imgid();
  if (imgid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imgid_;
    imgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbInsertPicOperInfo::set_allocated_imgid(::std::string* imgid) {
  if (imgid_ != &::google::protobuf::internal::kEmptyString) {
    delete imgid_;
  }
  if (imgid) {
    set_has_imgid();
    imgid_ = imgid;
  } else {
    clear_has_imgid();
    imgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 imgwidth = 4;
inline bool TDCSWbInsertPicOperInfo::has_imgwidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDCSWbInsertPicOperInfo::set_has_imgwidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDCSWbInsertPicOperInfo::clear_has_imgwidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDCSWbInsertPicOperInfo::clear_imgwidth() {
  imgwidth_ = 0u;
  clear_has_imgwidth();
}
inline ::google::protobuf::uint32 TDCSWbInsertPicOperInfo::imgwidth() const {
  return imgwidth_;
}
inline void TDCSWbInsertPicOperInfo::set_imgwidth(::google::protobuf::uint32 value) {
  set_has_imgwidth();
  imgwidth_ = value;
}

// optional uint32 imgheight = 5;
inline bool TDCSWbInsertPicOperInfo::has_imgheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDCSWbInsertPicOperInfo::set_has_imgheight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDCSWbInsertPicOperInfo::clear_has_imgheight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDCSWbInsertPicOperInfo::clear_imgheight() {
  imgheight_ = 0u;
  clear_has_imgheight();
}
inline ::google::protobuf::uint32 TDCSWbInsertPicOperInfo::imgheight() const {
  return imgheight_;
}
inline void TDCSWbInsertPicOperInfo::set_imgheight(::google::protobuf::uint32 value) {
  set_has_imgheight();
  imgheight_ = value;
}

// optional .mt.TDCSWbPoint point = 6;
inline bool TDCSWbInsertPicOperInfo::has_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDCSWbInsertPicOperInfo::set_has_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDCSWbInsertPicOperInfo::clear_has_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDCSWbInsertPicOperInfo::clear_point() {
  if (point_ != NULL) point_->::mt::TDCSWbPoint::Clear();
  clear_has_point();
}
inline const ::mt::TDCSWbPoint& TDCSWbInsertPicOperInfo::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::mt::TDCSWbPoint* TDCSWbInsertPicOperInfo::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::mt::TDCSWbPoint;
  return point_;
}
inline ::mt::TDCSWbPoint* TDCSWbInsertPicOperInfo::release_point() {
  clear_has_point();
  ::mt::TDCSWbPoint* temp = point_;
  point_ = NULL;
  return temp;
}
inline void TDCSWbInsertPicOperInfo::set_allocated_point(::mt::TDCSWbPoint* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
}

// optional string picname = 7;
inline bool TDCSWbInsertPicOperInfo::has_picname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TDCSWbInsertPicOperInfo::set_has_picname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TDCSWbInsertPicOperInfo::clear_has_picname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TDCSWbInsertPicOperInfo::clear_picname() {
  if (picname_ != &::google::protobuf::internal::kEmptyString) {
    picname_->clear();
  }
  clear_has_picname();
}
inline const ::std::string& TDCSWbInsertPicOperInfo::picname() const {
  return *picname_;
}
inline void TDCSWbInsertPicOperInfo::set_picname(const ::std::string& value) {
  set_has_picname();
  if (picname_ == &::google::protobuf::internal::kEmptyString) {
    picname_ = new ::std::string;
  }
  picname_->assign(value);
}
inline void TDCSWbInsertPicOperInfo::set_picname(const char* value) {
  set_has_picname();
  if (picname_ == &::google::protobuf::internal::kEmptyString) {
    picname_ = new ::std::string;
  }
  picname_->assign(value);
}
inline void TDCSWbInsertPicOperInfo::set_picname(const char* value, size_t size) {
  set_has_picname();
  if (picname_ == &::google::protobuf::internal::kEmptyString) {
    picname_ = new ::std::string;
  }
  picname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbInsertPicOperInfo::mutable_picname() {
  set_has_picname();
  if (picname_ == &::google::protobuf::internal::kEmptyString) {
    picname_ = new ::std::string;
  }
  return picname_;
}
inline ::std::string* TDCSWbInsertPicOperInfo::release_picname() {
  clear_has_picname();
  if (picname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picname_;
    picname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbInsertPicOperInfo::set_allocated_picname(::std::string* picname) {
  if (picname_ != &::google::protobuf::internal::kEmptyString) {
    delete picname_;
  }
  if (picname) {
    set_has_picname();
    picname_ = picname;
  } else {
    clear_has_picname();
    picname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string matrixvalue = 8;
inline int TDCSWbInsertPicOperInfo::matrixvalue_size() const {
  return matrixvalue_.size();
}
inline void TDCSWbInsertPicOperInfo::clear_matrixvalue() {
  matrixvalue_.Clear();
}
inline const ::std::string& TDCSWbInsertPicOperInfo::matrixvalue(int index) const {
  return matrixvalue_.Get(index);
}
inline ::std::string* TDCSWbInsertPicOperInfo::mutable_matrixvalue(int index) {
  return matrixvalue_.Mutable(index);
}
inline void TDCSWbInsertPicOperInfo::set_matrixvalue(int index, const ::std::string& value) {
  matrixvalue_.Mutable(index)->assign(value);
}
inline void TDCSWbInsertPicOperInfo::set_matrixvalue(int index, const char* value) {
  matrixvalue_.Mutable(index)->assign(value);
}
inline void TDCSWbInsertPicOperInfo::set_matrixvalue(int index, const char* value, size_t size) {
  matrixvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbInsertPicOperInfo::add_matrixvalue() {
  return matrixvalue_.Add();
}
inline void TDCSWbInsertPicOperInfo::add_matrixvalue(const ::std::string& value) {
  matrixvalue_.Add()->assign(value);
}
inline void TDCSWbInsertPicOperInfo::add_matrixvalue(const char* value) {
  matrixvalue_.Add()->assign(value);
}
inline void TDCSWbInsertPicOperInfo::add_matrixvalue(const char* value, size_t size) {
  matrixvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TDCSWbInsertPicOperInfo::matrixvalue() const {
  return matrixvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TDCSWbInsertPicOperInfo::mutable_matrixvalue() {
  return &matrixvalue_;
}

// -------------------------------------------------------------------

// TDCSWbGraphsInfo

// optional string graphsid = 1;
inline bool TDCSWbGraphsInfo::has_graphsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbGraphsInfo::set_has_graphsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbGraphsInfo::clear_has_graphsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbGraphsInfo::clear_graphsid() {
  if (graphsid_ != &::google::protobuf::internal::kEmptyString) {
    graphsid_->clear();
  }
  clear_has_graphsid();
}
inline const ::std::string& TDCSWbGraphsInfo::graphsid() const {
  return *graphsid_;
}
inline void TDCSWbGraphsInfo::set_graphsid(const ::std::string& value) {
  set_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    graphsid_ = new ::std::string;
  }
  graphsid_->assign(value);
}
inline void TDCSWbGraphsInfo::set_graphsid(const char* value) {
  set_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    graphsid_ = new ::std::string;
  }
  graphsid_->assign(value);
}
inline void TDCSWbGraphsInfo::set_graphsid(const char* value, size_t size) {
  set_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    graphsid_ = new ::std::string;
  }
  graphsid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbGraphsInfo::mutable_graphsid() {
  set_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    graphsid_ = new ::std::string;
  }
  return graphsid_;
}
inline ::std::string* TDCSWbGraphsInfo::release_graphsid() {
  clear_has_graphsid();
  if (graphsid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = graphsid_;
    graphsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbGraphsInfo::set_allocated_graphsid(::std::string* graphsid) {
  if (graphsid_ != &::google::protobuf::internal::kEmptyString) {
    delete graphsid_;
  }
  if (graphsid) {
    set_has_graphsid();
    graphsid_ = graphsid;
  } else {
    clear_has_graphsid();
    graphsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string matrixvalue = 2;
inline int TDCSWbGraphsInfo::matrixvalue_size() const {
  return matrixvalue_.size();
}
inline void TDCSWbGraphsInfo::clear_matrixvalue() {
  matrixvalue_.Clear();
}
inline const ::std::string& TDCSWbGraphsInfo::matrixvalue(int index) const {
  return matrixvalue_.Get(index);
}
inline ::std::string* TDCSWbGraphsInfo::mutable_matrixvalue(int index) {
  return matrixvalue_.Mutable(index);
}
inline void TDCSWbGraphsInfo::set_matrixvalue(int index, const ::std::string& value) {
  matrixvalue_.Mutable(index)->assign(value);
}
inline void TDCSWbGraphsInfo::set_matrixvalue(int index, const char* value) {
  matrixvalue_.Mutable(index)->assign(value);
}
inline void TDCSWbGraphsInfo::set_matrixvalue(int index, const char* value, size_t size) {
  matrixvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbGraphsInfo::add_matrixvalue() {
  return matrixvalue_.Add();
}
inline void TDCSWbGraphsInfo::add_matrixvalue(const ::std::string& value) {
  matrixvalue_.Add()->assign(value);
}
inline void TDCSWbGraphsInfo::add_matrixvalue(const char* value) {
  matrixvalue_.Add()->assign(value);
}
inline void TDCSWbGraphsInfo::add_matrixvalue(const char* value, size_t size) {
  matrixvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TDCSWbGraphsInfo::matrixvalue() const {
  return matrixvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TDCSWbGraphsInfo::mutable_matrixvalue() {
  return &matrixvalue_;
}

// -------------------------------------------------------------------

// TDCSWbPitchPicOperInfo

// optional string tabid = 1;
inline bool TDCSWbPitchPicOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbPitchPicOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbPitchPicOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbPitchPicOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbPitchPicOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbPitchPicOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbPitchPicOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbPitchPicOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbPitchPicOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbPitchPicOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbPitchPicOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbPitchPicOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbPitchPicOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbPitchPicOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbPitchPicOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbPitchPicOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbPitchPicOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// repeated .mt.TDCSWbGraphsInfo graphsinfo = 3;
inline int TDCSWbPitchPicOperInfo::graphsinfo_size() const {
  return graphsinfo_.size();
}
inline void TDCSWbPitchPicOperInfo::clear_graphsinfo() {
  graphsinfo_.Clear();
}
inline const ::mt::TDCSWbGraphsInfo& TDCSWbPitchPicOperInfo::graphsinfo(int index) const {
  return graphsinfo_.Get(index);
}
inline ::mt::TDCSWbGraphsInfo* TDCSWbPitchPicOperInfo::mutable_graphsinfo(int index) {
  return graphsinfo_.Mutable(index);
}
inline ::mt::TDCSWbGraphsInfo* TDCSWbPitchPicOperInfo::add_graphsinfo() {
  return graphsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbGraphsInfo >&
TDCSWbPitchPicOperInfo::graphsinfo() const {
  return graphsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TDCSWbGraphsInfo >*
TDCSWbPitchPicOperInfo::mutable_graphsinfo() {
  return &graphsinfo_;
}

// -------------------------------------------------------------------

// TDCSWbDelPicOperInfo

// optional string tabid = 1;
inline bool TDCSWbDelPicOperInfo::has_tabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDCSWbDelPicOperInfo::set_has_tabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDCSWbDelPicOperInfo::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDCSWbDelPicOperInfo::clear_tabid() {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    tabid_->clear();
  }
  clear_has_tabid();
}
inline const ::std::string& TDCSWbDelPicOperInfo::tabid() const {
  return *tabid_;
}
inline void TDCSWbDelPicOperInfo::set_tabid(const ::std::string& value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbDelPicOperInfo::set_tabid(const char* value) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(value);
}
inline void TDCSWbDelPicOperInfo::set_tabid(const char* value, size_t size) {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  tabid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbDelPicOperInfo::mutable_tabid() {
  set_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    tabid_ = new ::std::string;
  }
  return tabid_;
}
inline ::std::string* TDCSWbDelPicOperInfo::release_tabid() {
  clear_has_tabid();
  if (tabid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tabid_;
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TDCSWbDelPicOperInfo::set_allocated_tabid(::std::string* tabid) {
  if (tabid_ != &::google::protobuf::internal::kEmptyString) {
    delete tabid_;
  }
  if (tabid) {
    set_has_tabid();
    tabid_ = tabid;
  } else {
    clear_has_tabid();
    tabid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 subpageid = 2;
inline bool TDCSWbDelPicOperInfo::has_subpageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDCSWbDelPicOperInfo::set_has_subpageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDCSWbDelPicOperInfo::clear_has_subpageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDCSWbDelPicOperInfo::clear_subpageid() {
  subpageid_ = 0u;
  clear_has_subpageid();
}
inline ::google::protobuf::uint32 TDCSWbDelPicOperInfo::subpageid() const {
  return subpageid_;
}
inline void TDCSWbDelPicOperInfo::set_subpageid(::google::protobuf::uint32 value) {
  set_has_subpageid();
  subpageid_ = value;
}

// repeated string graphsid = 3;
inline int TDCSWbDelPicOperInfo::graphsid_size() const {
  return graphsid_.size();
}
inline void TDCSWbDelPicOperInfo::clear_graphsid() {
  graphsid_.Clear();
}
inline const ::std::string& TDCSWbDelPicOperInfo::graphsid(int index) const {
  return graphsid_.Get(index);
}
inline ::std::string* TDCSWbDelPicOperInfo::mutable_graphsid(int index) {
  return graphsid_.Mutable(index);
}
inline void TDCSWbDelPicOperInfo::set_graphsid(int index, const ::std::string& value) {
  graphsid_.Mutable(index)->assign(value);
}
inline void TDCSWbDelPicOperInfo::set_graphsid(int index, const char* value) {
  graphsid_.Mutable(index)->assign(value);
}
inline void TDCSWbDelPicOperInfo::set_graphsid(int index, const char* value, size_t size) {
  graphsid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TDCSWbDelPicOperInfo::add_graphsid() {
  return graphsid_.Add();
}
inline void TDCSWbDelPicOperInfo::add_graphsid(const ::std::string& value) {
  graphsid_.Add()->assign(value);
}
inline void TDCSWbDelPicOperInfo::add_graphsid(const char* value) {
  graphsid_.Add()->assign(value);
}
inline void TDCSWbDelPicOperInfo::add_graphsid(const char* value, size_t size) {
  graphsid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TDCSWbDelPicOperInfo::graphsid() const {
  return graphsid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TDCSWbDelPicOperInfo::mutable_graphsid() {
  return &graphsid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mt

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_structdcs_2eproto__INCLUDED
