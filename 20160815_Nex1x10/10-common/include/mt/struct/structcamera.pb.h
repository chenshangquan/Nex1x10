// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structcamera.proto

#ifndef PROTOBUF_structcamera_2eproto__INCLUDED
#define PROTOBUF_structcamera_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cmr {

// Internal implementation detail -- do not call these.
void MTMSG_API protobuf_AddDesc_structcamera_2eproto();
void protobuf_AssignDesc_structcamera_2eproto();
void protobuf_ShutdownFile_structcamera_2eproto();

class TCameraInfo;
class TPeopleCountingState;
class TPeopleCountingResult;
class TElectronicNamePlateState;
class TFaceCheckInState;
class TFaceCheckInInfo;
class TFaceCheckInInfos;

// ===================================================================

class MTMSG_API TCameraInfo : public ::google::protobuf::Message {
 public:
  TCameraInfo();
  virtual ~TCameraInfo();

  TCameraInfo(const TCameraInfo& from);

  inline TCameraInfo& operator=(const TCameraInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCameraInfo& default_instance();

  void Swap(TCameraInfo* other);

  // implements Message ----------------------------------------------

  TCameraInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCameraInfo& from);
  void MergeFrom(const TCameraInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string model = 2;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 2;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional bool support_people_counting = 3;
  inline bool has_support_people_counting() const;
  inline void clear_support_people_counting();
  static const int kSupportPeopleCountingFieldNumber = 3;
  inline bool support_people_counting() const;
  inline void set_support_people_counting(bool value);

  // optional bool support_electronic_nameplate = 4;
  inline bool has_support_electronic_nameplate() const;
  inline void clear_support_electronic_nameplate();
  static const int kSupportElectronicNameplateFieldNumber = 4;
  inline bool support_electronic_nameplate() const;
  inline void set_support_electronic_nameplate(bool value);

  // optional bool support_face_check_in = 5;
  inline bool has_support_face_check_in() const;
  inline void clear_support_face_check_in();
  static const int kSupportFaceCheckInFieldNumber = 5;
  inline bool support_face_check_in() const;
  inline void set_support_face_check_in(bool value);

  // @@protoc_insertion_point(class_scope:cmr.TCameraInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_support_people_counting();
  inline void clear_has_support_people_counting();
  inline void set_has_support_electronic_nameplate();
  inline void clear_has_support_electronic_nameplate();
  inline void set_has_support_face_check_in();
  inline void clear_has_support_face_check_in();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* model_;
  bool support_people_counting_;
  bool support_electronic_nameplate_;
  bool support_face_check_in_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcamera_2eproto();
  friend void protobuf_AssignDesc_structcamera_2eproto();
  friend void protobuf_ShutdownFile_structcamera_2eproto();

  void InitAsDefaultInstance();
  static TCameraInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TPeopleCountingState : public ::google::protobuf::Message {
 public:
  TPeopleCountingState();
  virtual ~TPeopleCountingState();

  TPeopleCountingState(const TPeopleCountingState& from);

  inline TPeopleCountingState& operator=(const TPeopleCountingState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPeopleCountingState& default_instance();

  void Swap(TPeopleCountingState* other);

  // implements Message ----------------------------------------------

  TPeopleCountingState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPeopleCountingState& from);
  void MergeFrom(const TPeopleCountingState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool on = 1;
  inline bool has_on() const;
  inline void clear_on();
  static const int kOnFieldNumber = 1;
  inline bool on() const;
  inline void set_on(bool value);

  // @@protoc_insertion_point(class_scope:cmr.TPeopleCountingState)
 private:
  inline void set_has_on();
  inline void clear_has_on();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool on_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcamera_2eproto();
  friend void protobuf_AssignDesc_structcamera_2eproto();
  friend void protobuf_ShutdownFile_structcamera_2eproto();

  void InitAsDefaultInstance();
  static TPeopleCountingState* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TPeopleCountingResult : public ::google::protobuf::Message {
 public:
  TPeopleCountingResult();
  virtual ~TPeopleCountingResult();

  TPeopleCountingResult(const TPeopleCountingResult& from);

  inline TPeopleCountingResult& operator=(const TPeopleCountingResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPeopleCountingResult& default_instance();

  void Swap(TPeopleCountingResult* other);

  // implements Message ----------------------------------------------

  TPeopleCountingResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPeopleCountingResult& from);
  void MergeFrom(const TPeopleCountingResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 people_num = 1;
  inline bool has_people_num() const;
  inline void clear_people_num();
  static const int kPeopleNumFieldNumber = 1;
  inline ::google::protobuf::uint32 people_num() const;
  inline void set_people_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cmr.TPeopleCountingResult)
 private:
  inline void set_has_people_num();
  inline void clear_has_people_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 people_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcamera_2eproto();
  friend void protobuf_AssignDesc_structcamera_2eproto();
  friend void protobuf_ShutdownFile_structcamera_2eproto();

  void InitAsDefaultInstance();
  static TPeopleCountingResult* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TElectronicNamePlateState : public ::google::protobuf::Message {
 public:
  TElectronicNamePlateState();
  virtual ~TElectronicNamePlateState();

  TElectronicNamePlateState(const TElectronicNamePlateState& from);

  inline TElectronicNamePlateState& operator=(const TElectronicNamePlateState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TElectronicNamePlateState& default_instance();

  void Swap(TElectronicNamePlateState* other);

  // implements Message ----------------------------------------------

  TElectronicNamePlateState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TElectronicNamePlateState& from);
  void MergeFrom(const TElectronicNamePlateState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool on = 1;
  inline bool has_on() const;
  inline void clear_on();
  static const int kOnFieldNumber = 1;
  inline bool on() const;
  inline void set_on(bool value);

  // @@protoc_insertion_point(class_scope:cmr.TElectronicNamePlateState)
 private:
  inline void set_has_on();
  inline void clear_has_on();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool on_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcamera_2eproto();
  friend void protobuf_AssignDesc_structcamera_2eproto();
  friend void protobuf_ShutdownFile_structcamera_2eproto();

  void InitAsDefaultInstance();
  static TElectronicNamePlateState* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TFaceCheckInState : public ::google::protobuf::Message {
 public:
  TFaceCheckInState();
  virtual ~TFaceCheckInState();

  TFaceCheckInState(const TFaceCheckInState& from);

  inline TFaceCheckInState& operator=(const TFaceCheckInState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFaceCheckInState& default_instance();

  void Swap(TFaceCheckInState* other);

  // implements Message ----------------------------------------------

  TFaceCheckInState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFaceCheckInState& from);
  void MergeFrom(const TFaceCheckInState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool on = 1;
  inline bool has_on() const;
  inline void clear_on();
  static const int kOnFieldNumber = 1;
  inline bool on() const;
  inline void set_on(bool value);

  // @@protoc_insertion_point(class_scope:cmr.TFaceCheckInState)
 private:
  inline void set_has_on();
  inline void clear_has_on();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool on_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcamera_2eproto();
  friend void protobuf_AssignDesc_structcamera_2eproto();
  friend void protobuf_ShutdownFile_structcamera_2eproto();

  void InitAsDefaultInstance();
  static TFaceCheckInState* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TFaceCheckInInfo : public ::google::protobuf::Message {
 public:
  TFaceCheckInInfo();
  virtual ~TFaceCheckInInfo();

  TFaceCheckInInfo(const TFaceCheckInInfo& from);

  inline TFaceCheckInInfo& operator=(const TFaceCheckInInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFaceCheckInInfo& default_instance();

  void Swap(TFaceCheckInInfo* other);

  // implements Message ----------------------------------------------

  TFaceCheckInInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFaceCheckInInfo& from);
  void MergeFrom(const TFaceCheckInInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:cmr.TFaceCheckInInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* time_;
  ::std::string* description_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcamera_2eproto();
  friend void protobuf_AssignDesc_structcamera_2eproto();
  friend void protobuf_ShutdownFile_structcamera_2eproto();

  void InitAsDefaultInstance();
  static TFaceCheckInInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TFaceCheckInInfos : public ::google::protobuf::Message {
 public:
  TFaceCheckInInfos();
  virtual ~TFaceCheckInInfos();

  TFaceCheckInInfos(const TFaceCheckInInfos& from);

  inline TFaceCheckInInfos& operator=(const TFaceCheckInInfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFaceCheckInInfos& default_instance();

  void Swap(TFaceCheckInInfos* other);

  // implements Message ----------------------------------------------

  TFaceCheckInInfos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFaceCheckInInfos& from);
  void MergeFrom(const TFaceCheckInInfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cmr.TFaceCheckInInfo FaceCheckInInfos = 1;
  inline int facecheckininfos_size() const;
  inline void clear_facecheckininfos();
  static const int kFaceCheckInInfosFieldNumber = 1;
  inline const ::cmr::TFaceCheckInInfo& facecheckininfos(int index) const;
  inline ::cmr::TFaceCheckInInfo* mutable_facecheckininfos(int index);
  inline ::cmr::TFaceCheckInInfo* add_facecheckininfos();
  inline const ::google::protobuf::RepeatedPtrField< ::cmr::TFaceCheckInInfo >&
      facecheckininfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::cmr::TFaceCheckInInfo >*
      mutable_facecheckininfos();

  // @@protoc_insertion_point(class_scope:cmr.TFaceCheckInInfos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::cmr::TFaceCheckInInfo > facecheckininfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcamera_2eproto();
  friend void protobuf_AssignDesc_structcamera_2eproto();
  friend void protobuf_ShutdownFile_structcamera_2eproto();

  void InitAsDefaultInstance();
  static TFaceCheckInInfos* default_instance_;
};
// ===================================================================


// ===================================================================

// TCameraInfo

// optional string name = 1;
inline bool TCameraInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCameraInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCameraInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCameraInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TCameraInfo::name() const {
  return *name_;
}
inline void TCameraInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TCameraInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TCameraInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TCameraInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TCameraInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TCameraInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model = 2;
inline bool TCameraInfo::has_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCameraInfo::set_has_model() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCameraInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCameraInfo::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& TCameraInfo::model() const {
  return *model_;
}
inline void TCameraInfo::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void TCameraInfo::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void TCameraInfo::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TCameraInfo::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* TCameraInfo::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TCameraInfo::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool support_people_counting = 3;
inline bool TCameraInfo::has_support_people_counting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCameraInfo::set_has_support_people_counting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCameraInfo::clear_has_support_people_counting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCameraInfo::clear_support_people_counting() {
  support_people_counting_ = false;
  clear_has_support_people_counting();
}
inline bool TCameraInfo::support_people_counting() const {
  return support_people_counting_;
}
inline void TCameraInfo::set_support_people_counting(bool value) {
  set_has_support_people_counting();
  support_people_counting_ = value;
}

// optional bool support_electronic_nameplate = 4;
inline bool TCameraInfo::has_support_electronic_nameplate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCameraInfo::set_has_support_electronic_nameplate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCameraInfo::clear_has_support_electronic_nameplate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCameraInfo::clear_support_electronic_nameplate() {
  support_electronic_nameplate_ = false;
  clear_has_support_electronic_nameplate();
}
inline bool TCameraInfo::support_electronic_nameplate() const {
  return support_electronic_nameplate_;
}
inline void TCameraInfo::set_support_electronic_nameplate(bool value) {
  set_has_support_electronic_nameplate();
  support_electronic_nameplate_ = value;
}

// optional bool support_face_check_in = 5;
inline bool TCameraInfo::has_support_face_check_in() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCameraInfo::set_has_support_face_check_in() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCameraInfo::clear_has_support_face_check_in() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCameraInfo::clear_support_face_check_in() {
  support_face_check_in_ = false;
  clear_has_support_face_check_in();
}
inline bool TCameraInfo::support_face_check_in() const {
  return support_face_check_in_;
}
inline void TCameraInfo::set_support_face_check_in(bool value) {
  set_has_support_face_check_in();
  support_face_check_in_ = value;
}

// -------------------------------------------------------------------

// TPeopleCountingState

// optional bool on = 1;
inline bool TPeopleCountingState::has_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPeopleCountingState::set_has_on() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPeopleCountingState::clear_has_on() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPeopleCountingState::clear_on() {
  on_ = false;
  clear_has_on();
}
inline bool TPeopleCountingState::on() const {
  return on_;
}
inline void TPeopleCountingState::set_on(bool value) {
  set_has_on();
  on_ = value;
}

// -------------------------------------------------------------------

// TPeopleCountingResult

// optional uint32 people_num = 1;
inline bool TPeopleCountingResult::has_people_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPeopleCountingResult::set_has_people_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPeopleCountingResult::clear_has_people_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPeopleCountingResult::clear_people_num() {
  people_num_ = 0u;
  clear_has_people_num();
}
inline ::google::protobuf::uint32 TPeopleCountingResult::people_num() const {
  return people_num_;
}
inline void TPeopleCountingResult::set_people_num(::google::protobuf::uint32 value) {
  set_has_people_num();
  people_num_ = value;
}

// -------------------------------------------------------------------

// TElectronicNamePlateState

// optional bool on = 1;
inline bool TElectronicNamePlateState::has_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TElectronicNamePlateState::set_has_on() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TElectronicNamePlateState::clear_has_on() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TElectronicNamePlateState::clear_on() {
  on_ = false;
  clear_has_on();
}
inline bool TElectronicNamePlateState::on() const {
  return on_;
}
inline void TElectronicNamePlateState::set_on(bool value) {
  set_has_on();
  on_ = value;
}

// -------------------------------------------------------------------

// TFaceCheckInState

// optional bool on = 1;
inline bool TFaceCheckInState::has_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFaceCheckInState::set_has_on() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFaceCheckInState::clear_has_on() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFaceCheckInState::clear_on() {
  on_ = false;
  clear_has_on();
}
inline bool TFaceCheckInState::on() const {
  return on_;
}
inline void TFaceCheckInState::set_on(bool value) {
  set_has_on();
  on_ = value;
}

// -------------------------------------------------------------------

// TFaceCheckInInfo

// optional string name = 1;
inline bool TFaceCheckInInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFaceCheckInInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFaceCheckInInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFaceCheckInInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TFaceCheckInInfo::name() const {
  return *name_;
}
inline void TFaceCheckInInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TFaceCheckInInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TFaceCheckInInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TFaceCheckInInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TFaceCheckInInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TFaceCheckInInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string time = 2;
inline bool TFaceCheckInInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFaceCheckInInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFaceCheckInInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFaceCheckInInfo::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& TFaceCheckInInfo::time() const {
  return *time_;
}
inline void TFaceCheckInInfo::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void TFaceCheckInInfo::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void TFaceCheckInInfo::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TFaceCheckInInfo::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* TFaceCheckInInfo::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TFaceCheckInInfo::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 3;
inline bool TFaceCheckInInfo::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFaceCheckInInfo::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFaceCheckInInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFaceCheckInInfo::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& TFaceCheckInInfo::description() const {
  return *description_;
}
inline void TFaceCheckInInfo::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void TFaceCheckInInfo::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void TFaceCheckInInfo::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TFaceCheckInInfo::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* TFaceCheckInInfo::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TFaceCheckInInfo::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TFaceCheckInInfos

// repeated .cmr.TFaceCheckInInfo FaceCheckInInfos = 1;
inline int TFaceCheckInInfos::facecheckininfos_size() const {
  return facecheckininfos_.size();
}
inline void TFaceCheckInInfos::clear_facecheckininfos() {
  facecheckininfos_.Clear();
}
inline const ::cmr::TFaceCheckInInfo& TFaceCheckInInfos::facecheckininfos(int index) const {
  return facecheckininfos_.Get(index);
}
inline ::cmr::TFaceCheckInInfo* TFaceCheckInInfos::mutable_facecheckininfos(int index) {
  return facecheckininfos_.Mutable(index);
}
inline ::cmr::TFaceCheckInInfo* TFaceCheckInInfos::add_facecheckininfos() {
  return facecheckininfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cmr::TFaceCheckInInfo >&
TFaceCheckInInfos::facecheckininfos() const {
  return facecheckininfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::cmr::TFaceCheckInInfo >*
TFaceCheckInInfos::mutable_facecheckininfos() {
  return &facecheckininfos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cmr

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_structcamera_2eproto__INCLUDED
