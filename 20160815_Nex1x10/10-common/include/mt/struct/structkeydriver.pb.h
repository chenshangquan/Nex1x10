// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structkeydriver.proto

#ifndef PROTOBUF_structkeydriver_2eproto__INCLUDED
#define PROTOBUF_structkeydriver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
// @@protoc_insertion_point(includes)

namespace mt {

// Internal implementation detail -- do not call these.
void MTMSG_API protobuf_AddDesc_structkeydriver_2eproto();
void protobuf_AssignDesc_structkeydriver_2eproto();
void protobuf_ShutdownFile_structkeydriver_2eproto();

class TMTKeyPressInfo;

// ===================================================================

class MTMSG_API TMTKeyPressInfo : public ::google::protobuf::Message {
 public:
  TMTKeyPressInfo();
  virtual ~TMTKeyPressInfo();

  TMTKeyPressInfo(const TMTKeyPressInfo& from);

  inline TMTKeyPressInfo& operator=(const TMTKeyPressInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMTKeyPressInfo& default_instance();

  void Swap(TMTKeyPressInfo* other);

  // implements Message ----------------------------------------------

  TMTKeyPressInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMTKeyPressInfo& from);
  void MergeFrom(const TMTKeyPressInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool key_type = 1;
  inline bool has_key_type() const;
  inline void clear_key_type();
  static const int kKeyTypeFieldNumber = 1;
  inline bool key_type() const;
  inline void set_key_type(bool value);

  // optional .mt.EmRemoteType key_source = 2;
  inline bool has_key_source() const;
  inline void clear_key_source();
  static const int kKeySourceFieldNumber = 2;
  inline ::mt::EmRemoteType key_source() const;
  inline void set_key_source(::mt::EmRemoteType value);

  // optional .mt.EmRemoteScanCode key_code = 3;
  inline bool has_key_code() const;
  inline void clear_key_code();
  static const int kKeyCodeFieldNumber = 3;
  inline ::mt::EmRemoteScanCode key_code() const;
  inline void set_key_code(::mt::EmRemoteScanCode value);

  // optional uint32 key_count = 4;
  inline bool has_key_count() const;
  inline void clear_key_count();
  static const int kKeyCountFieldNumber = 4;
  inline ::google::protobuf::uint32 key_count() const;
  inline void set_key_count(::google::protobuf::uint32 value);

  // optional .mt.EmKeyState key_state = 5;
  inline bool has_key_state() const;
  inline void clear_key_state();
  static const int kKeyStateFieldNumber = 5;
  inline ::mt::EmKeyState key_state() const;
  inline void set_key_state(::mt::EmKeyState value);

  // @@protoc_insertion_point(class_scope:mt.TMTKeyPressInfo)
 private:
  inline void set_has_key_type();
  inline void clear_has_key_type();
  inline void set_has_key_source();
  inline void clear_has_key_source();
  inline void set_has_key_code();
  inline void clear_has_key_code();
  inline void set_has_key_count();
  inline void clear_has_key_count();
  inline void set_has_key_state();
  inline void clear_has_key_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool key_type_;
  int key_source_;
  int key_code_;
  ::google::protobuf::uint32 key_count_;
  int key_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structkeydriver_2eproto();
  friend void protobuf_AssignDesc_structkeydriver_2eproto();
  friend void protobuf_ShutdownFile_structkeydriver_2eproto();

  void InitAsDefaultInstance();
  static TMTKeyPressInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TMTKeyPressInfo

// optional bool key_type = 1;
inline bool TMTKeyPressInfo::has_key_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMTKeyPressInfo::set_has_key_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMTKeyPressInfo::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMTKeyPressInfo::clear_key_type() {
  key_type_ = false;
  clear_has_key_type();
}
inline bool TMTKeyPressInfo::key_type() const {
  return key_type_;
}
inline void TMTKeyPressInfo::set_key_type(bool value) {
  set_has_key_type();
  key_type_ = value;
}

// optional .mt.EmRemoteType key_source = 2;
inline bool TMTKeyPressInfo::has_key_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMTKeyPressInfo::set_has_key_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMTKeyPressInfo::clear_has_key_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMTKeyPressInfo::clear_key_source() {
  key_source_ = 0;
  clear_has_key_source();
}
inline ::mt::EmRemoteType TMTKeyPressInfo::key_source() const {
  return static_cast< ::mt::EmRemoteType >(key_source_);
}
inline void TMTKeyPressInfo::set_key_source(::mt::EmRemoteType value) {
  assert(::mt::EmRemoteType_IsValid(value));
  set_has_key_source();
  key_source_ = value;
}

// optional .mt.EmRemoteScanCode key_code = 3;
inline bool TMTKeyPressInfo::has_key_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMTKeyPressInfo::set_has_key_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMTKeyPressInfo::clear_has_key_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMTKeyPressInfo::clear_key_code() {
  key_code_ = 0;
  clear_has_key_code();
}
inline ::mt::EmRemoteScanCode TMTKeyPressInfo::key_code() const {
  return static_cast< ::mt::EmRemoteScanCode >(key_code_);
}
inline void TMTKeyPressInfo::set_key_code(::mt::EmRemoteScanCode value) {
  assert(::mt::EmRemoteScanCode_IsValid(value));
  set_has_key_code();
  key_code_ = value;
}

// optional uint32 key_count = 4;
inline bool TMTKeyPressInfo::has_key_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMTKeyPressInfo::set_has_key_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TMTKeyPressInfo::clear_has_key_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TMTKeyPressInfo::clear_key_count() {
  key_count_ = 0u;
  clear_has_key_count();
}
inline ::google::protobuf::uint32 TMTKeyPressInfo::key_count() const {
  return key_count_;
}
inline void TMTKeyPressInfo::set_key_count(::google::protobuf::uint32 value) {
  set_has_key_count();
  key_count_ = value;
}

// optional .mt.EmKeyState key_state = 5;
inline bool TMTKeyPressInfo::has_key_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMTKeyPressInfo::set_has_key_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TMTKeyPressInfo::clear_has_key_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TMTKeyPressInfo::clear_key_state() {
  key_state_ = 0;
  clear_has_key_state();
}
inline ::mt::EmKeyState TMTKeyPressInfo::key_state() const {
  return static_cast< ::mt::EmKeyState >(key_state_);
}
inline void TMTKeyPressInfo::set_key_state(::mt::EmKeyState value) {
  assert(::mt::EmKeyState_IsValid(value));
  set_has_key_state();
  key_state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mt

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_structkeydriver_2eproto__INCLUDED
