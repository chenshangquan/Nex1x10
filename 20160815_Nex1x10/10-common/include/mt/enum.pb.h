// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum.proto

#ifndef PROTOBUF_enum_2eproto__INCLUDED
#define PROTOBUF_enum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace mt {

// Internal implementation detail -- do not call these.
void MTMSG_API protobuf_AddDesc_enum_2eproto();
void protobuf_AssignDesc_enum_2eproto();
void protobuf_ShutdownFile_enum_2eproto();


enum EmHintCode {
  emHintBegin = 0,
  emFailtoSendDual = 1,
  emFailtoRecvDual = 2,
  emFailtoVodLogin = 3,
  emDHCPTimeOut = 4,
  emPPPoEAuthorError = 5,
  emPPPoEAgentError = 6,
  emPPPoETimeOutError = 7,
  emPPPoELinkDownError = 8,
  emPPPoEGeneralError = 9,
  emFailtoSendDualAsReject = 10,
  emCallRateNotValidForMc = 11,
  emDualResNotMatchConfRes = 12,
  emSuccedetoSendDual = 13,
  emSuccedetoRecvDual = 14,
  emSateMtNoP2pPermission = 15,
  emH323UpLoadBitrateLessThan64Ind = 16,
  emH323DownLoadBitrateLessThan64Ind = 17,
  emAssVidHasNoSignal = 18,
  emNotRegedToCallFailed = 19,
  emBePolledNext = 30,
  emHintNoOpenDSChnnlNonSpeaker = 31,
  emHintNoOpenDSChnnlNonCap = 32,
  emHintNoOpenDSChnnlBRLow64 = 33,
  emHintNoOpenDSChnnlFECType = 34,
  emHintNoOpenDSChnnlNonMp = 35,
  emHintNoOpenDSChnnlEncryptMode = 36,
  emHintNoOpenDSChnnlOverSatDCastChnNum = 37,
  emHintNoOpenFSChnnlNonCap = 38,
  emHintNoOpenFSChnnlBRLow64 = 39,
  emHintNoOpenFSChnnlEncrpytMode = 40,
  emHintNoOpenFSChnnlFECType = 41,
  emHintNoOpenFSChnnlNonMp = 42,
  emHintNoOpenFSChnnlBROverflow = 43,
  emHintNoOpenFSChnnlBothH263plus = 44,
  emHintNoOpenFSChnnlFormat = 45,
  emHintNoOpenFSChnnlFPS = 46,
  emHintBRLessThanConf = 47,
  emHintBRLargerThanConf = 48,
  emHintNoSupportOprForNoAuth = 49,
  emHintQueueConfNoIdleServer = 50,
  emHintQueueConfAllocatedServer = 51,
  emHintOldStackNotSupportSpecVip = 52,
  emHintOldStackNotSupportModifyDumb = 53,
  emHintOldStackNotSupportModifyConfPwd = 54,
  emHintOldStackNotSupportModifyConfNoDisturb = 55,
  emHintOldStackNotSupportModifyDuration = 56,
  emHintOldStackNotSupportModifyConfName = 57,
  emHintOldStackNotSupportSetAssStreamSendMod = 58,
  emHintAssVideoSourceIsSwitch = 59,
  emHintNoSendAssOnVodPlayStatus = 60,
  emHintNoSendAssOnEnterPwdStatus = 61
};
MTMSG_API bool EmHintCode_IsValid(int value);
const EmHintCode EmHintCode_MIN = emHintBegin;
const EmHintCode EmHintCode_MAX = emHintNoSendAssOnEnterPwdStatus;
const int EmHintCode_ARRAYSIZE = EmHintCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHintCode_descriptor();
inline const ::std::string& EmHintCode_Name(EmHintCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHintCode_descriptor(), value);
}
inline bool EmHintCode_Parse(
    const ::std::string& name, EmHintCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHintCode>(
    EmHintCode_descriptor(), name, value);
}
enum EmStackInitFailReason {
  emH323InitSuccess = 1,
  emH323InitFailed_MemoryProblem = 2,
  emH323InitFailed_ConfigProblem = 3,
  emH323InitFailed_NetWorkProblem = 4,
  emH323InitFailed_InitAgain = 5,
  emH323InitFailed_GenConfigFail = 6,
  emH323InitFailed_InitSemFail = 7,
  emH323InitFailed_NewConnInfoFail = 8,
  emH323InitFailed_SetCBFail = 9,
  emH323InitFailed_Unknown = 10,
  emSipInitSuccess = 30,
  emSipInitFailed = 31,
  emH323PxyClient_Running = 50,
  emH323PxyClient_NotRunning = 51
};
MTMSG_API bool EmStackInitFailReason_IsValid(int value);
const EmStackInitFailReason EmStackInitFailReason_MIN = emH323InitSuccess;
const EmStackInitFailReason EmStackInitFailReason_MAX = emH323PxyClient_NotRunning;
const int EmStackInitFailReason_ARRAYSIZE = EmStackInitFailReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmStackInitFailReason_descriptor();
inline const ::std::string& EmStackInitFailReason_Name(EmStackInitFailReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmStackInitFailReason_descriptor(), value);
}
inline bool EmStackInitFailReason_Parse(
    const ::std::string& name, EmStackInitFailReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmStackInitFailReason>(
    EmStackInitFailReason_descriptor(), name, value);
}
enum EmKdvMtModel {
  emKdvMtModelBeg = 0,
  emKdvMtModelX500TI = 1,
  emKdvMtModelX700 = 2,
  emKdvMtModelX300 = 3,
  emKdvMtModelSky300 = 4,
  emKdvMtModelSky100 = 5,
  emKdvMtModelEnd = 9
};
MTMSG_API bool EmKdvMtModel_IsValid(int value);
const EmKdvMtModel EmKdvMtModel_MIN = emKdvMtModelBeg;
const EmKdvMtModel EmKdvMtModel_MAX = emKdvMtModelEnd;
const int EmKdvMtModel_ARRAYSIZE = EmKdvMtModel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmKdvMtModel_descriptor();
inline const ::std::string& EmKdvMtModel_Name(EmKdvMtModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmKdvMtModel_descriptor(), value);
}
inline bool EmKdvMtModel_Parse(
    const ::std::string& name, EmKdvMtModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmKdvMtModel>(
    EmKdvMtModel_descriptor(), name, value);
}
enum EmMtModel {
  emModelBegin = 0,
  emSkyWindows = 1,
  emSkyIPad = 2,
  emSkyIPhone = 3,
  emSkyAndroidPad = 7,
  emSkyAndroidPhone = 8,
  emX500_1080P60 = 9,
  emX500_1080P30 = 10,
  emX500_720P60 = 11,
  emX500_mo_1080P = 12,
  emX500_mo_720P = 13,
  emX500_oem_1080P = 14,
  emX500_oem_mo_1080P = 15,
  emTrueLink = 16,
  emTrueTouchIpad = 17,
  emTrueTouchIphone = 18,
  emTrueTouchAndroidPhone = 19,
  emTrueTouchAndroidPad = 20,
  emH950_1080P60 = 21,
  emTrueLinkTV = 22,
  emX700_4k30 = 23,
  emX700_oem_4k30 = 24,
  emX500_4k30 = 25,
  emX500_oem_4k30 = 26,
  emX300_1080P60 = 27,
  emX300_1080P30 = 28,
  emX300_720P60 = 29,
  emX300_oem_1080P60 = 30,
  emX500_1080P_60 = 31,
  emX500_1080P_30 = 32,
  emX500_oem_1080P_60 = 33,
  em300_1080P30 = 34,
  em300_720P60 = 35,
  em300_oem_1080P30 = 36,
  em300L_1080P30 = 37,
  em300L_720P60 = 38,
  em300L_oem_1080P30 = 39,
  em300_1080P60 = 40,
  em300_720P30 = 41,
  em300L_1080P60 = 42,
  em300L_720P30 = 43,
  emX300_720P30 = 44,
  emX500_720P_30 = 45,
  emX500_720P_60 = 46,
  em100_1080P30_12X = 47,
  em100_1080P30_3X = 48,
  em100L_720P = 49,
  em100_oem_1080P30_3X = 50,
  emSkyWindows_s = 51,
  emSkyIPad_s = 52,
  emSkyIPhone_s = 53,
  emSkyAndroidPad_s = 54,
  emSkyAndroidPhone_s = 55,
  emX300_1080P60_s = 56,
  emX500_1080P60_s = 57,
  em300_1080P60_s = 58,
  emX700_s = 59,
  emX500_4K_s = 60,
  em100_1080P30_12X_s = 61,
  emX300_1080P60_cs = 62,
  emX500_1080P60_cs = 63,
  em300_1080P60_cs = 64,
  emX700_cs = 65,
  emX500_4K_cs = 66,
  em100_1080P30_12X_cs = 67,
  em100_1080P30_12X_H5 = 68,
  em100_1080P30_3X_H5 = 69,
  em100_DX_1080P30_12X = 70,
  em100_DX_1080P30_3X = 71,
  em100L_DX_720P = 72
};
MTMSG_API bool EmMtModel_IsValid(int value);
const EmMtModel EmMtModel_MIN = emModelBegin;
const EmMtModel EmMtModel_MAX = em100L_DX_720P;
const int EmMtModel_ARRAYSIZE = EmMtModel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtModel_descriptor();
inline const ::std::string& EmMtModel_Name(EmMtModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtModel_descriptor(), value);
}
inline bool EmMtModel_Parse(
    const ::std::string& name, EmMtModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtModel>(
    EmMtModel_descriptor(), name, value);
}
enum EmConfProtocol {
  emProtocolBegin = 0,
  em323 = 1,
  emsip = 2,
  emsat = 3,
  emtip = 4
};
MTMSG_API bool EmConfProtocol_IsValid(int value);
const EmConfProtocol EmConfProtocol_MIN = emProtocolBegin;
const EmConfProtocol EmConfProtocol_MAX = emtip;
const int EmConfProtocol_ARRAYSIZE = EmConfProtocol_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmConfProtocol_descriptor();
inline const ::std::string& EmConfProtocol_Name(EmConfProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmConfProtocol_descriptor(), value);
}
inline bool EmConfProtocol_Parse(
    const ::std::string& name, EmConfProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmConfProtocol>(
    EmConfProtocol_descriptor(), name, value);
}
enum EmCodecComponent {
  emVidMainEncoder = 0,
  emVidMainDecoder = 1,
  emAudMainEncoder = 2,
  emAudMainDecoder = 3,
  emAudMainMixer = 4,
  emVidMainMixer = 5,
  emVidAssEncoder = 6,
  emVidAssDecoder = 7,
  emAudAssEncoder = 8,
  emAudAssDecoder = 9,
  emAudAssMixer = 10,
  emVidAssMixer = 11,
  emVidMainSecondEncoder = 12,
  emVidMainSecondDecoder = 13,
  emCodecInvalid = 20
};
MTMSG_API bool EmCodecComponent_IsValid(int value);
const EmCodecComponent EmCodecComponent_MIN = emVidMainEncoder;
const EmCodecComponent EmCodecComponent_MAX = emCodecInvalid;
const int EmCodecComponent_ARRAYSIZE = EmCodecComponent_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCodecComponent_descriptor();
inline const ::std::string& EmCodecComponent_Name(EmCodecComponent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCodecComponent_descriptor(), value);
}
inline bool EmCodecComponent_Parse(
    const ::std::string& name, EmCodecComponent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCodecComponent>(
    EmCodecComponent_descriptor(), name, value);
}
enum EmCodecComponentIndex {
  em1st = 0,
  em2nd = 1,
  em3rd = 2,
  em4th = 3,
  em5th = 4,
  em6th = 5,
  em7th = 6,
  em8th = 7,
  em9th = 8
};
MTMSG_API bool EmCodecComponentIndex_IsValid(int value);
const EmCodecComponentIndex EmCodecComponentIndex_MIN = em1st;
const EmCodecComponentIndex EmCodecComponentIndex_MAX = em9th;
const int EmCodecComponentIndex_ARRAYSIZE = EmCodecComponentIndex_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCodecComponentIndex_descriptor();
inline const ::std::string& EmCodecComponentIndex_Name(EmCodecComponentIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCodecComponentIndex_descriptor(), value);
}
inline bool EmCodecComponentIndex_Parse(
    const ::std::string& name, EmCodecComponentIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCodecComponentIndex>(
    EmCodecComponentIndex_descriptor(), name, value);
}
enum EmVidFormat {
  emVH261 = 0,
  emVH262 = 1,
  emVH263 = 2,
  emVH263plus = 3,
  emVH264 = 4,
  emVMPEG4 = 5,
  emVH265 = 6,
  emVEnd = 7
};
MTMSG_API bool EmVidFormat_IsValid(int value);
const EmVidFormat EmVidFormat_MIN = emVH261;
const EmVidFormat EmVidFormat_MAX = emVEnd;
const int EmVidFormat_ARRAYSIZE = EmVidFormat_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVidFormat_descriptor();
inline const ::std::string& EmVidFormat_Name(EmVidFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVidFormat_descriptor(), value);
}
inline bool EmVidFormat_Parse(
    const ::std::string& name, EmVidFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVidFormat>(
    EmVidFormat_descriptor(), name, value);
}
enum EmAudFormat {
  emAG711a = 0,
  emAG711u = 1,
  emAG722 = 2,
  emAG7231 = 3,
  emAG728 = 4,
  emAG729 = 5,
  emAMP3 = 6,
  emAG721 = 7,
  emAG7221 = 8,
  emAG719 = 9,
  emAMpegAACLC = 10,
  emAMpegAACLD = 11,
  emAOpus = 12,
  emAudEnd = 13
};
MTMSG_API bool EmAudFormat_IsValid(int value);
const EmAudFormat EmAudFormat_MIN = emAG711a;
const EmAudFormat EmAudFormat_MAX = emAudEnd;
const int EmAudFormat_ARRAYSIZE = EmAudFormat_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAudFormat_descriptor();
inline const ::std::string& EmAudFormat_Name(EmAudFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAudFormat_descriptor(), value);
}
inline bool EmAudFormat_Parse(
    const ::std::string& name, EmAudFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAudFormat>(
    EmAudFormat_descriptor(), name, value);
}
enum EmEncodeMode {
  emQualityFirst = 0,
  emSpeedFirst = 1
};
MTMSG_API bool EmEncodeMode_IsValid(int value);
const EmEncodeMode EmEncodeMode_MIN = emQualityFirst;
const EmEncodeMode EmEncodeMode_MAX = emSpeedFirst;
const int EmEncodeMode_ARRAYSIZE = EmEncodeMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEncodeMode_descriptor();
inline const ::std::string& EmEncodeMode_Name(EmEncodeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEncodeMode_descriptor(), value);
}
inline bool EmEncodeMode_Parse(
    const ::std::string& name, EmEncodeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEncodeMode>(
    EmEncodeMode_descriptor(), name, value);
}
enum EmTermSwitchMode {
  emModeBegin = 0,
  emAudioAndAssMode = 1
};
MTMSG_API bool EmTermSwitchMode_IsValid(int value);
const EmTermSwitchMode EmTermSwitchMode_MIN = emModeBegin;
const EmTermSwitchMode EmTermSwitchMode_MAX = emAudioAndAssMode;
const int EmTermSwitchMode_ARRAYSIZE = EmTermSwitchMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmTermSwitchMode_descriptor();
inline const ::std::string& EmTermSwitchMode_Name(EmTermSwitchMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmTermSwitchMode_descriptor(), value);
}
inline bool EmTermSwitchMode_Parse(
    const ::std::string& name, EmTermSwitchMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmTermSwitchMode>(
    EmTermSwitchMode_descriptor(), name, value);
}
enum EmMtResolution {
  emMtResAuto = 0,
  emMtSQCIF = 1,
  emMtQCIF = 2,
  emMtCIF = 3,
  emMt2CIF = 4,
  emMt4CIF = 5,
  emMt16CIF = 6,
  emMtVGA352x240 = 7,
  emMt2SIF = 8,
  emMtVGA704x480 = 9,
  emMtVGA640x480 = 10,
  emMtVGA800x600 = 11,
  emMtVGA1024x768 = 12,
  emMtVWCIF = 13,
  emMtVSQCIF112x96 = 14,
  emMtVSQCIF96x80 = 15,
  emMtVW4CIF = 16,
  emMtHD720p1280x720 = 17,
  emMtVGA1280x1024 = 18,
  emMtVGA1600x1200 = 19,
  emMtHD1080i1920x1080 = 20,
  emMtHD1080p1920x1080 = 21,
  emMtVGA1280x800 = 22,
  emMtVGA1440x900 = 23,
  emMtVGA1280x960 = 24,
  emMtV1440x816 = 25,
  emMt1280x720 = 26,
  emMtV960x544 = 27,
  emMtV640x368 = 28,
  emMtV480x272 = 29,
  emMt384x272 = 30,
  emMt640x544 = 31,
  emMt320x272 = 32,
  emMt_720_960x544 = 33,
  emMt_720_864x480 = 34,
  emMt_720_640x368 = 35,
  emMt_720_432x240 = 36,
  emMt_720_320x192 = 37,
  emMtVGA480x352 = 38,
  emMtHD480i720x480 = 39,
  emMtHD480p720x480 = 40,
  emMtHD576i720x576 = 41,
  emMtHD576p720x576 = 42,
  emMtVGA1280x768 = 43,
  emMtVGA1366x768 = 44,
  emMtVGA1280x854 = 45,
  emMtVGA1680x1050 = 46,
  emMtVGA1920x1200 = 47,
  emMtV3840x2160 = 48,
  emMt1280x600 = 49,
  emMt1360x768 = 50,
  emMtVRes3840x2160 = 51,
  emMtVRes4096x2048 = 52,
  emMtVRes4096x2160 = 53,
  emMtVRes4096x2304 = 54,
  emMtVResEnd = 100
};
MTMSG_API bool EmMtResolution_IsValid(int value);
const EmMtResolution EmMtResolution_MIN = emMtResAuto;
const EmMtResolution EmMtResolution_MAX = emMtVResEnd;
const int EmMtResolution_ARRAYSIZE = EmMtResolution_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtResolution_descriptor();
inline const ::std::string& EmMtResolution_Name(EmMtResolution value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtResolution_descriptor(), value);
}
inline bool EmMtResolution_Parse(
    const ::std::string& name, EmMtResolution* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtResolution>(
    EmMtResolution_descriptor(), name, value);
}
enum EmVidPort {
  emH600VidInHDMI = 0,
  emH600VidInVGA = 1,
  emH600VidInC = 2,
  emH600VidOutDVI = 3,
  emH600VidOutHDMI = 4,
  emH700VidInDVI = 5
};
MTMSG_API bool EmVidPort_IsValid(int value);
const EmVidPort EmVidPort_MIN = emH600VidInHDMI;
const EmVidPort EmVidPort_MAX = emH700VidInDVI;
const int EmVidPort_ARRAYSIZE = EmVidPort_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVidPort_descriptor();
inline const ::std::string& EmVidPort_Name(EmVidPort value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVidPort_descriptor(), value);
}
inline bool EmVidPort_Parse(
    const ::std::string& name, EmVidPort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVidPort>(
    EmVidPort_descriptor(), name, value);
}
enum EmAudPort {
  emH600AudInRCA = 0,
  emH600AudOutRCA = 1
};
MTMSG_API bool EmAudPort_IsValid(int value);
const EmAudPort EmAudPort_MIN = emH600AudInRCA;
const EmAudPort EmAudPort_MAX = emH600AudOutRCA;
const int EmAudPort_ARRAYSIZE = EmAudPort_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAudPort_descriptor();
inline const ::std::string& EmAudPort_Name(EmAudPort value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAudPort_descriptor(), value);
}
inline bool EmAudPort_Parse(
    const ::std::string& name, EmAudPort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAudPort>(
    EmAudPort_descriptor(), name, value);
}
enum EmLostPackStrategy {
  emLPSQualityFirst = 0,
  emLPSSpeedSlow = 1,
  emLPSSpeedNormal = 2,
  emLPSSpeedFast = 3
};
MTMSG_API bool EmLostPackStrategy_IsValid(int value);
const EmLostPackStrategy EmLostPackStrategy_MIN = emLPSQualityFirst;
const EmLostPackStrategy EmLostPackStrategy_MAX = emLPSSpeedFast;
const int EmLostPackStrategy_ARRAYSIZE = EmLostPackStrategy_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmLostPackStrategy_descriptor();
inline const ::std::string& EmLostPackStrategy_Name(EmLostPackStrategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmLostPackStrategy_descriptor(), value);
}
inline bool EmLostPackStrategy_Parse(
    const ::std::string& name, EmLostPackStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmLostPackStrategy>(
    EmLostPackStrategy_descriptor(), name, value);
}
enum EmIpAddrType {
  emIpV4 = 0,
  emIpV6 = 1
};
MTMSG_API bool EmIpAddrType_IsValid(int value);
const EmIpAddrType EmIpAddrType_MIN = emIpV4;
const EmIpAddrType EmIpAddrType_MAX = emIpV6;
const int EmIpAddrType_ARRAYSIZE = EmIpAddrType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmIpAddrType_descriptor();
inline const ::std::string& EmIpAddrType_Name(EmIpAddrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmIpAddrType_descriptor(), value);
}
inline bool EmIpAddrType_Parse(
    const ::std::string& name, EmIpAddrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmIpAddrType>(
    EmIpAddrType_descriptor(), name, value);
}
enum EmStopBits {
  em0StopBit = 0,
  em1StopBit = 1,
  em2StopBit = 2,
  em1HalfStopBit = 3
};
MTMSG_API bool EmStopBits_IsValid(int value);
const EmStopBits EmStopBits_MIN = em0StopBit;
const EmStopBits EmStopBits_MAX = em1HalfStopBit;
const int EmStopBits_ARRAYSIZE = EmStopBits_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmStopBits_descriptor();
inline const ::std::string& EmStopBits_Name(EmStopBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmStopBits_descriptor(), value);
}
inline bool EmStopBits_Parse(
    const ::std::string& name, EmStopBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmStopBits>(
    EmStopBits_descriptor(), name, value);
}
enum EmParityCheck {
  emNoCheck = 0,
  emOddCheck = 1,
  emEvenCheck = 2
};
MTMSG_API bool EmParityCheck_IsValid(int value);
const EmParityCheck EmParityCheck_MIN = emNoCheck;
const EmParityCheck EmParityCheck_MAX = emEvenCheck;
const int EmParityCheck_ARRAYSIZE = EmParityCheck_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmParityCheck_descriptor();
inline const ::std::string& EmParityCheck_Name(EmParityCheck value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmParityCheck_descriptor(), value);
}
inline bool EmParityCheck_Parse(
    const ::std::string& name, EmParityCheck* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmParityCheck>(
    EmParityCheck_descriptor(), name, value);
}
enum EmSerialType {
  emRS232 = 0,
  emRS422 = 1,
  emRS485 = 2,
  emSerialInfrared = 3,
  emHDBaseT1 = 4,
  emHDBaseT2 = 5,
  emRS232_2 = 6
};
MTMSG_API bool EmSerialType_IsValid(int value);
const EmSerialType EmSerialType_MIN = emRS232;
const EmSerialType EmSerialType_MAX = emRS232_2;
const int EmSerialType_ARRAYSIZE = EmSerialType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSerialType_descriptor();
inline const ::std::string& EmSerialType_Name(EmSerialType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSerialType_descriptor(), value);
}
inline bool EmSerialType_Parse(
    const ::std::string& name, EmSerialType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSerialType>(
    EmSerialType_descriptor(), name, value);
}
enum EmDisplayRatio {
  emDR4to3 = 0,
  emDR16to9 = 1,
  emDRAuto = 2
};
MTMSG_API bool EmDisplayRatio_IsValid(int value);
const EmDisplayRatio EmDisplayRatio_MIN = emDR4to3;
const EmDisplayRatio EmDisplayRatio_MAX = emDRAuto;
const int EmDisplayRatio_ARRAYSIZE = EmDisplayRatio_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDisplayRatio_descriptor();
inline const ::std::string& EmDisplayRatio_Name(EmDisplayRatio value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDisplayRatio_descriptor(), value);
}
inline bool EmDisplayRatio_Parse(
    const ::std::string& name, EmDisplayRatio* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDisplayRatio>(
    EmDisplayRatio_descriptor(), name, value);
}
enum EmAnswerMode {
  emAnswerModeAuto = 0,
  emAnswerModeManu = 1,
  emAnswerModeNegative = 2
};
MTMSG_API bool EmAnswerMode_IsValid(int value);
const EmAnswerMode EmAnswerMode_MIN = emAnswerModeAuto;
const EmAnswerMode EmAnswerMode_MAX = emAnswerModeNegative;
const int EmAnswerMode_ARRAYSIZE = EmAnswerMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAnswerMode_descriptor();
inline const ::std::string& EmAnswerMode_Name(EmAnswerMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAnswerMode_descriptor(), value);
}
inline bool EmAnswerMode_Parse(
    const ::std::string& name, EmAnswerMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAnswerMode>(
    EmAnswerMode_descriptor(), name, value);
}
enum EmH264AdditionalModes {
  emModeNone = 0,
  emModeRCD0 = 64,
  emModeSBP = 32,
  emModeSHP = 16
};
MTMSG_API bool EmH264AdditionalModes_IsValid(int value);
const EmH264AdditionalModes EmH264AdditionalModes_MIN = emModeNone;
const EmH264AdditionalModes EmH264AdditionalModes_MAX = emModeRCD0;
const int EmH264AdditionalModes_ARRAYSIZE = EmH264AdditionalModes_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmH264AdditionalModes_descriptor();
inline const ::std::string& EmH264AdditionalModes_Name(EmH264AdditionalModes value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmH264AdditionalModes_descriptor(), value);
}
inline bool EmH264AdditionalModes_Parse(
    const ::std::string& name, EmH264AdditionalModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmH264AdditionalModes>(
    EmH264AdditionalModes_descriptor(), name, value);
}
enum EmH264Profile {
  emInvalid = 0,
  emBaseline = 1,
  emMain = 2,
  emExtended = 4,
  emHigh = 8,
  emHigh10 = 16,
  emHigh422 = 32,
  emHigh444 = 64
};
MTMSG_API bool EmH264Profile_IsValid(int value);
const EmH264Profile EmH264Profile_MIN = emInvalid;
const EmH264Profile EmH264Profile_MAX = emHigh444;
const int EmH264Profile_ARRAYSIZE = EmH264Profile_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmH264Profile_descriptor();
inline const ::std::string& EmH264Profile_Name(EmH264Profile value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmH264Profile_descriptor(), value);
}
inline bool EmH264Profile_Parse(
    const ::std::string& name, EmH264Profile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmH264Profile>(
    EmH264Profile_descriptor(), name, value);
}
enum EmH265Profile {
  emProfileMain = 0,
  emProfileMain10 = 1,
  emProfileMainStill = 2
};
MTMSG_API bool EmH265Profile_IsValid(int value);
const EmH265Profile EmH265Profile_MIN = emProfileMain;
const EmH265Profile EmH265Profile_MAX = emProfileMainStill;
const int EmH265Profile_ARRAYSIZE = EmH265Profile_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmH265Profile_descriptor();
inline const ::std::string& EmH265Profile_Name(EmH265Profile value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmH265Profile_descriptor(), value);
}
inline bool EmH265Profile_Parse(
    const ::std::string& name, EmH265Profile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmH265Profile>(
    EmH265Profile_descriptor(), name, value);
}
enum EmDirection {
  emUP = 0,
  emDown = 1,
  emLeft = 2,
  emRight = 3,
  emDirInvalid = 10
};
MTMSG_API bool EmDirection_IsValid(int value);
const EmDirection EmDirection_MIN = emUP;
const EmDirection EmDirection_MAX = emDirInvalid;
const int EmDirection_ARRAYSIZE = EmDirection_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDirection_descriptor();
inline const ::std::string& EmDirection_Name(EmDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDirection_descriptor(), value);
}
inline bool EmDirection_Parse(
    const ::std::string& name, EmDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDirection>(
    EmDirection_descriptor(), name, value);
}
enum EmFeccPTFZRequest {
  emFeccRequestInvalid = 0,
  emFeccPanLeft = 128,
  emFeccPanRight = 192,
  emFeccTiltUp = 48,
  emFeccTiltDown = 32,
  emFeccFocusIn = 3,
  emFeccFocusOut = 2,
  emFeccZoomIn = 12,
  emFeccZoomOut = 8,
  emFeccBrightnessUp = 1,
  emFeccBrightnessDown = 4
};
MTMSG_API bool EmFeccPTFZRequest_IsValid(int value);
const EmFeccPTFZRequest EmFeccPTFZRequest_MIN = emFeccRequestInvalid;
const EmFeccPTFZRequest EmFeccPTFZRequest_MAX = emFeccPanRight;
const int EmFeccPTFZRequest_ARRAYSIZE = EmFeccPTFZRequest_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmFeccPTFZRequest_descriptor();
inline const ::std::string& EmFeccPTFZRequest_Name(EmFeccPTFZRequest value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmFeccPTFZRequest_descriptor(), value);
}
inline bool EmFeccPTFZRequest_Parse(
    const ::std::string& name, EmFeccPTFZRequest* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmFeccPTFZRequest>(
    EmFeccPTFZRequest_descriptor(), name, value);
}
enum EmFeccAction {
  emFeccActionInvalid = 0,
  emFeccActionStart = 1,
  emFeccActionContinue = 2,
  emFeccActionStop = 3,
  emFeccActionSelectVideoSource = 4,
  emFeccActionVideoSourceSwitched = 5,
  emFeccActionStoreAsPreset = 6,
  emFeccActionActivatePreset = 7,
  emFeccActionAutoFocus = 17
};
MTMSG_API bool EmFeccAction_IsValid(int value);
const EmFeccAction EmFeccAction_MIN = emFeccActionInvalid;
const EmFeccAction EmFeccAction_MAX = emFeccActionAutoFocus;
const int EmFeccAction_ARRAYSIZE = EmFeccAction_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmFeccAction_descriptor();
inline const ::std::string& EmFeccAction_Name(EmFeccAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmFeccAction_descriptor(), value);
}
inline bool EmFeccAction_Parse(
    const ::std::string& name, EmFeccAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmFeccAction>(
    EmFeccAction_descriptor(), name, value);
}
enum EmFeccCMEMsgType {
  emFeccCMEInvalid = 0,
  emFeccCMEClientListInfo = 1,
  emFeccCMEClientListCommond = 2,
  emFeccCMEExtraCapInfo = 3,
  emFeccCMEExtraCapCommond = 4
};
MTMSG_API bool EmFeccCMEMsgType_IsValid(int value);
const EmFeccCMEMsgType EmFeccCMEMsgType_MIN = emFeccCMEInvalid;
const EmFeccCMEMsgType EmFeccCMEMsgType_MAX = emFeccCMEExtraCapCommond;
const int EmFeccCMEMsgType_ARRAYSIZE = EmFeccCMEMsgType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmFeccCMEMsgType_descriptor();
inline const ::std::string& EmFeccCMEMsgType_Name(EmFeccCMEMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmFeccCMEMsgType_descriptor(), value);
}
inline bool EmFeccCMEMsgType_Parse(
    const ::std::string& name, EmFeccCMEMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmFeccCMEMsgType>(
    EmFeccCMEMsgType_descriptor(), name, value);
}
enum EmMtSysStartMod {
  emSysStartMod_By_lib = 0,
  emSysStartMod_By_Dll = 1,
  emSysStartMod_By_Process = 2,
  emSysStartMod_End = 3
};
MTMSG_API bool EmMtSysStartMod_IsValid(int value);
const EmMtSysStartMod EmMtSysStartMod_MIN = emSysStartMod_By_lib;
const EmMtSysStartMod EmMtSysStartMod_MAX = emSysStartMod_End;
const int EmMtSysStartMod_ARRAYSIZE = EmMtSysStartMod_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtSysStartMod_descriptor();
inline const ::std::string& EmMtSysStartMod_Name(EmMtSysStartMod value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtSysStartMod_descriptor(), value);
}
inline bool EmMtSysStartMod_Parse(
    const ::std::string& name, EmMtSysStartMod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtSysStartMod>(
    EmMtSysStartMod_descriptor(), name, value);
}
enum EmMtSysStartModFromUI {
  emSysStart_By_Dll = 0,
  emSysStart_By_Process = 1,
  emSysStart_End = 2
};
MTMSG_API bool EmMtSysStartModFromUI_IsValid(int value);
const EmMtSysStartModFromUI EmMtSysStartModFromUI_MIN = emSysStart_By_Dll;
const EmMtSysStartModFromUI EmMtSysStartModFromUI_MAX = emSysStart_End;
const int EmMtSysStartModFromUI_ARRAYSIZE = EmMtSysStartModFromUI_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtSysStartModFromUI_descriptor();
inline const ::std::string& EmMtSysStartModFromUI_Name(EmMtSysStartModFromUI value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtSysStartModFromUI_descriptor(), value);
}
inline bool EmMtSysStartModFromUI_Parse(
    const ::std::string& name, EmMtSysStartModFromUI* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtSysStartModFromUI>(
    EmMtSysStartModFromUI_descriptor(), name, value);
}
enum EmMtSysSrvState {
  emSysSrvState_Idle = 0,
  emSysSrvState_Binded = 1,
  emSysSrvState_Running = 2,
  emSysSrvState_Stop = 3,
  emSysSrvState_Err = 4
};
MTMSG_API bool EmMtSysSrvState_IsValid(int value);
const EmMtSysSrvState EmMtSysSrvState_MIN = emSysSrvState_Idle;
const EmMtSysSrvState EmMtSysSrvState_MAX = emSysSrvState_Err;
const int EmMtSysSrvState_ARRAYSIZE = EmMtSysSrvState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtSysSrvState_descriptor();
inline const ::std::string& EmMtSysSrvState_Name(EmMtSysSrvState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtSysSrvState_descriptor(), value);
}
inline bool EmMtSysSrvState_Parse(
    const ::std::string& name, EmMtSysSrvState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtSysSrvState>(
    EmMtSysSrvState_descriptor(), name, value);
}
enum EmMtSysKeepLiveState {
  emSysKLState_Ready = 0,
  emSysKLState_Alive = 1,
  emSysKLState_Err = 2
};
MTMSG_API bool EmMtSysKeepLiveState_IsValid(int value);
const EmMtSysKeepLiveState EmMtSysKeepLiveState_MIN = emSysKLState_Ready;
const EmMtSysKeepLiveState EmMtSysKeepLiveState_MAX = emSysKLState_Err;
const int EmMtSysKeepLiveState_ARRAYSIZE = EmMtSysKeepLiveState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtSysKeepLiveState_descriptor();
inline const ::std::string& EmMtSysKeepLiveState_Name(EmMtSysKeepLiveState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtSysKeepLiveState_descriptor(), value);
}
inline bool EmMtSysKeepLiveState_Parse(
    const ::std::string& name, EmMtSysKeepLiveState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtSysKeepLiveState>(
    EmMtSysKeepLiveState_descriptor(), name, value);
}
enum EmMtChanType {
  emChanSendAudio = 0,
  emChanRecvAudio = 1,
  emChanSendVideo = 2,
  emChanRecvVideo = 3,
  emChanSendAssAudio = 4,
  emChanRecvAssAudio = 5,
  emChanSendAssVideo = 6,
  emChanRecvAssVideo = 7,
  emChanSendFecc = 8,
  emChanRecvFecc = 9,
  emChanSendT120 = 10,
  emChanRecvT120 = 11,
  emChanTypeEnd = 12
};
MTMSG_API bool EmMtChanType_IsValid(int value);
const EmMtChanType EmMtChanType_MIN = emChanSendAudio;
const EmMtChanType EmMtChanType_MAX = emChanTypeEnd;
const int EmMtChanType_ARRAYSIZE = EmMtChanType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtChanType_descriptor();
inline const ::std::string& EmMtChanType_Name(EmMtChanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtChanType_descriptor(), value);
}
inline bool EmMtChanType_Parse(
    const ::std::string& name, EmMtChanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtChanType>(
    EmMtChanType_descriptor(), name, value);
}
enum EmMtAssStreamType {
  emAssStreamBegin = 0,
  emPcAssStream = 1,
  emVideoAssStream = 2
};
MTMSG_API bool EmMtAssStreamType_IsValid(int value);
const EmMtAssStreamType EmMtAssStreamType_MIN = emAssStreamBegin;
const EmMtAssStreamType EmMtAssStreamType_MAX = emVideoAssStream;
const int EmMtAssStreamType_ARRAYSIZE = EmMtAssStreamType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtAssStreamType_descriptor();
inline const ::std::string& EmMtAssStreamType_Name(EmMtAssStreamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtAssStreamType_descriptor(), value);
}
inline bool EmMtAssStreamType_Parse(
    const ::std::string& name, EmMtAssStreamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtAssStreamType>(
    EmMtAssStreamType_descriptor(), name, value);
}
enum EmMtVidLabel {
  emVidLabBegin = 0,
  emPcStreamVidLab = 20,
  emVideoStreamVidLab = 21
};
MTMSG_API bool EmMtVidLabel_IsValid(int value);
const EmMtVidLabel EmMtVidLabel_MIN = emVidLabBegin;
const EmMtVidLabel EmMtVidLabel_MAX = emVideoStreamVidLab;
const int EmMtVidLabel_ARRAYSIZE = EmMtVidLabel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtVidLabel_descriptor();
inline const ::std::string& EmMtVidLabel_Name(EmMtVidLabel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtVidLabel_descriptor(), value);
}
inline bool EmMtVidLabel_Parse(
    const ::std::string& name, EmMtVidLabel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtVidLabel>(
    EmMtVidLabel_descriptor(), name, value);
}
enum EmMtAudLabel {
  emAudLabBegin = 0
};
MTMSG_API bool EmMtAudLabel_IsValid(int value);
const EmMtAudLabel EmMtAudLabel_MIN = emAudLabBegin;
const EmMtAudLabel EmMtAudLabel_MAX = emAudLabBegin;
const int EmMtAudLabel_ARRAYSIZE = EmMtAudLabel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtAudLabel_descriptor();
inline const ::std::string& EmMtAudLabel_Name(EmMtAudLabel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtAudLabel_descriptor(), value);
}
inline bool EmMtAudLabel_Parse(
    const ::std::string& name, EmMtAudLabel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtAudLabel>(
    EmMtAudLabel_descriptor(), name, value);
}
enum EmMtConfType {
  emConfType_Video = 0,
  emConfType_Audio = 1
};
MTMSG_API bool EmMtConfType_IsValid(int value);
const EmMtConfType EmMtConfType_MIN = emConfType_Video;
const EmMtConfType EmMtConfType_MAX = emConfType_Audio;
const int EmMtConfType_ARRAYSIZE = EmMtConfType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtConfType_descriptor();
inline const ::std::string& EmMtConfType_Name(EmMtConfType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtConfType_descriptor(), value);
}
inline bool EmMtConfType_Parse(
    const ::std::string& name, EmMtConfType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtConfType>(
    EmMtConfType_descriptor(), name, value);
}
enum EmMtMediaType {
  emMediaBegin = 0,
  emMediaVideo = 1,
  emMediaAudio = 2,
  emMediaAV = 3,
  emMediaAssVideo = 4
};
MTMSG_API bool EmMtMediaType_IsValid(int value);
const EmMtMediaType EmMtMediaType_MIN = emMediaBegin;
const EmMtMediaType EmMtMediaType_MAX = emMediaAssVideo;
const int EmMtMediaType_ARRAYSIZE = EmMtMediaType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtMediaType_descriptor();
inline const ::std::string& EmMtMediaType_Name(EmMtMediaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtMediaType_descriptor(), value);
}
inline bool EmMtMediaType_Parse(
    const ::std::string& name, EmMtMediaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtMediaType>(
    EmMtMediaType_descriptor(), name, value);
}
enum EmMediaModeDef {
  emMediaMdoeNone = 0,
  emMediaMdoeVideo = 1,
  emMediaMdoeAudio = 2,
  emMediaMdoeBoth = 3,
  emMediaMdoeData = 4,
  emMediaMdoeSecvideo = 5
};
MTMSG_API bool EmMediaModeDef_IsValid(int value);
const EmMediaModeDef EmMediaModeDef_MIN = emMediaMdoeNone;
const EmMediaModeDef EmMediaModeDef_MAX = emMediaMdoeSecvideo;
const int EmMediaModeDef_ARRAYSIZE = EmMediaModeDef_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMediaModeDef_descriptor();
inline const ::std::string& EmMediaModeDef_Name(EmMediaModeDef value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMediaModeDef_descriptor(), value);
}
inline bool EmMediaModeDef_Parse(
    const ::std::string& name, EmMediaModeDef* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMediaModeDef>(
    EmMediaModeDef_descriptor(), name, value);
}
enum EmSite {
  emLocal = 0,
  emRemote = 1
};
MTMSG_API bool EmSite_IsValid(int value);
const EmSite EmSite_MIN = emLocal;
const EmSite EmSite_MAX = emRemote;
const int EmSite_ARRAYSIZE = EmSite_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSite_descriptor();
inline const ::std::string& EmSite_Name(EmSite value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSite_descriptor(), value);
}
inline bool EmSite_Parse(
    const ::std::string& name, EmSite* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSite>(
    EmSite_descriptor(), name, value);
}
enum EmMtMediaDirection {
  emDirectionBegin = 0,
  emChannelSend = 1,
  emChannelRecv = 2
};
MTMSG_API bool EmMtMediaDirection_IsValid(int value);
const EmMtMediaDirection EmMtMediaDirection_MIN = emDirectionBegin;
const EmMtMediaDirection EmMtMediaDirection_MAX = emChannelRecv;
const int EmMtMediaDirection_ARRAYSIZE = EmMtMediaDirection_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtMediaDirection_descriptor();
inline const ::std::string& EmMtMediaDirection_Name(EmMtMediaDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtMediaDirection_descriptor(), value);
}
inline bool EmMtMediaDirection_Parse(
    const ::std::string& name, EmMtMediaDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtMediaDirection>(
    EmMtMediaDirection_descriptor(), name, value);
}
enum EmAacChnlNum {
  emCnNumCust = 0,
  emCnNum1 = 1,
  emCnNum2 = 2,
  emCnNum3 = 4,
  emCnNum4 = 8,
  emCnNum5 = 16,
  emCnNum5dot1 = 32,
  emCnNum7dot1 = 64
};
MTMSG_API bool EmAacChnlNum_IsValid(int value);
const EmAacChnlNum EmAacChnlNum_MIN = emCnNumCust;
const EmAacChnlNum EmAacChnlNum_MAX = emCnNum7dot1;
const int EmAacChnlNum_ARRAYSIZE = EmAacChnlNum_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAacChnlNum_descriptor();
inline const ::std::string& EmAacChnlNum_Name(EmAacChnlNum value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAacChnlNum_descriptor(), value);
}
inline bool EmAacChnlNum_Parse(
    const ::std::string& name, EmAacChnlNum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAacChnlNum>(
    EmAacChnlNum_descriptor(), name, value);
}
enum EmAacSampFreq {
  emASF96000 = 0,
  emASF88200 = 1,
  emASF64000 = 2,
  emASF48000 = 3,
  emASF44100 = 4,
  emASF32000 = 5,
  emASF24000 = 6,
  emASF22050 = 7,
  emASF16000 = 8,
  emASF12000 = 9,
  emASF11025 = 10,
  emASF8000 = 11
};
MTMSG_API bool EmAacSampFreq_IsValid(int value);
const EmAacSampFreq EmAacSampFreq_MIN = emASF96000;
const EmAacSampFreq EmAacSampFreq_MAX = emASF8000;
const int EmAacSampFreq_ARRAYSIZE = EmAacSampFreq_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAacSampFreq_descriptor();
inline const ::std::string& EmAacSampFreq_Name(EmAacSampFreq value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAacSampFreq_descriptor(), value);
}
inline bool EmAacSampFreq_Parse(
    const ::std::string& name, EmAacSampFreq* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAacSampFreq>(
    EmAacSampFreq_descriptor(), name, value);
}
enum EmMtChanState {
  emChanIdle = 0,
  emChanConnected = 1
};
MTMSG_API bool EmMtChanState_IsValid(int value);
const EmMtChanState EmMtChanState_MIN = emChanIdle;
const EmMtChanState EmMtChanState_MAX = emChanConnected;
const int EmMtChanState_ARRAYSIZE = EmMtChanState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtChanState_descriptor();
inline const ::std::string& EmMtChanState_Name(EmMtChanState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtChanState_descriptor(), value);
}
inline bool EmMtChanState_Parse(
    const ::std::string& name, EmMtChanState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtChanState>(
    EmMtChanState_descriptor(), name, value);
}
enum EmMtCallingType {
  emJoinConf = 0,
  emCreateConf = 1,
  emOutCall = 2,
  emIncomingCall = 3
};
MTMSG_API bool EmMtCallingType_IsValid(int value);
const EmMtCallingType EmMtCallingType_MIN = emJoinConf;
const EmMtCallingType EmMtCallingType_MAX = emIncomingCall;
const int EmMtCallingType_ARRAYSIZE = EmMtCallingType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtCallingType_descriptor();
inline const ::std::string& EmMtCallingType_Name(EmMtCallingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtCallingType_descriptor(), value);
}
inline bool EmMtCallingType_Parse(
    const ::std::string& name, EmMtCallingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtCallingType>(
    EmMtCallingType_descriptor(), name, value);
}
enum EmMtCallState {
  emCallIdle = 0,
  emCallRasConfJoining = 1,
  emCallRasConfCreating = 2,
  emCallOuting = 3,
  emCallIncoming = 4,
  emCallAccepted = 5,
  emCallHanging = 6,
  emCallConnected = 7,
  emCallP2P = 8,
  emCallMCC = 9
};
MTMSG_API bool EmMtCallState_IsValid(int value);
const EmMtCallState EmMtCallState_MIN = emCallIdle;
const EmMtCallState EmMtCallState_MAX = emCallMCC;
const int EmMtCallState_ARRAYSIZE = EmMtCallState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtCallState_descriptor();
inline const ::std::string& EmMtCallState_Name(EmMtCallState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtCallState_descriptor(), value);
}
inline bool EmMtCallState_Parse(
    const ::std::string& name, EmMtCallState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtCallState>(
    EmMtCallState_descriptor(), name, value);
}
enum EmH323ChanState {
  emChanStateIdle = 0,
  emChanStateCreating = 1,
  emChanStateOpening = 2,
  emChanStateRejected = 3,
  emChanStateOffering = 4,
  emChanStateConnected = 5,
  emChanStateReopening = 6,
  emChanStateDisconnecting = 7
};
MTMSG_API bool EmH323ChanState_IsValid(int value);
const EmH323ChanState EmH323ChanState_MIN = emChanStateIdle;
const EmH323ChanState EmH323ChanState_MAX = emChanStateDisconnecting;
const int EmH323ChanState_ARRAYSIZE = EmH323ChanState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmH323ChanState_descriptor();
inline const ::std::string& EmH323ChanState_Name(EmH323ChanState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmH323ChanState_descriptor(), value);
}
inline bool EmH323ChanState_Parse(
    const ::std::string& name, EmH323ChanState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmH323ChanState>(
    EmH323ChanState_descriptor(), name, value);
}
enum EmH323CallState {
  emCallStateIdle = 0,
  emCallState460Out = 1,
  emCallStateCreating = 2,
  emCallStateArqOutgoing = 3,
  emCallStateCallOuting = 4,
  emCallStateCallincoming = 5,
  emCallStateCallAccepted = 6,
  emCallStateHanguping = 7,
  emCallStateConnected = 8,
  emCallStateOpenChanReady = 9
};
MTMSG_API bool EmH323CallState_IsValid(int value);
const EmH323CallState EmH323CallState_MIN = emCallStateIdle;
const EmH323CallState EmH323CallState_MAX = emCallStateOpenChanReady;
const int EmH323CallState_ARRAYSIZE = EmH323CallState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmH323CallState_descriptor();
inline const ::std::string& EmH323CallState_Name(EmH323CallState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmH323CallState_descriptor(), value);
}
inline bool EmH323CallState_Parse(
    const ::std::string& name, EmH323CallState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmH323CallState>(
    EmH323CallState_descriptor(), name, value);
}
enum EmEndpointType {
  emEndpointTypeUnknown = 0,
  emEndpointTypeMT = 1,
  emEndpointTypeMCU = 2,
  emEndpointTypeGK = 4
};
MTMSG_API bool EmEndpointType_IsValid(int value);
const EmEndpointType EmEndpointType_MIN = emEndpointTypeUnknown;
const EmEndpointType EmEndpointType_MAX = emEndpointTypeGK;
const int EmEndpointType_ARRAYSIZE = EmEndpointType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEndpointType_descriptor();
inline const ::std::string& EmEndpointType_Name(EmEndpointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEndpointType_descriptor(), value);
}
inline bool EmEndpointType_Parse(
    const ::std::string& name, EmEndpointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEndpointType>(
    EmEndpointType_descriptor(), name, value);
}
enum EmSMSType {
  emSMSSingleLine = 0,
  emSMSPageTitle = 1,
  emSMSRollTitle = 2,
  emSMSStaticTitle = 3,
  emSMSUpRollTitle = 4
};
MTMSG_API bool EmSMSType_IsValid(int value);
const EmSMSType EmSMSType_MIN = emSMSSingleLine;
const EmSMSType EmSMSType_MAX = emSMSUpRollTitle;
const int EmSMSType_ARRAYSIZE = EmSMSType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSMSType_descriptor();
inline const ::std::string& EmSMSType_Name(EmSMSType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSMSType_descriptor(), value);
}
inline bool EmSMSType_Parse(
    const ::std::string& name, EmSMSType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSMSType>(
    EmSMSType_descriptor(), name, value);
}
enum EmRollMsgSpeed {
  emROLL_SPEED_1 = 1,
  emROLL_SPEED_2 = 2,
  emROLL_SPEED_3 = 3,
  emROLL_SPEED_4 = 4,
  emROLL_SPEED_5 = 5
};
MTMSG_API bool EmRollMsgSpeed_IsValid(int value);
const EmRollMsgSpeed EmRollMsgSpeed_MIN = emROLL_SPEED_1;
const EmRollMsgSpeed EmRollMsgSpeed_MAX = emROLL_SPEED_5;
const int EmRollMsgSpeed_ARRAYSIZE = EmRollMsgSpeed_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRollMsgSpeed_descriptor();
inline const ::std::string& EmRollMsgSpeed_Name(EmRollMsgSpeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRollMsgSpeed_descriptor(), value);
}
inline bool EmRollMsgSpeed_Parse(
    const ::std::string& name, EmRollMsgSpeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRollMsgSpeed>(
    EmRollMsgSpeed_descriptor(), name, value);
}
enum EmMtVideoPort {
  emMtVidInvalid = 0,
  emMtVidMultiView = 1,
  emMtVidInnerCamera = 2,
  emMtVidDVI1 = 3,
  emMtVidDVI2 = 4,
  emMtVidDVI3 = 5,
  emMtVidDVI4 = 6,
  emMtVidHDMI1 = 7,
  emMtVidHDMI2 = 8,
  emMtVidHDMI3 = 9,
  emMtVidHDMI4 = 10,
  emMtVidYPbPr1 = 11,
  emMtVidYPbPr2 = 12,
  emMtVidYPbPr3 = 13,
  emMtVidYPbPr4 = 14,
  emMtVidVGA1 = 15,
  emMtVidVGA2 = 16,
  emMtVidVGA3 = 17,
  emMtVidVGA4 = 18,
  emMtVidC1 = 19,
  emMtVidC2 = 20,
  emMtVidC3 = 21,
  emMtVidS1 = 22,
  emMtVidS2 = 23,
  emMtVidS3 = 24,
  emMtVidHDBaseT1 = 25,
  emMtVidHDBaseT2 = 26,
  emMtVidHDBaseT3 = 27,
  emMtVidHDBaseT4 = 28,
  emMtVidSDI1 = 29,
  emMtVidSDI2 = 30,
  emMtVidSDI3 = 31,
  emMtVidSDI4 = 32
};
MTMSG_API bool EmMtVideoPort_IsValid(int value);
const EmMtVideoPort EmMtVideoPort_MIN = emMtVidInvalid;
const EmMtVideoPort EmMtVideoPort_MAX = emMtVidSDI4;
const int EmMtVideoPort_ARRAYSIZE = EmMtVideoPort_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtVideoPort_descriptor();
inline const ::std::string& EmMtVideoPort_Name(EmMtVideoPort value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtVideoPort_descriptor(), value);
}
inline bool EmMtVideoPort_Parse(
    const ::std::string& name, EmMtVideoPort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtVideoPort>(
    EmMtVideoPort_descriptor(), name, value);
}
enum EmMtJoinCreateConfRsp {
  emJoinCreat_Success = 0,
  emJoinCreat_Serdb_err = 1,
  emJoinCreat_Timeout_err = 2,
  emJoinCreat_Note164_err = 3,
  emJoinCreat_Data_err = 4,
  emJoinCreat_Mcu_noidlevpu = 5,
  emJoinCreat_Mcu_minimediaconfmtnum = 6,
  emJoinCreat_Mcu_maxconfnum = 7,
  emJoinCreat_Mcu_encrypeerr = 8,
  emJoinCreat_Mcu_confnotexist = 9,
  emJoinCreat_Mcu_undefined = 10,
  emJoinCreat_Gk_mpcd_disconnected = 11,
  emJoinCreat_Mcu_maxmtnum = 12,
  emJoinCreat_Mcu_pwderr = 13,
  emJoinCreat_Mcu_nsatpms = 14,
  emJoinCreat_Mcu_nsatdaddr = 15,
  emJoinCreat_E164_repeat = 16,
  emJoinCreat_CallerNum_exceed = 17,
  emJoinCreat_Mcu_NoDisturbReject = 18,
  emJoinCreat_Mcu_ConfResuming = 19,
  emJoinCreat_Mcu_NoPermission = 20
};
MTMSG_API bool EmMtJoinCreateConfRsp_IsValid(int value);
const EmMtJoinCreateConfRsp EmMtJoinCreateConfRsp_MIN = emJoinCreat_Success;
const EmMtJoinCreateConfRsp EmMtJoinCreateConfRsp_MAX = emJoinCreat_Mcu_NoPermission;
const int EmMtJoinCreateConfRsp_ARRAYSIZE = EmMtJoinCreateConfRsp_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtJoinCreateConfRsp_descriptor();
inline const ::std::string& EmMtJoinCreateConfRsp_Name(EmMtJoinCreateConfRsp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtJoinCreateConfRsp_descriptor(), value);
}
inline bool EmMtJoinCreateConfRsp_Parse(
    const ::std::string& name, EmMtJoinCreateConfRsp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtJoinCreateConfRsp>(
    EmMtJoinCreateConfRsp_descriptor(), name, value);
}
enum EmMtConfDetailErr {
  emConfDetail_Err_Success = 0,
  emConfDetail_Err_Ser_db = 1,
  emConfDetail_Err_Timeout = 2,
  emConfDetail_Err_Note164 = 3,
  emConfDetail_Err_Data = 4,
  emConfDetail_Err_Isover = 5,
  emConfDetail_Err_Unknown = 6
};
MTMSG_API bool EmMtConfDetailErr_IsValid(int value);
const EmMtConfDetailErr EmMtConfDetailErr_MIN = emConfDetail_Err_Success;
const EmMtConfDetailErr EmMtConfDetailErr_MAX = emConfDetail_Err_Unknown;
const int EmMtConfDetailErr_ARRAYSIZE = EmMtConfDetailErr_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtConfDetailErr_descriptor();
inline const ::std::string& EmMtConfDetailErr_Name(EmMtConfDetailErr value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtConfDetailErr_descriptor(), value);
}
inline bool EmMtConfDetailErr_Parse(
    const ::std::string& name, EmMtConfDetailErr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtConfDetailErr>(
    EmMtConfDetailErr_descriptor(), name, value);
}
enum EmMtDualMode {
  MT_DUAL_MODE_SPEAKER = 0,
  MT_DUAL_MODE_EVERYONE = 1,
  MT_DUAL_MODE_INVALID = 2
};
MTMSG_API bool EmMtDualMode_IsValid(int value);
const EmMtDualMode EmMtDualMode_MIN = MT_DUAL_MODE_SPEAKER;
const EmMtDualMode EmMtDualMode_MAX = MT_DUAL_MODE_INVALID;
const int EmMtDualMode_ARRAYSIZE = EmMtDualMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtDualMode_descriptor();
inline const ::std::string& EmMtDualMode_Name(EmMtDualMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtDualMode_descriptor(), value);
}
inline bool EmMtDualMode_Parse(
    const ::std::string& name, EmMtDualMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtDualMode>(
    EmMtDualMode_descriptor(), name, value);
}
enum EmMtPollModeDef {
  emPOLL_MODE_NONE = 0,
  emOLL_MODE_VIDEO = 1,
  emPOLL_MODE_SPEAKER = 2,
  emPOLL_MODE_VIDEO_SPY = 3,
  emPOLL_MODE_SPEAKER_SPY = 4,
  emPOLL_MODE_VIDEO_BOTH = 5,
  emPOLL_MODE_SPEAKER_BOTH = 6,
  emPOLL_MODE_VIDEO_CHAIRMAN = 7,
  emPOLL_MODE_BOTH_CHAIRMAN = 8
};
MTMSG_API bool EmMtPollModeDef_IsValid(int value);
const EmMtPollModeDef EmMtPollModeDef_MIN = emPOLL_MODE_NONE;
const EmMtPollModeDef EmMtPollModeDef_MAX = emPOLL_MODE_BOTH_CHAIRMAN;
const int EmMtPollModeDef_ARRAYSIZE = EmMtPollModeDef_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtPollModeDef_descriptor();
inline const ::std::string& EmMtPollModeDef_Name(EmMtPollModeDef value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtPollModeDef_descriptor(), value);
}
inline bool EmMtPollModeDef_Parse(
    const ::std::string& name, EmMtPollModeDef* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtPollModeDef>(
    EmMtPollModeDef_descriptor(), name, value);
}
enum EmMtPairTalkOperationType {
  emMtPairTalkOperationTypeBegin = 0,
  emMtPairTalkOperationTypeChairStart = 1,
  emMtPairTalkOperationTypeChairStop = 2,
  emMtPairTalkOperationTypeChairJoin = 3,
  emMtPairTalkOperationTypeChairQuit = 4,
  emMtPairTalkOperationTypeAudienceJoin = 5,
  emMtPairTalkOperationTypeAudienceQuit = 6
};
MTMSG_API bool EmMtPairTalkOperationType_IsValid(int value);
const EmMtPairTalkOperationType EmMtPairTalkOperationType_MIN = emMtPairTalkOperationTypeBegin;
const EmMtPairTalkOperationType EmMtPairTalkOperationType_MAX = emMtPairTalkOperationTypeAudienceQuit;
const int EmMtPairTalkOperationType_ARRAYSIZE = EmMtPairTalkOperationType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtPairTalkOperationType_descriptor();
inline const ::std::string& EmMtPairTalkOperationType_Name(EmMtPairTalkOperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtPairTalkOperationType_descriptor(), value);
}
inline bool EmMtPairTalkOperationType_Parse(
    const ::std::string& name, EmMtPairTalkOperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtPairTalkOperationType>(
    EmMtPairTalkOperationType_descriptor(), name, value);
}
enum EmMtCallMode {
  emJoin = 0,
  emCreate = 1,
  emInvite = 2
};
MTMSG_API bool EmMtCallMode_IsValid(int value);
const EmMtCallMode EmMtCallMode_MIN = emJoin;
const EmMtCallMode EmMtCallMode_MAX = emInvite;
const int EmMtCallMode_ARRAYSIZE = EmMtCallMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtCallMode_descriptor();
inline const ::std::string& EmMtCallMode_Name(EmMtCallMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtCallMode_descriptor(), value);
}
inline bool EmMtCallMode_Parse(
    const ::std::string& name, EmMtCallMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtCallMode>(
    EmMtCallMode_descriptor(), name, value);
}
enum EmMtConfMode {
  emConfNone = 0,
  emP2PConf = 1,
  emMCCConf = 2,
  emFXOConf = 3
};
MTMSG_API bool EmMtConfMode_IsValid(int value);
const EmMtConfMode EmMtConfMode_MIN = emConfNone;
const EmMtConfMode EmMtConfMode_MAX = emFXOConf;
const int EmMtConfMode_ARRAYSIZE = EmMtConfMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtConfMode_descriptor();
inline const ::std::string& EmMtConfMode_Name(EmMtConfMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtConfMode_descriptor(), value);
}
inline bool EmMtConfMode_Parse(
    const ::std::string& name, EmMtConfMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtConfMode>(
    EmMtConfMode_descriptor(), name, value);
}
enum EmMtLogChnnlType {
  emMt_LOGCHL_VIDEO = 1,
  emMt_LOGCHL_AUDIO = 2,
  emMt_LOGCHL_SECVIDEO = 3,
  emMt_LOGCHL_T120DATA = 4,
  emMt_LOGCHL_H224DATA = 5,
  emMt_LOGCHL_MMCUDATA = 6,
  emMt_LOGCHL_VIDEO_BOTH = 7
};
MTMSG_API bool EmMtLogChnnlType_IsValid(int value);
const EmMtLogChnnlType EmMtLogChnnlType_MIN = emMt_LOGCHL_VIDEO;
const EmMtLogChnnlType EmMtLogChnnlType_MAX = emMt_LOGCHL_VIDEO_BOTH;
const int EmMtLogChnnlType_ARRAYSIZE = EmMtLogChnnlType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtLogChnnlType_descriptor();
inline const ::std::string& EmMtLogChnnlType_Name(EmMtLogChnnlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtLogChnnlType_descriptor(), value);
}
inline bool EmMtLogChnnlType_Parse(
    const ::std::string& name, EmMtLogChnnlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtLogChnnlType>(
    EmMtLogChnnlType_descriptor(), name, value);
}
enum EmMtMcu2MtNtfMsgType {
  emMt_NONE_NTF = 1,
  emMt_BE_POLLED_NEXT_NTF = 2,
  emMt_NO_OPEN_DSCHNNL_NONSPEAKER = 11,
  emMt_NO_OPEN_DSCHNNLNONCAP = 12,
  emMt_NO_OPEN_DSCHNNLBRLOW64 = 13,
  emMt_NO_OPEN_DSCHNNLFECTYPE = 14,
  emMt_NO_OPEN_DSCHNNLNONMP = 15,
  emMt_NO_OPEN_DSCHNNLENCRYPTMODE = 16,
  emMt_NO_OPEN_DSCHNNLOVERSATDCASTCHNNUM = 17,
  emMt_NO_OPEN_FSCHNNL_NONCAP = 31,
  emMt_NO_OPEN_FSCHNNL_BR_LOW64 = 32,
  emMt_NO_OPEN_FSCHNNL_ENCRPYT_MODE = 33,
  emMt_NO_OPEN_FSCHNNL_FECTYPE = 34,
  emMt_NO_OPEN_FSCHNNL_NONMP = 35,
  emMt_NO_OPEN_FSCHNNL_BR_OVERFLOW = 36,
  emMt_NO_OPEN_FSCHNNL_BOTH_H263PLUS = 37,
  emMt_NO_OPEN_FSCHNNL_FORMAT = 38,
  emMt_NO_OPEN_FSCHNNL_FPS = 39,
  emMt_CALL_FAILED_BR_LESS_THAN_CONF = 51,
  emMt_CALL_FAILED_BR_LARGER_THAN_CONF = 52,
  emMt_NO_SUPPORT_OPR_FOR_NOAUTH = 53,
  emMt_NO_IN_MIXGRP_APPLY_INTERRUPT = 54
};
MTMSG_API bool EmMtMcu2MtNtfMsgType_IsValid(int value);
const EmMtMcu2MtNtfMsgType EmMtMcu2MtNtfMsgType_MIN = emMt_NONE_NTF;
const EmMtMcu2MtNtfMsgType EmMtMcu2MtNtfMsgType_MAX = emMt_NO_IN_MIXGRP_APPLY_INTERRUPT;
const int EmMtMcu2MtNtfMsgType_ARRAYSIZE = EmMtMcu2MtNtfMsgType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtMcu2MtNtfMsgType_descriptor();
inline const ::std::string& EmMtMcu2MtNtfMsgType_Name(EmMtMcu2MtNtfMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtMcu2MtNtfMsgType_descriptor(), value);
}
inline bool EmMtMcu2MtNtfMsgType_Parse(
    const ::std::string& name, EmMtMcu2MtNtfMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtMcu2MtNtfMsgType>(
    EmMtMcu2MtNtfMsgType_descriptor(), name, value);
}
enum EmGetListRspErr {
  emList_Finished = 0,
  emList_Not_Finished = 1,
  emList_UnCompleted = 2,
  emList_SerDbErr = 3,
  emList_Timeout = 4,
  emList_UnknownErr = 5
};
MTMSG_API bool EmGetListRspErr_IsValid(int value);
const EmGetListRspErr EmGetListRspErr_MIN = emList_Finished;
const EmGetListRspErr EmGetListRspErr_MAX = emList_UnknownErr;
const int EmGetListRspErr_ARRAYSIZE = EmGetListRspErr_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmGetListRspErr_descriptor();
inline const ::std::string& EmGetListRspErr_Name(EmGetListRspErr value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmGetListRspErr_descriptor(), value);
}
inline bool EmGetListRspErr_Parse(
    const ::std::string& name, EmGetListRspErr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmGetListRspErr>(
    EmGetListRspErr_descriptor(), name, value);
}
enum EmConfSpecial {
  emNormalConf = 0,
  emSatelliteConf = 1
};
MTMSG_API bool EmConfSpecial_IsValid(int value);
const EmConfSpecial EmConfSpecial_MIN = emNormalConf;
const EmConfSpecial EmConfSpecial_MAX = emSatelliteConf;
const int EmConfSpecial_ARRAYSIZE = EmConfSpecial_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmConfSpecial_descriptor();
inline const ::std::string& EmConfSpecial_Name(EmConfSpecial value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmConfSpecial_descriptor(), value);
}
inline bool EmConfSpecial_Parse(
    const ::std::string& name, EmConfSpecial* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmConfSpecial>(
    EmConfSpecial_descriptor(), name, value);
}
enum EmConfListType {
  emConfListType_Hold = 0,
  emConfListType_Book = 1,
  emConfListType_Temp = 2,
  emConfListType_End = 3
};
MTMSG_API bool EmConfListType_IsValid(int value);
const EmConfListType EmConfListType_MIN = emConfListType_Hold;
const EmConfListType EmConfListType_MAX = emConfListType_End;
const int EmConfListType_ARRAYSIZE = EmConfListType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmConfListType_descriptor();
inline const ::std::string& EmConfListType_Name(EmConfListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmConfListType_descriptor(), value);
}
inline bool EmConfListType_Parse(
    const ::std::string& name, EmConfListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmConfListType>(
    EmConfListType_descriptor(), name, value);
}
enum EmMtClarity {
  EmMt_HD_MODE = 1,
  EmMt_SD_MODE = 2,
  EmMt_FLUENT_MODE = 3,
  EmMt_UD_MODE = 4,
  EmMt_FHD_MODE = 5,
  EmMt_UHD_MODE = 6
};
MTMSG_API bool EmMtClarity_IsValid(int value);
const EmMtClarity EmMtClarity_MIN = EmMt_HD_MODE;
const EmMtClarity EmMtClarity_MAX = EmMt_UHD_MODE;
const int EmMtClarity_ARRAYSIZE = EmMtClarity_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtClarity_descriptor();
inline const ::std::string& EmMtClarity_Name(EmMtClarity value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtClarity_descriptor(), value);
}
inline bool EmMtClarity_Parse(
    const ::std::string& name, EmMtClarity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtClarity>(
    EmMtClarity_descriptor(), name, value);
}
enum EmMtType {
  EmMt_Type_Mt = 0,
  EmMt_Type_PHONE = 1,
  EmMt_Type_SATD = 2,
  EmMt_Type_MMCU = 3,
  EmMt_Type_SMCU = 4,
  EmMt_Type_VRSREC = 5,
  EmMt_Type_Other = 10
};
MTMSG_API bool EmMtType_IsValid(int value);
const EmMtType EmMtType_MIN = EmMt_Type_Mt;
const EmMtType EmMtType_MAX = EmMt_Type_Other;
const int EmMtType_ARRAYSIZE = EmMtType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtType_descriptor();
inline const ::std::string& EmMtType_Name(EmMtType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtType_descriptor(), value);
}
inline bool EmMtType_Parse(
    const ::std::string& name, EmMtType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtType>(
    EmMtType_descriptor(), name, value);
}
enum EmMtAddrType {
  emAddrIP = 0,
  emAddrE164 = 1,
  emAddrAlias = 2,
  emDialNum = 3,
  emSipAddr = 4,
  emAddrMoid = 5,
  emNoSysMailbox = 6
};
MTMSG_API bool EmMtAddrType_IsValid(int value);
const EmMtAddrType EmMtAddrType_MIN = emAddrIP;
const EmMtAddrType EmMtAddrType_MAX = emNoSysMailbox;
const int EmMtAddrType_ARRAYSIZE = EmMtAddrType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtAddrType_descriptor();
inline const ::std::string& EmMtAddrType_Name(EmMtAddrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtAddrType_descriptor(), value);
}
inline bool EmMtAddrType_Parse(
    const ::std::string& name, EmMtAddrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtAddrType>(
    EmMtAddrType_descriptor(), name, value);
}
enum EmMtModifyConfInfoType {
  MT_MODIFY_BEGIN = 0,
  MT_MODIFY_CONF_NAMETYPE = 1,
  MT_MODIFY_CONF_DURATIONTYPE = 2,
  MT_MODIFY_CONF_PWDTYPE = 3,
  MT_MODIFY_CONF_DUAL_MODETYPE = 4,
  MT_MODIFY_CONF_SHOW_MEMBERALIAS = 5,
  MT_MODIFY_CONF_OPENMODE = 6,
  MT_MODIFY_CONF_DUMB = 7,
  MT_MODIFY_CONF_NoDisturb = 8
};
MTMSG_API bool EmMtModifyConfInfoType_IsValid(int value);
const EmMtModifyConfInfoType EmMtModifyConfInfoType_MIN = MT_MODIFY_BEGIN;
const EmMtModifyConfInfoType EmMtModifyConfInfoType_MAX = MT_MODIFY_CONF_NoDisturb;
const int EmMtModifyConfInfoType_ARRAYSIZE = EmMtModifyConfInfoType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtModifyConfInfoType_descriptor();
inline const ::std::string& EmMtModifyConfInfoType_Name(EmMtModifyConfInfoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtModifyConfInfoType_descriptor(), value);
}
inline bool EmMtModifyConfInfoType_Parse(
    const ::std::string& name, EmMtModifyConfInfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtModifyConfInfoType>(
    EmMtModifyConfInfoType_descriptor(), name, value);
}
enum EmMtConfFailureReason {
  emFAIL_REASON_DIFF_CONF_ENCRYPT_MODE = 1,
  emFAIL_REASON_MT_NOT_JOINED_CONF = 2,
  emFAIL_REASON_CONF_IS_NOT_CPING = 3,
  emFAIL_REASON_MT_IS_NOT_CHAIR = 4,
  emFAIL_REASON_CONF_IS_NOT_DIALOG_MODE = 5,
  emFAIL_REASON_NO_IDLE_CONF_RESOURCE = 6,
  emFAIL_REASON_CONF_RESOURCE_LACK = 7,
  emFAIL_REASON_MT_IN_DIALOG = 8,
  emFAIL_REASON_SEL_MT_VID_OVER_CHNNL_NUM = 9,
  emFAIL_REASON_SEL_MT_AUD_OVER_CHNNL_NUM = 10,
  emFAIL_REASON_SEL_MT_BOTH_OVER_CHNNL_NUM = 11,
  emFAIL_REASON_CAN_NOT_JION_VMP_BY_OVER_CHNNL_NUM = 12,
  emFAIL_REASON_CAN_NOT_JION_MIX_BY_OVER_CHNNL_NUM = 13,
  emFAIL_REASON_CHANGE_VMP_ASK_FALSE = 14,
  emFAIL_REASON_CAN_NOT_JION_CTRY_VMP_BY_OVER_CHNNL_NUM = 15
};
MTMSG_API bool EmMtConfFailureReason_IsValid(int value);
const EmMtConfFailureReason EmMtConfFailureReason_MIN = emFAIL_REASON_DIFF_CONF_ENCRYPT_MODE;
const EmMtConfFailureReason EmMtConfFailureReason_MAX = emFAIL_REASON_CAN_NOT_JION_CTRY_VMP_BY_OVER_CHNNL_NUM;
const int EmMtConfFailureReason_ARRAYSIZE = EmMtConfFailureReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtConfFailureReason_descriptor();
inline const ::std::string& EmMtConfFailureReason_Name(EmMtConfFailureReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtConfFailureReason_descriptor(), value);
}
inline bool EmMtConfFailureReason_Parse(
    const ::std::string& name, EmMtConfFailureReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtConfFailureReason>(
    EmMtConfFailureReason_descriptor(), name, value);
}
enum EmMtConfReleaseModeDef {
  emCONF_RELEASEMODE_NONE = 0,
  emCONF_RELEASEMODE_NOMT = 1
};
MTMSG_API bool EmMtConfReleaseModeDef_IsValid(int value);
const EmMtConfReleaseModeDef EmMtConfReleaseModeDef_MIN = emCONF_RELEASEMODE_NONE;
const EmMtConfReleaseModeDef EmMtConfReleaseModeDef_MAX = emCONF_RELEASEMODE_NOMT;
const int EmMtConfReleaseModeDef_ARRAYSIZE = EmMtConfReleaseModeDef_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtConfReleaseModeDef_descriptor();
inline const ::std::string& EmMtConfReleaseModeDef_Name(EmMtConfReleaseModeDef value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtConfReleaseModeDef_descriptor(), value);
}
inline bool EmMtConfReleaseModeDef_Parse(
    const ::std::string& name, EmMtConfReleaseModeDef* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtConfReleaseModeDef>(
    EmMtConfReleaseModeDef_descriptor(), name, value);
}
enum EmMtAliasType {
  emBegin = 0,
  emE164 = 1,
  emAlias = 2,
  emEmail = 3,
  emEpID = 4,
  emGKID = 5
};
MTMSG_API bool EmMtAliasType_IsValid(int value);
const EmMtAliasType EmMtAliasType_MIN = emBegin;
const EmMtAliasType EmMtAliasType_MAX = emGKID;
const int EmMtAliasType_ARRAYSIZE = EmMtAliasType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtAliasType_descriptor();
inline const ::std::string& EmMtAliasType_Name(EmMtAliasType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtAliasType_descriptor(), value);
}
inline bool EmMtAliasType_Parse(
    const ::std::string& name, EmMtAliasType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtAliasType>(
    EmMtAliasType_descriptor(), name, value);
}
enum EmMtOpenMode {
  emMt_OPEN = 1,
  emMt_Hide = 2
};
MTMSG_API bool EmMtOpenMode_IsValid(int value);
const EmMtOpenMode EmMtOpenMode_MIN = emMt_OPEN;
const EmMtOpenMode EmMtOpenMode_MAX = emMt_Hide;
const int EmMtOpenMode_ARRAYSIZE = EmMtOpenMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtOpenMode_descriptor();
inline const ::std::string& EmMtOpenMode_Name(EmMtOpenMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtOpenMode_descriptor(), value);
}
inline bool EmMtOpenMode_Parse(
    const ::std::string& name, EmMtOpenMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtOpenMode>(
    EmMtOpenMode_descriptor(), name, value);
}
enum EmMtVmpMode {
  emMt_VMP_MODE_NONE = 0,
  emMt_VMP_MODE_CTRL = 1,
  emMt_VMP_MODE_AUTO = 2
};
MTMSG_API bool EmMtVmpMode_IsValid(int value);
const EmMtVmpMode EmMtVmpMode_MIN = emMt_VMP_MODE_NONE;
const EmMtVmpMode EmMtVmpMode_MAX = emMt_VMP_MODE_AUTO;
const int EmMtVmpMode_ARRAYSIZE = EmMtVmpMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtVmpMode_descriptor();
inline const ::std::string& EmMtVmpMode_Name(EmMtVmpMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtVmpMode_descriptor(), value);
}
inline bool EmMtVmpMode_Parse(
    const ::std::string& name, EmMtVmpMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtVmpMode>(
    EmMtVmpMode_descriptor(), name, value);
}
enum EmMtMixType {
  emMcuNoMix = 0,
  emMcuWholeMix = 1,
  emMcuPartMix = 2,
  emMcuVacMix = 3,
  emMcuVacWholeMix = 4,
  emMcuSmartMix = 5
};
MTMSG_API bool EmMtMixType_IsValid(int value);
const EmMtMixType EmMtMixType_MIN = emMcuNoMix;
const EmMtMixType EmMtMixType_MAX = emMcuSmartMix;
const int EmMtMixType_ARRAYSIZE = EmMtMixType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtMixType_descriptor();
inline const ::std::string& EmMtMixType_Name(EmMtMixType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtMixType_descriptor(), value);
}
inline bool EmMtMixType_Parse(
    const ::std::string& name, EmMtMixType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtMixType>(
    EmMtMixType_descriptor(), name, value);
}
enum EmMtCallDisReason {
  emDisconnect_Busy = 0,
  emDisconnect_Normal = 1,
  emDisconnect_Rejected = 2,
  emDisconnect_Unreachable = 3,
  emDisconnect_Local = 4,
  emDisconnect_Unknown = 5,
  emDisconnect_AdaptiveBusy = 7,
  emDisconnect_Occupy = 8,
  emDisconnect_Joinconftimeout = 20,
  emDisconnect_Createconftimeout = 21,
  emDisconnect_Nomediaresource = 22,
  emDisconnect_Exceedmaxinconfmtnum = 23,
  emDisconnect_Exceedmaxconfnum = 24,
  emDisconnect_EncrypeErr = 25,
  emDisconnect_P2Ptimeout = 26,
  emDisconnect_MccDrop = 27,
  emDisconnect_ChairDrop = 28,
  emDisconnect_MMcuDrop = 29,
  emDisconnect_ConfRelease = 30,
  emDisconnect_PeerInConf = 31,
  emDisconnect_PeerNoDisturb = 32,
  emDisconnect_NotInPeerContact = 33,
  emDisconnect_PeerNoP2PPermission = 34,
  emDisconnect_PeerOnSleeping = 35,
  emDisconnect_ConfAutoRelease = 36,
  emDisconnect_REASON_BUSYEXT = 37,
  emDisconnect_REASON_REMOTERECONNECT = 38,
  emDisConnect_CallNumExceed = 39,
  emDisConnect_NotRegedToCallFailed = 40,
  emDisConnect_LocalVodPlaying = 41,
  emDisConnect_SecCrtNotFind = 42,
  emDisConnect_SecCrtVerifyFail = 43,
  emDisConnect_SecCrtExpired = 44,
  emDisConnect_SecCrtFormatError = 45,
  emDisConnect_SecLoadCertFailed = 46,
  emDisConnect_SecEncTypeError = 47,
  emDisConnect_AuthenticationErr = 48,
  emDisConnect_MtHasInConf = 49,
  emDisConnect_MtEviction = 50,
  emDisConnect_SoftIntegrityTestErr = 51,
  emDisConnect_GmTestErr = 52,
  emDisConnect_RandomNumTestErr = 53,
  emDisConnect_StrongAuthButIpCallErr = 54,
  emDisConnect_ChannelNoAuth = 55,
  emDisconnect_CancleInputPwd = 57,
  emDisconnect_End = 100
};
MTMSG_API bool EmMtCallDisReason_IsValid(int value);
const EmMtCallDisReason EmMtCallDisReason_MIN = emDisconnect_Busy;
const EmMtCallDisReason EmMtCallDisReason_MAX = emDisconnect_End;
const int EmMtCallDisReason_ARRAYSIZE = EmMtCallDisReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtCallDisReason_descriptor();
inline const ::std::string& EmMtCallDisReason_Name(EmMtCallDisReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtCallDisReason_descriptor(), value);
}
inline bool EmMtCallDisReason_Parse(
    const ::std::string& name, EmMtCallDisReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtCallDisReason>(
    EmMtCallDisReason_descriptor(), name, value);
}
enum EmUnRegFailedReason {
  emURJRecived = 0,
  emURQSendFailed = 1,
  emURQCreateHRASFailed = 2
};
MTMSG_API bool EmUnRegFailedReason_IsValid(int value);
const EmUnRegFailedReason EmUnRegFailedReason_MIN = emURJRecived;
const EmUnRegFailedReason EmUnRegFailedReason_MAX = emURQCreateHRASFailed;
const int EmUnRegFailedReason_ARRAYSIZE = EmUnRegFailedReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmUnRegFailedReason_descriptor();
inline const ::std::string& EmUnRegFailedReason_Name(EmUnRegFailedReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmUnRegFailedReason_descriptor(), value);
}
inline bool EmUnRegFailedReason_Parse(
    const ::std::string& name, EmUnRegFailedReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmUnRegFailedReason>(
    EmUnRegFailedReason_descriptor(), name, value);
}
enum EmRegFailedReason {
  emGKFailedBegin = 0,
  emGKUnReachable = 1,
  emInvalidAliase = 2,
  emDupAlias = 3,
  emInvalidCallAddress = 4,
  emResourceUnavailable = 5,
  emRegNumberFull = 7,
  emGKSecurityDenial = 8,
  emGKDismatch = 9,
  emUnRegGKReq = 10,
  emRRQCreateHRASFailed = 11,
  emRRQSendFailed = 12,
  emSipFailedBegin = 50,
  emSipLocalNormalUnreg = 51,
  emSipInvalidUserNameAndPassword = 52,
  emSipRegistrarUnReachable = 53,
  emSipInvalidAlias = 54,
  emSipUnknownReason = 55,
  emSipRegisterFailed = 56,
  emSipRegisterNameDup = 57,
  emSecCrtNotFind = 58,
  emSecCrtVerifyFail = 59,
  emSecCrtExpired = 60,
  emSecCrtFormatError = 61,
  emSecLoadCertFailed = 62,
  emUnRegSuc = 90
};
MTMSG_API bool EmRegFailedReason_IsValid(int value);
const EmRegFailedReason EmRegFailedReason_MIN = emGKFailedBegin;
const EmRegFailedReason EmRegFailedReason_MAX = emUnRegSuc;
const int EmRegFailedReason_ARRAYSIZE = EmRegFailedReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRegFailedReason_descriptor();
inline const ::std::string& EmRegFailedReason_Name(EmRegFailedReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRegFailedReason_descriptor(), value);
}
inline bool EmRegFailedReason_Parse(
    const ::std::string& name, EmRegFailedReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRegFailedReason>(
    EmRegFailedReason_descriptor(), name, value);
}
enum EmEncryptArithmetic {
  emEncryptNone = 0,
  emDES = 1,
  emAES = 2,
  emSM1 = 3,
  emSM4 = 4,
  emSM2 = 5,
  emSM3 = 6,
  emAuto = 10
};
MTMSG_API bool EmEncryptArithmetic_IsValid(int value);
const EmEncryptArithmetic EmEncryptArithmetic_MIN = emEncryptNone;
const EmEncryptArithmetic EmEncryptArithmetic_MAX = emAuto;
const int EmEncryptArithmetic_ARRAYSIZE = EmEncryptArithmetic_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEncryptArithmetic_descriptor();
inline const ::std::string& EmEncryptArithmetic_Name(EmEncryptArithmetic value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEncryptArithmetic_descriptor(), value);
}
inline bool EmEncryptArithmetic_Parse(
    const ::std::string& name, EmEncryptArithmetic* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEncryptArithmetic>(
    EmEncryptArithmetic_descriptor(), name, value);
}
enum EmMtVmpStyle {
  emInvalid_Style = 0,
  emMt_VMP_STYLE_DYNAMIC = 1,
  emMt_VMP_STYLE_1 = 2,
  emMt_VMP_STYLE_2_1X2 = 3,
  emMt_VMP_STYLE_2_B1_S1RD = 4,
  emMt_VMP_STYLE_3_1U_2D1X2 = 5,
  emMt_VMP_STYLE_3_B1L_S2R2X1 = 6,
  emMt_VMP_STYLE_3_1L_2R2X1 = 7,
  emMt_VMP_STYLE_3_B1_S2LD1X2 = 8,
  emMt_VMP_STYLE_3_3X1 = 9,
  emMt_VMP_STYLE_4_2X2 = 10,
  emMt_VMP_STYLE_4_B1L_S3R3X1 = 11,
  emMt_VMP_STYLE_4_B1U_S3D1X3 = 12,
  emMt_VMP_STYLE_5_B1L_S4R4X1 = 13,
  emMt_VMP_STYLE_5_B1U_S4D1X4 = 14,
  emMt_VMP_STYLE_5_B2U1X2_S3D1X3 = 15,
  emMt_VMP_STYLE_6_B1LU_S2RU2X1_S3D1X3 = 16,
  emMt_VMP_STYLE_6_B2U1X2_S4D1X4 = 17,
  emMt_VMP_STYLE_6_2X3 = 18,
  emMt_VMP_STYLE_6_B1U_S5D1X5 = 19,
  emMt_VMP_STYLE_7_B2U1X2_B1LD_S4RD2X2 = 20,
  emMt_VMP_STYLE_7_S2LU2X1_B1MU_S2RU2X1_B2D1X2 = 21,
  emMt_VMP_STYLE_7_B1U_S6D1X6 = 22,
  emMt_VMP_STYLE_8_B1LU_S3RU3X1_S4D1X4 = 23,
  emMt_VMP_STYLE_8_B4L2X2_S4R4X1 = 24,
  emMt_VMP_STYLE_9_3X3 = 25,
  emMt_VMP_STYLE_9_S4U1X4_B1M_S4D1X4 = 26,
  emMt_VMP_STYLE_10_B2L2X1_S8R4X2 = 27,
  emMt_VMP_STYLE_10_B2U1X2_S8D2X4 = 28,
  emMt_VMP_STYLE_10_S4U1X4_B2M1X2_S4D1X4 = 29,
  emMt_VMP_STYLE_10_S4L4X1_B2M2X1_S4R4X1 = 30,
  emMt_VMP_STYLE_11_S5U1X5_B1M_S5D1X5 = 31,
  emMt_VMP_STYLE_11_B1U_S10D2X5 = 32,
  emMt_VMP_STYLE_12_B2U1X2_B1LD_S9RD3X3 = 33,
  emMt_VMP_STYLE_12_B1LU_S5RU4X1_S6D1X6 = 34,
  emMt_VMP_STYLE_13_B1LU_S4RU2X2_S8D2X4 = 35,
  emMt_VMP_STYLE_13_S4U1X4_S2LM2X1_B1MM_S2LM2X1_S4D1X4 = 36,
  emMt_VMP_STYLE_13_B4LU2X2_S4RU4X1_S5D1X5 = 37,
  emMt_VMP_STYLE_14_B2LU1X2_S2RU2X1_S10D2X5 = 38,
  emMt_VMP_STYLE_14_S5U1X5_B1LM_S2MM2X1_B1RM_S5D1X5 = 39,
  emMt_VMP_STYLE_15_B3U1X3_S12D2X6 = 40,
  emMt_VMP_STYLE_15_S4U1X4_S3LM3X1_B1MM_S3RM3X1_S4D1X4 = 41,
  emMt_VMP_STYLE_16_4X4 = 42,
  emMt_VMP_STYLE_16_B1LU_S7RU7X1_S8D1X8 = 43,
  emMt_VMP_STYLE_17_S5U1X5_S3LM3X1_B1MM_S3RM3X1_S5D1X5 = 44,
  emMt_VMP_STYLE_17_B1LU_S6RU3X2_S10D2X5 = 45,
  emMt_VMP_STYLE_17_B2U1X2_S15D3X5 = 46,
  emMt_VMP_STYLE_18_S6U1X6_B6M2X3_S6D1X6 = 47,
  emMt_VMP_STYLE_18_B6U2X3_S12D2X6 = 48,
  emMt_VMP_STYLE_18_S6L6X1_B6M3X2_S6R6X1 = 49,
  emMt_VMP_STYLE_19_B2LU1X2_S2RU2X1_S15D3X5 = 50,
  emMt_VMP_STYLE_19_B2LU2X1_S12RU4X3_S5D1X5 = 51,
  emMt_VMP_STYLE_20_B2U1X2_S18D3X6 = 52,
  emMt_VMP_STYLE_20_S6U1X6_B2M1X2_S12D2X6 = 53,
  emMt_VMP_STYLE_21_S6U1X6_S4LM4X1_B1MM_S4RM4X1_S6D1X6 = 54,
  emMt_VMP_STYLE_21_B1LU_S8RU4X2_S12D2X6 = 55,
  emMt_VMP_STYLE_22_B1LU_S6RU2X3_S15D3X5 = 56,
  emMt_VMP_STYLE_23_4U1X4_15M3X5_4D1X4 = 57,
  emMt_VMP_STYLE_23_B2U1X2_S4LM2X2_B1MM_S4RM2X2_S12D2X6 = 58,
  emMt_VMP_STYLE_24_S6U1X6_S4LM4X1_B4MM2X2_S4RM4X1_S6D1X6 = 59,
  emMt_VMP_STYLE_25_5X5 = 60,
  emMt_VMP_STYLE_25_S3LU3X1_B1MU_S3RU3X1_S18D3X6 = 61,
  emMt_VMP_STYLE_2_B1_S1RU = 62,
  emMt_VMP_STYLE_2_B1_S1LD = 63,
  emMt_VMP_STYLE_2_B1_S1L = 64,
  emMt_VMP_STYLE_20_5X4 = 100
};
MTMSG_API bool EmMtVmpStyle_IsValid(int value);
const EmMtVmpStyle EmMtVmpStyle_MIN = emInvalid_Style;
const EmMtVmpStyle EmMtVmpStyle_MAX = emMt_VMP_STYLE_20_5X4;
const int EmMtVmpStyle_ARRAYSIZE = EmMtVmpStyle_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtVmpStyle_descriptor();
inline const ::std::string& EmMtVmpStyle_Name(EmMtVmpStyle value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtVmpStyle_descriptor(), value);
}
inline bool EmMtVmpStyle_Parse(
    const ::std::string& name, EmMtVmpStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtVmpStyle>(
    EmMtVmpStyle_descriptor(), name, value);
}
enum EmMtMemberStatusDef {
  emMT_STATUS_NULL = 0,
  emMT_STATUS_AUDIENCE = 1,
  emMT_STATUS_CHAIRMAN = 2,
  emMT_STATUS_SPEAKER = 3
};
MTMSG_API bool EmMtMemberStatusDef_IsValid(int value);
const EmMtMemberStatusDef EmMtMemberStatusDef_MIN = emMT_STATUS_NULL;
const EmMtMemberStatusDef EmMtMemberStatusDef_MAX = emMT_STATUS_SPEAKER;
const int EmMtMemberStatusDef_ARRAYSIZE = EmMtMemberStatusDef_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtMemberStatusDef_descriptor();
inline const ::std::string& EmMtMemberStatusDef_Name(EmMtMemberStatusDef value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtMemberStatusDef_descriptor(), value);
}
inline bool EmMtMemberStatusDef_Parse(
    const ::std::string& name, EmMtMemberStatusDef* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtMemberStatusDef>(
    EmMtMemberStatusDef_descriptor(), name, value);
}
enum EmMtVMPMmbType {
  emVmpMmbType_NULL = 0,
  emVMPMmbMCSspec = 1,
  emVMPMmbSpeaker = 2,
  emVMPMmbChairman = 3,
  emVMPMmbPoll = 4,
  emVMPMmbVAC = 5,
  emVMPMmbCHLPOLL = 6,
  emVMPMmbDSTREAM = 7,
  emVMPMmbVCSPEC = 8
};
MTMSG_API bool EmMtVMPMmbType_IsValid(int value);
const EmMtVMPMmbType EmMtVMPMmbType_MIN = emVmpMmbType_NULL;
const EmMtVMPMmbType EmMtVMPMmbType_MAX = emVMPMmbVCSPEC;
const int EmMtVMPMmbType_ARRAYSIZE = EmMtVMPMmbType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtVMPMmbType_descriptor();
inline const ::std::string& EmMtVMPMmbType_Name(EmMtVMPMmbType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtVMPMmbType_descriptor(), value);
}
inline bool EmMtVMPMmbType_Parse(
    const ::std::string& name, EmMtVMPMmbType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtVMPMmbType>(
    EmMtVMPMmbType_descriptor(), name, value);
}
enum EmAction {
  emActionBegin = 0,
  emStart = 1,
  emStop = 2,
  emPause = 3,
  emResume = 4
};
MTMSG_API bool EmAction_IsValid(int value);
const EmAction EmAction_MIN = emActionBegin;
const EmAction EmAction_MAX = emResume;
const int EmAction_ARRAYSIZE = EmAction_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAction_descriptor();
inline const ::std::string& EmAction_Name(EmAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAction_descriptor(), value);
}
inline bool EmAction_Parse(
    const ::std::string& name, EmAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAction>(
    EmAction_descriptor(), name, value);
}
enum EmFileSys {
  emRAWFS = 0,
  emTFFS = 1
};
MTMSG_API bool EmFileSys_IsValid(int value);
const EmFileSys EmFileSys_MIN = emRAWFS;
const EmFileSys EmFileSys_MAX = emTFFS;
const int EmFileSys_ARRAYSIZE = EmFileSys_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmFileSys_descriptor();
inline const ::std::string& EmFileSys_Name(EmFileSys value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmFileSys_descriptor(), value);
}
inline bool EmFileSys_Parse(
    const ::std::string& name, EmFileSys* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmFileSys>(
    EmFileSys_descriptor(), name, value);
}
enum EmQoS {
  emDiffServ = 0,
  emIPPrecedence = 1
};
MTMSG_API bool EmQoS_IsValid(int value);
const EmQoS EmQoS_MIN = emDiffServ;
const EmQoS EmQoS_MAX = emIPPrecedence;
const int EmQoS_ARRAYSIZE = EmQoS_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmQoS_descriptor();
inline const ::std::string& EmQoS_Name(EmQoS value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmQoS_descriptor(), value);
}
inline bool EmQoS_Parse(
    const ::std::string& name, EmQoS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmQoS>(
    EmQoS_descriptor(), name, value);
}
enum EmTOS {
  emTOSNone = 0,
  emTOSMinCost = 1,
  emTOSMaxReliable = 2,
  emTOSMaxThruput = 3,
  emTOSMinDelay = 4
};
MTMSG_API bool EmTOS_IsValid(int value);
const EmTOS EmTOS_MIN = emTOSNone;
const EmTOS EmTOS_MAX = emTOSMinDelay;
const int EmTOS_ARRAYSIZE = EmTOS_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmTOS_descriptor();
inline const ::std::string& EmTOS_Name(EmTOS value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmTOS_descriptor(), value);
}
inline bool EmTOS_Parse(
    const ::std::string& name, EmTOS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmTOS>(
    EmTOS_descriptor(), name, value);
}
enum EmCodecEvent {
  emAudSpkMute = 0,
  emAudMicMute = 1,
  emAudMicVolChange = 2,
  emAudSpkVolChange = 3,
  emAudAecInvalid = 4,
  emVidChange = 6,
  emNetLostPackLv1 = 7,
  emNetLostPackLv2 = 8,
  emNetLostPackLv3 = 9,
  emNoVidCapDev = 10,
  emNoAudCapDev = 11,
  emNoAudPlyDev = 12,
  emOtherEvent = 13
};
MTMSG_API bool EmCodecEvent_IsValid(int value);
const EmCodecEvent EmCodecEvent_MIN = emAudSpkMute;
const EmCodecEvent EmCodecEvent_MAX = emOtherEvent;
const int EmCodecEvent_ARRAYSIZE = EmCodecEvent_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCodecEvent_descriptor();
inline const ::std::string& EmCodecEvent_Name(EmCodecEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCodecEvent_descriptor(), value);
}
inline bool EmCodecEvent_Parse(
    const ::std::string& name, EmCodecEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCodecEvent>(
    EmCodecEvent_descriptor(), name, value);
}
enum EmMtcType {
  emUnkownT = 0,
  emMtcT = 1,
  emPcdvT = 2,
  emNctT = 3
};
MTMSG_API bool EmMtcType_IsValid(int value);
const EmMtcType EmMtcType_MIN = emUnkownT;
const EmMtcType EmMtcType_MAX = emNctT;
const int EmMtcType_ARRAYSIZE = EmMtcType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtcType_descriptor();
inline const ::std::string& EmMtcType_Name(EmMtcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtcType_descriptor(), value);
}
inline bool EmMtcType_Parse(
    const ::std::string& name, EmMtcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtcType>(
    EmMtcType_descriptor(), name, value);
}
enum EmMtSleepState {
  emWakeup = 0,
  emCountDown = 1,
  emStandbyIng = 2,
  emStandby = 3,
  emWakeuping = 4,
  emStandbyProtect = 5
};
MTMSG_API bool EmMtSleepState_IsValid(int value);
const EmMtSleepState EmMtSleepState_MIN = emWakeup;
const EmMtSleepState EmMtSleepState_MAX = emStandbyProtect;
const int EmMtSleepState_ARRAYSIZE = EmMtSleepState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtSleepState_descriptor();
inline const ::std::string& EmMtSleepState_Name(EmMtSleepState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtSleepState_descriptor(), value);
}
inline bool EmMtSleepState_Parse(
    const ::std::string& name, EmMtSleepState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtSleepState>(
    EmMtSleepState_descriptor(), name, value);
}
enum EmMtPortType {
  emPortInvalid = 0,
  emPortTcpForH323 = 1,
  emPortMP = 2,
  emPortAudioEncoder = 3,
  emPortAudioDecoder = 4,
  emPortVideoEncoder = 5,
  emPortVideoDecoder = 6,
  emPortFwdPcAssStream = 7,
  emPortFwdAudioLoop = 8,
  emPortFwdVedioLoop = 9,
  emMcNetBuf = 10,
  emPortMcVmp = 11,
  emPortMcMixer = 12,
  emPortInnerMcAudio = 13,
  emPortInnerMcVedio = 14,
  emPortMc = 15,
  emPortInnerProxy = 16
};
MTMSG_API bool EmMtPortType_IsValid(int value);
const EmMtPortType EmMtPortType_MIN = emPortInvalid;
const EmMtPortType EmMtPortType_MAX = emPortInnerProxy;
const int EmMtPortType_ARRAYSIZE = EmMtPortType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtPortType_descriptor();
inline const ::std::string& EmMtPortType_Name(EmMtPortType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtPortType_descriptor(), value);
}
inline bool EmMtPortType_Parse(
    const ::std::string& name, EmMtPortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtPortType>(
    EmMtPortType_descriptor(), name, value);
}
enum EmLabelType {
  emLabelAuto = 0,
  emLabelUserDef = 1,
  emLabelUserDefPic = 2,
  emLabelOff = 3
};
MTMSG_API bool EmLabelType_IsValid(int value);
const EmLabelType EmLabelType_MIN = emLabelAuto;
const EmLabelType EmLabelType_MAX = emLabelOff;
const int EmLabelType_ARRAYSIZE = EmLabelType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmLabelType_descriptor();
inline const ::std::string& EmLabelType_Name(EmLabelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmLabelType_descriptor(), value);
}
inline bool EmLabelType_Parse(
    const ::std::string& name, EmLabelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmLabelType>(
    EmLabelType_descriptor(), name, value);
}
enum EmLabelPosType {
  emTopLeft = 0,
  emTopRight = 1,
  emBottomLeft = 2,
  emBottomRight = 3,
  emCustom = 4
};
MTMSG_API bool EmLabelPosType_IsValid(int value);
const EmLabelPosType EmLabelPosType_MIN = emTopLeft;
const EmLabelPosType EmLabelPosType_MAX = emCustom;
const int EmLabelPosType_ARRAYSIZE = EmLabelPosType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmLabelPosType_descriptor();
inline const ::std::string& EmLabelPosType_Name(EmLabelPosType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmLabelPosType_descriptor(), value);
}
inline bool EmLabelPosType_Parse(
    const ::std::string& name, EmLabelPosType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmLabelPosType>(
    EmLabelPosType_descriptor(), name, value);
}
enum EmDualVideoShowMode {
  emDualVideoOnSigleScreen = 1,
  emEachVideoOwnScreen = 2,
  emTripleVideoOnSingleScn = 3,
  emThreeVideoOnThreeScreen = 4
};
MTMSG_API bool EmDualVideoShowMode_IsValid(int value);
const EmDualVideoShowMode EmDualVideoShowMode_MIN = emDualVideoOnSigleScreen;
const EmDualVideoShowMode EmDualVideoShowMode_MAX = emThreeVideoOnThreeScreen;
const int EmDualVideoShowMode_ARRAYSIZE = EmDualVideoShowMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDualVideoShowMode_descriptor();
inline const ::std::string& EmDualVideoShowMode_Name(EmDualVideoShowMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDualVideoShowMode_descriptor(), value);
}
inline bool EmDualVideoShowMode_Parse(
    const ::std::string& name, EmDualVideoShowMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDualVideoShowMode>(
    EmDualVideoShowMode_descriptor(), name, value);
}
enum EmPiPMode {
  emPipInvalid = 0,
  emPiPClose = 1,
  emPIPLeftRight = 2,
  emPiPRightBottom = 3,
  emPiPLeftBottom = 4,
  emPiPLeftTop = 5,
  emPiPRightTop = 6,
  emPiPTwoSmallLeftInOneBig = 7,
  emPiPTwoSmallRightInOneBig = 8,
  emPiPOneBigAndTwoSmall = 9,
  emPiPThree = 10
};
MTMSG_API bool EmPiPMode_IsValid(int value);
const EmPiPMode EmPiPMode_MIN = emPipInvalid;
const EmPiPMode EmPiPMode_MAX = emPiPThree;
const int EmPiPMode_ARRAYSIZE = EmPiPMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPiPMode_descriptor();
inline const ::std::string& EmPiPMode_Name(EmPiPMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPiPMode_descriptor(), value);
}
inline bool EmPiPMode_Parse(
    const ::std::string& name, EmPiPMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPiPMode>(
    EmPiPMode_descriptor(), name, value);
}
enum EmDisplayDeviceType {
  emCRT = 1,
  emLCD = 2
};
MTMSG_API bool EmDisplayDeviceType_IsValid(int value);
const EmDisplayDeviceType EmDisplayDeviceType_MIN = emCRT;
const EmDisplayDeviceType EmDisplayDeviceType_MAX = emLCD;
const int EmDisplayDeviceType_ARRAYSIZE = EmDisplayDeviceType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDisplayDeviceType_descriptor();
inline const ::std::string& EmDisplayDeviceType_Name(EmDisplayDeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDisplayDeviceType_descriptor(), value);
}
inline bool EmDisplayDeviceType_Parse(
    const ::std::string& name, EmDisplayDeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDisplayDeviceType>(
    EmDisplayDeviceType_descriptor(), name, value);
}
enum EmOsdScreenMode {
  emSimple = 1,
  emNormal = 2,
  emAdvanced = 3
};
MTMSG_API bool EmOsdScreenMode_IsValid(int value);
const EmOsdScreenMode EmOsdScreenMode_MIN = emSimple;
const EmOsdScreenMode EmOsdScreenMode_MAX = emAdvanced;
const int EmOsdScreenMode_ARRAYSIZE = EmOsdScreenMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmOsdScreenMode_descriptor();
inline const ::std::string& EmOsdScreenMode_Name(EmOsdScreenMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmOsdScreenMode_descriptor(), value);
}
inline bool EmOsdScreenMode_Parse(
    const ::std::string& name, EmOsdScreenMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmOsdScreenMode>(
    EmOsdScreenMode_descriptor(), name, value);
}
enum EmMtRing {
  emRingNone = 0,
  emRing1 = 1,
  emRing2 = 2,
  emRing3 = 3,
  emRing4 = 4,
  emRing5 = 5,
  emRing6 = 6,
  emRing7 = 7,
  emRing8 = 8,
  emRing9 = 9,
  emRing10 = 10
};
MTMSG_API bool EmMtRing_IsValid(int value);
const EmMtRing EmMtRing_MIN = emRingNone;
const EmMtRing EmMtRing_MAX = emRing10;
const int EmMtRing_ARRAYSIZE = EmMtRing_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtRing_descriptor();
inline const ::std::string& EmMtRing_Name(EmMtRing value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtRing_descriptor(), value);
}
inline bool EmMtRing_Parse(
    const ::std::string& name, EmMtRing* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtRing>(
    EmMtRing_descriptor(), name, value);
}
enum EmMtPathType {
  emPathTypeBgn = 1,
  emMtPathConfig = 2,
  emMtPathLog = 3,
  emMtDataLog = 4,
  emMtPathSec = 5,
  emMtPathSecMT = 6,
  emMtPathSecEnc = 7,
  emMtPathSecSign = 8,
  emMtPathAi = 9,
  emMtPathAiAudio = 10,
  emPathTypeEnd = 255
};
MTMSG_API bool EmMtPathType_IsValid(int value);
const EmMtPathType EmMtPathType_MIN = emPathTypeBgn;
const EmMtPathType EmMtPathType_MAX = emPathTypeEnd;
const int EmMtPathType_ARRAYSIZE = EmMtPathType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtPathType_descriptor();
inline const ::std::string& EmMtPathType_Name(EmMtPathType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtPathType_descriptor(), value);
}
inline bool EmMtPathType_Parse(
    const ::std::string& name, EmMtPathType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtPathType>(
    EmMtPathType_descriptor(), name, value);
}
enum EmMtOnlineState {
  em_state_invalid = 0,
  em_state_offline = 1,
  em_state_leave = 2,
  em_state_online = 3,
  em_state_no_disturb = 4,
  em_state_conference = 5,
  em_state_hidden = 6,
  em_state_logining = 7,
  em_state_end = 8
};
MTMSG_API bool EmMtOnlineState_IsValid(int value);
const EmMtOnlineState EmMtOnlineState_MIN = em_state_invalid;
const EmMtOnlineState EmMtOnlineState_MAX = em_state_end;
const int EmMtOnlineState_ARRAYSIZE = EmMtOnlineState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtOnlineState_descriptor();
inline const ::std::string& EmMtOnlineState_Name(EmMtOnlineState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtOnlineState_descriptor(), value);
}
inline bool EmMtOnlineState_Parse(
    const ::std::string& name, EmMtOnlineState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtOnlineState>(
    EmMtOnlineState_descriptor(), name, value);
}
enum EmMtImTerminalType {
  im_mt_type_unknown = 0,
  im_mt_type_true_link = 1,
  im_mt_type_true_touch_phone = 2,
  im_mt_type_true_touch_pad = 3,
  im_mt_type_true_sens = 4,
  im_mt_type_true_touch_phone_ios = 5,
  im_mt_type_true_touch_pad_android = 6,
  im_mt_type_web = 7,
  im_mt_type_true_link_tv = 8,
  im_mt_type_end = 9
};
MTMSG_API bool EmMtImTerminalType_IsValid(int value);
const EmMtImTerminalType EmMtImTerminalType_MIN = im_mt_type_unknown;
const EmMtImTerminalType EmMtImTerminalType_MAX = im_mt_type_end;
const int EmMtImTerminalType_ARRAYSIZE = EmMtImTerminalType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtImTerminalType_descriptor();
inline const ::std::string& EmMtImTerminalType_Name(EmMtImTerminalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtImTerminalType_descriptor(), value);
}
inline bool EmMtImTerminalType_Parse(
    const ::std::string& name, EmMtImTerminalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtImTerminalType>(
    EmMtImTerminalType_descriptor(), name, value);
}
enum EmMtFile {
  emMtFileBegin = 0,
  emMtConfigFile = 1,
  emMtDebugConfigFile = 2,
  emMtStaticPicFile = 3,
  emMtUpgradeStateFile = 4,
  emMtMcLicenseFile = 5,
  emMtKdvlogCfgFile = 6,
  emMtCorruptConfigFile = 7,
  emMtExceptionFile = 8,
  emMtLogFile = 9,
  emMtLocalCARASCertFile = 10,
  emMtLocalCASM2CertFile = 11,
  emMtSecCACertFile = 12,
  emMtSecDeviceCertFile = 13,
  emMtSecPrivkeyFile = 14,
  emMtSecSignCertFile = 15,
  emMtSecSignPrivKeyFile = 16,
  emMtSecEncCertFile = 17,
  emMtSecEncPrivKeyFile = 18,
  emMtAgentTerLicenseFile = 19,
  emMtAiAuthFile = 20,
  emMtAiVadBinFile = 21,
  emMtAiWakeupBinFile = 22,
  emMtAiGramBinFile = 23,
  emMtAiGramOutPutFile = 24,
  emMtAiGramXbnfFile = 25,
  emMtAiAsrBinFile = 26,
  emMtAiWakeupRspFile = 27,
  emMtAiUnKnowRspFile = 28,
  emMtFileEnd = 255
};
MTMSG_API bool EmMtFile_IsValid(int value);
const EmMtFile EmMtFile_MIN = emMtFileBegin;
const EmMtFile EmMtFile_MAX = emMtFileEnd;
const int EmMtFile_ARRAYSIZE = EmMtFile_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtFile_descriptor();
inline const ::std::string& EmMtFile_Name(EmMtFile value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtFile_descriptor(), value);
}
inline bool EmMtFile_Parse(
    const ::std::string& name, EmMtFile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtFile>(
    EmMtFile_descriptor(), name, value);
}
enum EImDeclineReason {
  im_decline_reason_unknown = 1,
  im_decline_reason_max_persistent_room_count = 2,
  im_decline_reason_max_temporary_room_count = 3,
  im_decline_reason_from_weibo = 4
};
MTMSG_API bool EImDeclineReason_IsValid(int value);
const EImDeclineReason EImDeclineReason_MIN = im_decline_reason_unknown;
const EImDeclineReason EImDeclineReason_MAX = im_decline_reason_from_weibo;
const int EImDeclineReason_ARRAYSIZE = EImDeclineReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EImDeclineReason_descriptor();
inline const ::std::string& EImDeclineReason_Name(EImDeclineReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EImDeclineReason_descriptor(), value);
}
inline bool EImDeclineReason_Parse(
    const ::std::string& name, EImDeclineReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EImDeclineReason>(
    EImDeclineReason_descriptor(), name, value);
}
enum EImCharState {
  im_char_state_active = 0,
  im_char_state_composing = 1,
  im_char_state_paused = 2
};
MTMSG_API bool EImCharState_IsValid(int value);
const EImCharState EImCharState_MIN = im_char_state_active;
const EImCharState EImCharState_MAX = im_char_state_paused;
const int EImCharState_ARRAYSIZE = EImCharState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EImCharState_descriptor();
inline const ::std::string& EImCharState_Name(EImCharState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EImCharState_descriptor(), value);
}
inline bool EImCharState_Parse(
    const ::std::string& name, EImCharState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EImCharState>(
    EImCharState_descriptor(), name, value);
}
enum EmMtMemberType {
  em_member_invalid = 0,
  em_member_im_id = 1,
  em_member_telephone = 2,
  em_member_fxo = 3,
  em_member_jid = 4
};
MTMSG_API bool EmMtMemberType_IsValid(int value);
const EmMtMemberType EmMtMemberType_MIN = em_member_invalid;
const EmMtMemberType EmMtMemberType_MAX = em_member_jid;
const int EmMtMemberType_ARRAYSIZE = EmMtMemberType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtMemberType_descriptor();
inline const ::std::string& EmMtMemberType_Name(EmMtMemberType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtMemberType_descriptor(), value);
}
inline bool EmMtMemberType_Parse(
    const ::std::string& name, EmMtMemberType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtMemberType>(
    EmMtMemberType_descriptor(), name, value);
}
enum EmMtMultiChatType {
  em_multichat_invalid = 0,
  em_multichat_normal = 1,
  em_multichat_conf = 2,
  em_multichat_end = 3
};
MTMSG_API bool EmMtMultiChatType_IsValid(int value);
const EmMtMultiChatType EmMtMultiChatType_MIN = em_multichat_invalid;
const EmMtMultiChatType EmMtMultiChatType_MAX = em_multichat_end;
const int EmMtMultiChatType_ARRAYSIZE = EmMtMultiChatType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtMultiChatType_descriptor();
inline const ::std::string& EmMtMultiChatType_Name(EmMtMultiChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtMultiChatType_descriptor(), value);
}
inline bool EmMtMultiChatType_Parse(
    const ::std::string& name, EmMtMultiChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtMultiChatType>(
    EmMtMultiChatType_descriptor(), name, value);
}
enum EmRestMeetingNotifyType {
  emRestMeetingNotifyTypeUnknown = 0,
  emCreateMeeting = 102,
  emUpdateMeeting = 103,
  emDeleteMeeting = 104,
  emCreateRegular = 105,
  emUpdateRegular = 106,
  emDeleteRegular = 107,
  emUpdateMeetingCancelPerson = 108,
  emAheadOfMeeting = 109,
  emCancelRoom = 110,
  emDeadLineChanged = 111,
  emUserFeedbacked = 112,
  emForbiddenRoom = 113,
  emDeleteRoom = 114,
  emStartTimeAchieve = 115,
  emNormalStart = 116,
  emStartMeetingRemind = 117,
  emStartBeforeMeeting = 118,
  emParticipant_Meeting_Remind = 119
};
MTMSG_API bool EmRestMeetingNotifyType_IsValid(int value);
const EmRestMeetingNotifyType EmRestMeetingNotifyType_MIN = emRestMeetingNotifyTypeUnknown;
const EmRestMeetingNotifyType EmRestMeetingNotifyType_MAX = emParticipant_Meeting_Remind;
const int EmRestMeetingNotifyType_ARRAYSIZE = EmRestMeetingNotifyType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRestMeetingNotifyType_descriptor();
inline const ::std::string& EmRestMeetingNotifyType_Name(EmRestMeetingNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRestMeetingNotifyType_descriptor(), value);
}
inline bool EmRestMeetingNotifyType_Parse(
    const ::std::string& name, EmRestMeetingNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRestMeetingNotifyType>(
    EmRestMeetingNotifyType_descriptor(), name, value);
}
enum EmMtOperateUserInfo {
  emOperateUserAdd = 1,
  emOperateUserDelete = 2,
  emOperateUserModify = 3,
  emOperateUserSearch = 4
};
MTMSG_API bool EmMtOperateUserInfo_IsValid(int value);
const EmMtOperateUserInfo EmMtOperateUserInfo_MIN = emOperateUserAdd;
const EmMtOperateUserInfo EmMtOperateUserInfo_MAX = emOperateUserSearch;
const int EmMtOperateUserInfo_ARRAYSIZE = EmMtOperateUserInfo_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtOperateUserInfo_descriptor();
inline const ::std::string& EmMtOperateUserInfo_Name(EmMtOperateUserInfo value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtOperateUserInfo_descriptor(), value);
}
inline bool EmMtOperateUserInfo_Parse(
    const ::std::string& name, EmMtOperateUserInfo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtOperateUserInfo>(
    EmMtOperateUserInfo_descriptor(), name, value);
}
enum EmH323SrvType {
  emH323SrvH323None = 1,
  emH323SrvH323Pxy = 2,
  emH323SrvH323H460 = 3,
  emH323SrvH323Gk = 4
};
MTMSG_API bool EmH323SrvType_IsValid(int value);
const EmH323SrvType EmH323SrvType_MIN = emH323SrvH323None;
const EmH323SrvType EmH323SrvType_MAX = emH323SrvH323Gk;
const int EmH323SrvType_ARRAYSIZE = EmH323SrvType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmH323SrvType_descriptor();
inline const ::std::string& EmH323SrvType_Name(EmH323SrvType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmH323SrvType_descriptor(), value);
}
inline bool EmH323SrvType_Parse(
    const ::std::string& name, EmH323SrvType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmH323SrvType>(
    EmH323SrvType_descriptor(), name, value);
}
enum EmSipSrvType {
  emSipSrvServer = 1,
  emSipSrvPxy = 2
};
MTMSG_API bool EmSipSrvType_IsValid(int value);
const EmSipSrvType EmSipSrvType_MIN = emSipSrvServer;
const EmSipSrvType EmSipSrvType_MAX = emSipSrvPxy;
const int EmSipSrvType_ARRAYSIZE = EmSipSrvType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSipSrvType_descriptor();
inline const ::std::string& EmSipSrvType_Name(EmSipSrvType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSipSrvType_descriptor(), value);
}
inline bool EmSipSrvType_Parse(
    const ::std::string& name, EmSipSrvType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSipSrvType>(
    EmSipSrvType_descriptor(), name, value);
}
enum APIType {
  emUnknownAPI = 0,
  emPlatformAPI = 1,
  emWeiboAPI = 2,
  emMeetingAPI = 3,
  emAppAPI = 4
};
MTMSG_API bool APIType_IsValid(int value);
const APIType APIType_MIN = emUnknownAPI;
const APIType APIType_MAX = emAppAPI;
const int APIType_ARRAYSIZE = APIType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* APIType_descriptor();
inline const ::std::string& APIType_Name(APIType value) {
  return ::google::protobuf::internal::NameOfEnum(
    APIType_descriptor(), value);
}
inline bool APIType_Parse(
    const ::std::string& name, APIType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<APIType>(
    APIType_descriptor(), name, value);
}
enum EmChatType {
  emChatNormal = 0,
  emChatAuto = 1
};
MTMSG_API bool EmChatType_IsValid(int value);
const EmChatType EmChatType_MIN = emChatNormal;
const EmChatType EmChatType_MAX = emChatAuto;
const int EmChatType_ARRAYSIZE = EmChatType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmChatType_descriptor();
inline const ::std::string& EmChatType_Name(EmChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmChatType_descriptor(), value);
}
inline bool EmChatType_Parse(
    const ::std::string& name, EmChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmChatType>(
    EmChatType_descriptor(), name, value);
}
enum EmRtspStatus {
  emRtspInit = 1,
  emRtspPreReady = 2,
  emRtspReady = 3,
  emRtspPlaying = 4,
  emRtspPause = 5,
  emRtspResume = 6,
  emRtspAdjustSpeed = 7,
  emRtspAdjustProcess = 8
};
MTMSG_API bool EmRtspStatus_IsValid(int value);
const EmRtspStatus EmRtspStatus_MIN = emRtspInit;
const EmRtspStatus EmRtspStatus_MAX = emRtspAdjustProcess;
const int EmRtspStatus_ARRAYSIZE = EmRtspStatus_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRtspStatus_descriptor();
inline const ::std::string& EmRtspStatus_Name(EmRtspStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRtspStatus_descriptor(), value);
}
inline bool EmRtspStatus_Parse(
    const ::std::string& name, EmRtspStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRtspStatus>(
    EmRtspStatus_descriptor(), name, value);
}
enum EmServerAddrType {
  emSrvAddrTypeDefault = 0,
  emSrvAddrTypeCustom = 1
};
MTMSG_API bool EmServerAddrType_IsValid(int value);
const EmServerAddrType EmServerAddrType_MIN = emSrvAddrTypeDefault;
const EmServerAddrType EmServerAddrType_MAX = emSrvAddrTypeCustom;
const int EmServerAddrType_ARRAYSIZE = EmServerAddrType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmServerAddrType_descriptor();
inline const ::std::string& EmServerAddrType_Name(EmServerAddrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmServerAddrType_descriptor(), value);
}
inline bool EmServerAddrType_Parse(
    const ::std::string& name, EmServerAddrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmServerAddrType>(
    EmServerAddrType_descriptor(), name, value);
}
enum EmVMeetingVideoModel {
  emMeeting_vmeeting_video_model_fluent = 1,
  emMeeting_vmeeting_video_model_normal_quality = 2,
  emMeeting_vmeeting_video_model_high_quality = 3,
  emMeeting_vmeeting_video_model_full_high_quality = 4
};
MTMSG_API bool EmVMeetingVideoModel_IsValid(int value);
const EmVMeetingVideoModel EmVMeetingVideoModel_MIN = emMeeting_vmeeting_video_model_fluent;
const EmVMeetingVideoModel EmVMeetingVideoModel_MAX = emMeeting_vmeeting_video_model_full_high_quality;
const int EmVMeetingVideoModel_ARRAYSIZE = EmVMeetingVideoModel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVMeetingVideoModel_descriptor();
inline const ::std::string& EmVMeetingVideoModel_Name(EmVMeetingVideoModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVMeetingVideoModel_descriptor(), value);
}
inline bool EmVMeetingVideoModel_Parse(
    const ::std::string& name, EmVMeetingVideoModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVMeetingVideoModel>(
    EmVMeetingVideoModel_descriptor(), name, value);
}
enum EmDesktopShareLimit {
  emMeeting_desktop_share_limit_speaker = 0,
  emMeeting_desktop_share_limit_all = 1
};
MTMSG_API bool EmDesktopShareLimit_IsValid(int value);
const EmDesktopShareLimit EmDesktopShareLimit_MIN = emMeeting_desktop_share_limit_speaker;
const EmDesktopShareLimit EmDesktopShareLimit_MAX = emMeeting_desktop_share_limit_all;
const int EmDesktopShareLimit_ARRAYSIZE = EmDesktopShareLimit_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDesktopShareLimit_descriptor();
inline const ::std::string& EmDesktopShareLimit_Name(EmDesktopShareLimit value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDesktopShareLimit_descriptor(), value);
}
inline bool EmDesktopShareLimit_Parse(
    const ::std::string& name, EmDesktopShareLimit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDesktopShareLimit>(
    EmDesktopShareLimit_descriptor(), name, value);
}
enum EmVMeetingMode {
  emMeeting_vmeeting_mode_discuss = 0,
  emMeeting_vmeeting_mode_training = 1
};
MTMSG_API bool EmVMeetingMode_IsValid(int value);
const EmVMeetingMode EmVMeetingMode_MIN = emMeeting_vmeeting_mode_discuss;
const EmVMeetingMode EmVMeetingMode_MAX = emMeeting_vmeeting_mode_training;
const int EmVMeetingMode_ARRAYSIZE = EmVMeetingMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVMeetingMode_descriptor();
inline const ::std::string& EmVMeetingMode_Name(EmVMeetingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVMeetingMode_descriptor(), value);
}
inline bool EmVMeetingMode_Parse(
    const ::std::string& name, EmVMeetingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVMeetingMode>(
    EmVMeetingMode_descriptor(), name, value);
}
enum EmCallDuration {
  emMeeting_call_duration_very_short = 0,
  emMeeting_call_duration_short = 1,
  emMeeting_call_duration_normal = 2,
  emMeeting_call_duration_long = 3,
  emMeeting_call_duration_very_long = 4
};
MTMSG_API bool EmCallDuration_IsValid(int value);
const EmCallDuration EmCallDuration_MIN = emMeeting_call_duration_very_short;
const EmCallDuration EmCallDuration_MAX = emMeeting_call_duration_very_long;
const int EmCallDuration_ARRAYSIZE = EmCallDuration_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCallDuration_descriptor();
inline const ::std::string& EmCallDuration_Name(EmCallDuration value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCallDuration_descriptor(), value);
}
inline bool EmCallDuration_Parse(
    const ::std::string& name, EmCallDuration* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCallDuration>(
    EmCallDuration_descriptor(), name, value);
}
enum EmNetType {
  emInternet = 0,
  emSpecial = 1,
  emVPN = 2
};
MTMSG_API bool EmNetType_IsValid(int value);
const EmNetType EmNetType_MIN = emInternet;
const EmNetType EmNetType_MAX = emVPN;
const int EmNetType_ARRAYSIZE = EmNetType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNetType_descriptor();
inline const ::std::string& EmNetType_Name(EmNetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNetType_descriptor(), value);
}
inline bool EmNetType_Parse(
    const ::std::string& name, EmNetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNetType>(
    EmNetType_descriptor(), name, value);
}
enum EmUpgradeVerLevel {
  emUpgradeLevelForced = 0,
  emUpgradeLevelSuggested = 1,
  emUpgradeLevelNormal = 2
};
MTMSG_API bool EmUpgradeVerLevel_IsValid(int value);
const EmUpgradeVerLevel EmUpgradeVerLevel_MIN = emUpgradeLevelForced;
const EmUpgradeVerLevel EmUpgradeVerLevel_MAX = emUpgradeLevelNormal;
const int EmUpgradeVerLevel_ARRAYSIZE = EmUpgradeVerLevel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmUpgradeVerLevel_descriptor();
inline const ::std::string& EmUpgradeVerLevel_Name(EmUpgradeVerLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmUpgradeVerLevel_descriptor(), value);
}
inline bool EmUpgradeVerLevel_Parse(
    const ::std::string& name, EmUpgradeVerLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmUpgradeVerLevel>(
    EmUpgradeVerLevel_descriptor(), name, value);
}
enum EmUpgradeReleaseAttr {
  emUpgradeAttr = 0,
  emUpgradeAttrCommon = 1,
  emUpgradeAttrRecommend = 2,
  emUpgradeAttrGray = 4
};
MTMSG_API bool EmUpgradeReleaseAttr_IsValid(int value);
const EmUpgradeReleaseAttr EmUpgradeReleaseAttr_MIN = emUpgradeAttr;
const EmUpgradeReleaseAttr EmUpgradeReleaseAttr_MAX = emUpgradeAttrGray;
const int EmUpgradeReleaseAttr_ARRAYSIZE = EmUpgradeReleaseAttr_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmUpgradeReleaseAttr_descriptor();
inline const ::std::string& EmUpgradeReleaseAttr_Name(EmUpgradeReleaseAttr value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmUpgradeReleaseAttr_descriptor(), value);
}
inline bool EmUpgradeReleaseAttr_Parse(
    const ::std::string& name, EmUpgradeReleaseAttr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmUpgradeReleaseAttr>(
    EmUpgradeReleaseAttr_descriptor(), name, value);
}
enum EmMtPortrait {
  mtportrait32 = 0,
  mtportrait40 = 1,
  mtportrait64 = 2,
  mtportrait128 = 3,
  mtportrait256 = 4
};
MTMSG_API bool EmMtPortrait_IsValid(int value);
const EmMtPortrait EmMtPortrait_MIN = mtportrait32;
const EmMtPortrait EmMtPortrait_MAX = mtportrait256;
const int EmMtPortrait_ARRAYSIZE = EmMtPortrait_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtPortrait_descriptor();
inline const ::std::string& EmMtPortrait_Name(EmMtPortrait value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtPortrait_descriptor(), value);
}
inline bool EmMtPortrait_Parse(
    const ::std::string& name, EmMtPortrait* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtPortrait>(
    EmMtPortrait_descriptor(), name, value);
}
enum EmMCMode {
  emMcSpeech = 0,
  emMcDiscuss = 1,
  emMcInvalid = 2
};
MTMSG_API bool EmMCMode_IsValid(int value);
const EmMCMode EmMCMode_MIN = emMcSpeech;
const EmMCMode EmMCMode_MAX = emMcInvalid;
const int EmMCMode_ARRAYSIZE = EmMCMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMCMode_descriptor();
inline const ::std::string& EmMCMode_Name(EmMCMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMCMode_descriptor(), value);
}
inline bool EmMCMode_Parse(
    const ::std::string& name, EmMCMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMCMode>(
    EmMCMode_descriptor(), name, value);
}
enum EmServerType {
  emAPS = 0,
  emXNU = 1,
  emSUS = 2,
  emNMS = 3,
  emNTS = 4,
  emSIP = 5,
  emNonH323 = 6,
  emStdH323 = 7,
  emNTP = 8,
  emVOD = 9,
  emMoMeeting = 10,
  emMoPlatform = 11,
  emVRS = 12,
  emDCS = 13,
  emNS = 14,
  emServerTypeEnd = 15
};
MTMSG_API bool EmServerType_IsValid(int value);
const EmServerType EmServerType_MIN = emAPS;
const EmServerType EmServerType_MAX = emServerTypeEnd;
const int EmServerType_ARRAYSIZE = EmServerType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmServerType_descriptor();
inline const ::std::string& EmServerType_Name(EmServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmServerType_descriptor(), value);
}
inline bool EmServerType_Parse(
    const ::std::string& name, EmServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmServerType>(
    EmServerType_descriptor(), name, value);
}
enum EmServerState {
  emIdle = 0,
  emDnsQuerying = 1,
  emLogging_In = 2,
  emLogin_Succ = 3,
  emLogging_Out = 4,
  emDisconnected = 5,
  emLogin_Err = 6
};
MTMSG_API bool EmServerState_IsValid(int value);
const EmServerState EmServerState_MIN = emIdle;
const EmServerState EmServerState_MAX = emLogin_Err;
const int EmServerState_ARRAYSIZE = EmServerState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmServerState_descriptor();
inline const ::std::string& EmServerState_Name(EmServerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmServerState_descriptor(), value);
}
inline bool EmServerState_Parse(
    const ::std::string& name, EmServerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmServerState>(
    EmServerState_descriptor(), name, value);
}
enum EmMtCallRecordType {
  emCallIn = 0,
  emCallOut = 1,
  emMissed = 2,
  emAll = 3
};
MTMSG_API bool EmMtCallRecordType_IsValid(int value);
const EmMtCallRecordType EmMtCallRecordType_MIN = emCallIn;
const EmMtCallRecordType EmMtCallRecordType_MAX = emAll;
const int EmMtCallRecordType_ARRAYSIZE = EmMtCallRecordType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtCallRecordType_descriptor();
inline const ::std::string& EmMtCallRecordType_Name(EmMtCallRecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtCallRecordType_descriptor(), value);
}
inline bool EmMtCallRecordType_Parse(
    const ::std::string& name, EmMtCallRecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtCallRecordType>(
    EmMtCallRecordType_descriptor(), name, value);
}
enum EmMtCallType {
  emVideo = 0,
  emAudio = 1,
  emPhone = 2
};
MTMSG_API bool EmMtCallType_IsValid(int value);
const EmMtCallType EmMtCallType_MIN = emVideo;
const EmMtCallType EmMtCallType_MAX = emPhone;
const int EmMtCallType_ARRAYSIZE = EmMtCallType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtCallType_descriptor();
inline const ::std::string& EmMtCallType_Name(EmMtCallType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtCallType_descriptor(), value);
}
inline bool EmMtCallType_Parse(
    const ::std::string& name, EmMtCallType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtCallType>(
    EmMtCallType_descriptor(), name, value);
}
enum EmMtRecordErr {
  emRecord_Ok = 0,
  emRecord_Err_Index = 1,
  emRecord_Err_No_Marching_Records = 2,
  emRecord_Err_No_Marching_Type = 3,
  emRecord_Err_CallRecordType = 4,
  emRecord_Err_CallType = 5,
  emRecord_Err_Describe = 6,
  emRecord_Err_AddrType = 7,
  emRecord_Err_Addr = 8,
  emRecord_Err_Rate = 9,
  emRecord_Err_PackageNum = 10,
  emRecord_Err_Over_MaxLocalRecordNum = 11,
  emRoster_Err_GroupName_NULL = 100,
  emRoster_Err_GroupSn = 101,
  emRoster_Err_ParentGroupSn = 102,
  emRoster_Err_RosterSn = 103,
  emRoster_Err_RosterName = 104
};
MTMSG_API bool EmMtRecordErr_IsValid(int value);
const EmMtRecordErr EmMtRecordErr_MIN = emRecord_Ok;
const EmMtRecordErr EmMtRecordErr_MAX = emRoster_Err_RosterName;
const int EmMtRecordErr_ARRAYSIZE = EmMtRecordErr_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtRecordErr_descriptor();
inline const ::std::string& EmMtRecordErr_Name(EmMtRecordErr value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtRecordErr_descriptor(), value);
}
inline bool EmMtRecordErr_Parse(
    const ::std::string& name, EmMtRecordErr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtRecordErr>(
    EmMtRecordErr_descriptor(), name, value);
}
enum EmMtRecordSearchType {
  emCallRecordType = 0,
  emCallType = 1,
  emDescribe = 2
};
MTMSG_API bool EmMtRecordSearchType_IsValid(int value);
const EmMtRecordSearchType EmMtRecordSearchType_MIN = emCallRecordType;
const EmMtRecordSearchType EmMtRecordSearchType_MAX = emDescribe;
const int EmMtRecordSearchType_ARRAYSIZE = EmMtRecordSearchType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtRecordSearchType_descriptor();
inline const ::std::string& EmMtRecordSearchType_Name(EmMtRecordSearchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtRecordSearchType_descriptor(), value);
}
inline bool EmMtRecordSearchType_Parse(
    const ::std::string& name, EmMtRecordSearchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtRecordSearchType>(
    EmMtRecordSearchType_descriptor(), name, value);
}
enum EmMtAudPrecedenceLevel {
  emAudPrecedenceLow = 0,
  emAudPrecedenceMiddle = 1,
  emAudPrecedenceHigh = 2
};
MTMSG_API bool EmMtAudPrecedenceLevel_IsValid(int value);
const EmMtAudPrecedenceLevel EmMtAudPrecedenceLevel_MIN = emAudPrecedenceLow;
const EmMtAudPrecedenceLevel EmMtAudPrecedenceLevel_MAX = emAudPrecedenceHigh;
const int EmMtAudPrecedenceLevel_ARRAYSIZE = EmMtAudPrecedenceLevel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtAudPrecedenceLevel_descriptor();
inline const ::std::string& EmMtAudPrecedenceLevel_Name(EmMtAudPrecedenceLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtAudPrecedenceLevel_descriptor(), value);
}
inline bool EmMtAudPrecedenceLevel_Parse(
    const ::std::string& name, EmMtAudPrecedenceLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtAudPrecedenceLevel>(
    EmMtAudPrecedenceLevel_descriptor(), name, value);
}
enum EmAlarmLevel {
  emAlarmNormal = 0,
  emAlarmGeneral = 1,
  emAlarmImportant = 2,
  emAlarmCritical = 3,
  emAlarmUnknown = 4
};
MTMSG_API bool EmAlarmLevel_IsValid(int value);
const EmAlarmLevel EmAlarmLevel_MIN = emAlarmNormal;
const EmAlarmLevel EmAlarmLevel_MAX = emAlarmUnknown;
const int EmAlarmLevel_ARRAYSIZE = EmAlarmLevel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAlarmLevel_descriptor();
inline const ::std::string& EmAlarmLevel_Name(EmAlarmLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAlarmLevel_descriptor(), value);
}
inline bool EmAlarmLevel_Parse(
    const ::std::string& name, EmAlarmLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAlarmLevel>(
    EmAlarmLevel_descriptor(), name, value);
}
enum EmAlarmState {
  emStateAlarm = 0,
  emStateNormal = 1
};
MTMSG_API bool EmAlarmState_IsValid(int value);
const EmAlarmState EmAlarmState_MIN = emStateAlarm;
const EmAlarmState EmAlarmState_MAX = emStateNormal;
const int EmAlarmState_ARRAYSIZE = EmAlarmState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAlarmState_descriptor();
inline const ::std::string& EmAlarmState_Name(EmAlarmState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAlarmState_descriptor(), value);
}
inline bool EmAlarmState_Parse(
    const ::std::string& name, EmAlarmState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAlarmState>(
    EmAlarmState_descriptor(), name, value);
}
enum EmAlarmCode {
  emAlarmFileSysErr = 1010,
  emAlarmSysBusy = 1011,
  emAlarmFanErr = 1016,
  emAlarmTempHigh = 1017,
  emAlarmVoltageHigh = 1018
};
MTMSG_API bool EmAlarmCode_IsValid(int value);
const EmAlarmCode EmAlarmCode_MIN = emAlarmFileSysErr;
const EmAlarmCode EmAlarmCode_MAX = emAlarmVoltageHigh;
const int EmAlarmCode_ARRAYSIZE = EmAlarmCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAlarmCode_descriptor();
inline const ::std::string& EmAlarmCode_Name(EmAlarmCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAlarmCode_descriptor(), value);
}
inline bool EmAlarmCode_Parse(
    const ::std::string& name, EmAlarmCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAlarmCode>(
    EmAlarmCode_descriptor(), name, value);
}
enum EmDLProtocol {
  emPPP = 0,
  emHDLC = 1,
  emPPPOE = 2,
  emMP = 3
};
MTMSG_API bool EmDLProtocol_IsValid(int value);
const EmDLProtocol EmDLProtocol_MIN = emPPP;
const EmDLProtocol EmDLProtocol_MAX = emMP;
const int EmDLProtocol_ARRAYSIZE = EmDLProtocol_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDLProtocol_descriptor();
inline const ::std::string& EmDLProtocol_Name(EmDLProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDLProtocol_descriptor(), value);
}
inline bool EmDLProtocol_Parse(
    const ::std::string& name, EmDLProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDLProtocol>(
    EmDLProtocol_descriptor(), name, value);
}
enum EmAuthenticationType {
  emE1AuthTypeNone = 0,
  emE1AuthTypePAP = 1,
  emE1AuthTypeCHAP = 2
};
MTMSG_API bool EmAuthenticationType_IsValid(int value);
const EmAuthenticationType EmAuthenticationType_MIN = emE1AuthTypeNone;
const EmAuthenticationType EmAuthenticationType_MAX = emE1AuthTypeCHAP;
const int EmAuthenticationType_ARRAYSIZE = EmAuthenticationType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAuthenticationType_descriptor();
inline const ::std::string& EmAuthenticationType_Name(EmAuthenticationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAuthenticationType_descriptor(), value);
}
inline bool EmAuthenticationType_Parse(
    const ::std::string& name, EmAuthenticationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAuthenticationType>(
    EmAuthenticationType_descriptor(), name, value);
}
enum EmApsLoginErrcode {
  emApsLoginOk = 0,
  emApsLoginErrUnknown = 1
};
MTMSG_API bool EmApsLoginErrcode_IsValid(int value);
const EmApsLoginErrcode EmApsLoginErrcode_MIN = emApsLoginOk;
const EmApsLoginErrcode EmApsLoginErrcode_MAX = emApsLoginErrUnknown;
const int EmApsLoginErrcode_ARRAYSIZE = EmApsLoginErrcode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmApsLoginErrcode_descriptor();
inline const ::std::string& EmApsLoginErrcode_Name(EmApsLoginErrcode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmApsLoginErrcode_descriptor(), value);
}
inline bool EmApsLoginErrcode_Parse(
    const ::std::string& name, EmApsLoginErrcode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmApsLoginErrcode>(
    EmApsLoginErrcode_descriptor(), name, value);
}
enum EmPortType {
  emConfChanPort = 0,
  emImPort = 1,
  emVodPort = 2,
  emMcPort = 3,
  emH323CallingPort = 4,
  emH323TcpBasePort = 5,
  emH323TcpEndPort = 6,
  emH323pxyBasePort = 7,
  emH323pxyEndPort = 8,
  emSipBfcpPort = 9,
  emMTCPort = 10,
  emGKPort = 11,
  emSipCallingPort = 12
};
MTMSG_API bool EmPortType_IsValid(int value);
const EmPortType EmPortType_MIN = emConfChanPort;
const EmPortType EmPortType_MAX = emSipCallingPort;
const int EmPortType_ARRAYSIZE = EmPortType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPortType_descriptor();
inline const ::std::string& EmPortType_Name(EmPortType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPortType_descriptor(), value);
}
inline bool EmPortType_Parse(
    const ::std::string& name, EmPortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPortType>(
    EmPortType_descriptor(), name, value);
}
enum EmVideoType {
  em1stPriomVideo = 0,
  em2ndPriomVideo = 1,
  em3rdPriomVideo = 2,
  emSecondVideo = 10
};
MTMSG_API bool EmVideoType_IsValid(int value);
const EmVideoType EmVideoType_MIN = em1stPriomVideo;
const EmVideoType EmVideoType_MAX = emSecondVideo;
const int EmVideoType_ARRAYSIZE = EmVideoType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVideoType_descriptor();
inline const ::std::string& EmVideoType_Name(EmVideoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVideoType_descriptor(), value);
}
inline bool EmVideoType_Parse(
    const ::std::string& name, EmVideoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVideoType>(
    EmVideoType_descriptor(), name, value);
}
enum EmVideoOutPutMode {
  emVOM_HD_ORIGIN = 0,
  emVOM_HD_1080p_24 = 1,
  emVOM_HD_1080p_25 = 2,
  emVOM_HD_1080p_30 = 3,
  emVOM_HD_1080p_50 = 4,
  emVOM_HD_1080p_60hz = 5,
  emVOM_HD_1080p_60fps = 6,
  emVOM_HD_1080i_50 = 7,
  emVOM_HD_1080i_60 = 8,
  emVOM_HD_720p_50 = 9,
  emVOM_HD_720p_60hz = 10,
  emVOM_HD_720p_60fps = 11,
  emVOM_HD_576i_50 = 12,
  emVOM_HD_1080p_29 = 13,
  emVOM_HD_1080p_59 = 14,
  emVOM_HD_576p = 15,
  emVOM_HD_1080p_29_97 = 16,
  emVOM_HD_1080p_59_94 = 17,
  emVOM_HD_VGA_60 = 18,
  emVOM_HD_VGA_75 = 19,
  emVOM_HD_SVGA_60 = 20,
  emVOM_HD_SVGA_75 = 21,
  emVOM_HD_XGA_60 = 22,
  emVOM_HD_XGA_75 = 23,
  emVOM_HD_SXGA_60 = 24,
  emVOM_HD_WXGA1280x768_60 = 25,
  emVOM_HD_WXGA1280x768_75 = 26,
  emVOM_HD_WXGA1280x800_60 = 27,
  emVOM_HD_WXGA1280x800_75 = 28,
  emVOM_HD_WXGA1366x768_60 = 29,
  emVOM_HD_UXGA1600x1200_60 = 30,
  emVOM_HD_WSXGA1440x900_60 = 31,
  emVOM_HD_SXGAPLUS1680x1050_60 = 32,
  emVOM_HD_4k3860x2160_30 = 33,
  emVOM_HD_4k3860x2160_60 = 34
};
MTMSG_API bool EmVideoOutPutMode_IsValid(int value);
const EmVideoOutPutMode EmVideoOutPutMode_MIN = emVOM_HD_ORIGIN;
const EmVideoOutPutMode EmVideoOutPutMode_MAX = emVOM_HD_4k3860x2160_60;
const int EmVideoOutPutMode_ARRAYSIZE = EmVideoOutPutMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVideoOutPutMode_descriptor();
inline const ::std::string& EmVideoOutPutMode_Name(EmVideoOutPutMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVideoOutPutMode_descriptor(), value);
}
inline bool EmVideoOutPutMode_Parse(
    const ::std::string& name, EmVideoOutPutMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVideoOutPutMode>(
    EmVideoOutPutMode_descriptor(), name, value);
}
enum EmTextAlign {
  emAlignLeft = 0,
  emAlignCenter = 1,
  emAlignRight = 2
};
MTMSG_API bool EmTextAlign_IsValid(int value);
const EmTextAlign EmTextAlign_MIN = emAlignLeft;
const EmTextAlign EmTextAlign_MAX = emAlignRight;
const int EmTextAlign_ARRAYSIZE = EmTextAlign_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmTextAlign_descriptor();
inline const ::std::string& EmTextAlign_Name(EmTextAlign value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmTextAlign_descriptor(), value);
}
inline bool EmTextAlign_Parse(
    const ::std::string& name, EmTextAlign* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmTextAlign>(
    EmTextAlign_descriptor(), name, value);
}
enum EmRollMode {
  emStatic = 0,
  emRight2Left = 1,
  emDown2Up = 2,
  emScollPage = 3
};
MTMSG_API bool EmRollMode_IsValid(int value);
const EmRollMode EmRollMode_MIN = emStatic;
const EmRollMode EmRollMode_MAX = emScollPage;
const int EmRollMode_ARRAYSIZE = EmRollMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRollMode_descriptor();
inline const ::std::string& EmRollMode_Name(EmRollMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRollMode_descriptor(), value);
}
inline bool EmRollMode_Parse(
    const ::std::string& name, EmRollMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRollMode>(
    EmRollMode_descriptor(), name, value);
}
enum EmRollSpeed {
  emRollSlower = 0,
  emRollSlow = 1,
  emRollNormal = 2,
  emRollFast = 3,
  emRollFaster = 4
};
MTMSG_API bool EmRollSpeed_IsValid(int value);
const EmRollSpeed EmRollSpeed_MIN = emRollSlower;
const EmRollSpeed EmRollSpeed_MAX = emRollFaster;
const int EmRollSpeed_ARRAYSIZE = EmRollSpeed_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRollSpeed_descriptor();
inline const ::std::string& EmRollSpeed_Name(EmRollSpeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRollSpeed_descriptor(), value);
}
inline bool EmRollSpeed_Parse(
    const ::std::string& name, EmRollSpeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRollSpeed>(
    EmRollSpeed_descriptor(), name, value);
}
enum EmHDAudPortIn {
  emHDAudInBegin = 0,
  emHDAudInDMic1 = 1,
  emHDAudInDMic2 = 2,
  emHDAudInXLR = 3,
  emHDAudInWMic1 = 4,
  emHDAudInWMic2 = 5,
  emHDAudInWMic3 = 6,
  emHDAudInRCA = 7,
  emHDAudInTRS3_5 = 8,
  emHDAudInHDMI1 = 9,
  emHDAudInHDMI2 = 10,
  emHDAudInHDMI3 = 11,
  emHDAudInDHDMI = 12,
  emHDAudInSDI1 = 13,
  emHDAudInSDI2 = 14,
  emHDAudInHDBaseT1 = 15,
  emHDAudInHDBaseT2 = 16,
  emHDAudInDsiMic1 = 17,
  emHDAudInDsiMic2 = 18
};
MTMSG_API bool EmHDAudPortIn_IsValid(int value);
const EmHDAudPortIn EmHDAudPortIn_MIN = emHDAudInBegin;
const EmHDAudPortIn EmHDAudPortIn_MAX = emHDAudInDsiMic2;
const int EmHDAudPortIn_ARRAYSIZE = EmHDAudPortIn_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDAudPortIn_descriptor();
inline const ::std::string& EmHDAudPortIn_Name(EmHDAudPortIn value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDAudPortIn_descriptor(), value);
}
inline bool EmHDAudPortIn_Parse(
    const ::std::string& name, EmHDAudPortIn* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDAudPortIn>(
    EmHDAudPortIn_descriptor(), name, value);
}
enum EmHDAudPortOut {
  emHDAudOutBegin = 0,
  emHDAudOutRCA = 1,
  emHDAudOutTRS6_5 = 2,
  emHDAudOutTRS3_5 = 3,
  emHDAudOutDHDMI1 = 4,
  emHDAudOutDHDMI2 = 5,
  emHDAudOutHDMI = 6,
  emHDAudOutSDI = 7,
  emHDAudOutHDMI1 = 8,
  emHDAudOutHDMI2 = 9
};
MTMSG_API bool EmHDAudPortOut_IsValid(int value);
const EmHDAudPortOut EmHDAudPortOut_MIN = emHDAudOutBegin;
const EmHDAudPortOut EmHDAudPortOut_MAX = emHDAudOutHDMI2;
const int EmHDAudPortOut_ARRAYSIZE = EmHDAudPortOut_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDAudPortOut_descriptor();
inline const ::std::string& EmHDAudPortOut_Name(EmHDAudPortOut value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDAudPortOut_descriptor(), value);
}
inline bool EmHDAudPortOut_Parse(
    const ::std::string& name, EmHDAudPortOut* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDAudPortOut>(
    EmHDAudPortOut_descriptor(), name, value);
}
enum EmHDMultiVideoSwitch {
  emHDMultiVideoStop = 0,
  emHDMultiView = 1,
  emHDMultiStream = 2
};
MTMSG_API bool EmHDMultiVideoSwitch_IsValid(int value);
const EmHDMultiVideoSwitch EmHDMultiVideoSwitch_MIN = emHDMultiVideoStop;
const EmHDMultiVideoSwitch EmHDMultiVideoSwitch_MAX = emHDMultiStream;
const int EmHDMultiVideoSwitch_ARRAYSIZE = EmHDMultiVideoSwitch_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDMultiVideoSwitch_descriptor();
inline const ::std::string& EmHDMultiVideoSwitch_Name(EmHDMultiVideoSwitch value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDMultiVideoSwitch_descriptor(), value);
}
inline bool EmHDMultiVideoSwitch_Parse(
    const ::std::string& name, EmHDMultiVideoSwitch* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDMultiVideoSwitch>(
    EmHDMultiVideoSwitch_descriptor(), name, value);
}
enum EmHDMultiViewMP {
  emMVMP_LeftRight_One = 0,
  emMVMP_BigSmall_RightDown = 1,
  emMVMP_BigSmall_LeftDown = 2,
  emMVMP_BigSmall_LeftUp = 3,
  emMVMP_BigSmall_RightUp = 4,
  emMVMP_3View_1Big2Small = 5,
  emMVMP_3View_1Top2Bottom = 6,
  emMVMP_SingleView_Close = 7
};
MTMSG_API bool EmHDMultiViewMP_IsValid(int value);
const EmHDMultiViewMP EmHDMultiViewMP_MIN = emMVMP_LeftRight_One;
const EmHDMultiViewMP EmHDMultiViewMP_MAX = emMVMP_SingleView_Close;
const int EmHDMultiViewMP_ARRAYSIZE = EmHDMultiViewMP_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDMultiViewMP_descriptor();
inline const ::std::string& EmHDMultiViewMP_Name(EmHDMultiViewMP value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDMultiViewMP_descriptor(), value);
}
inline bool EmHDMultiViewMP_Parse(
    const ::std::string& name, EmHDMultiViewMP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDMultiViewMP>(
    EmHDMultiViewMP_descriptor(), name, value);
}
enum EmHDVideoPortMode {
  emVPM_Invalid = 0,
  emVPM_Auto = 1,
  emVPM_HDMI = 2,
  emVPM_DVI = 3,
  emVPM_YPBPR = 4,
  emVPM_VGA = 5
};
MTMSG_API bool EmHDVideoPortMode_IsValid(int value);
const EmHDVideoPortMode EmHDVideoPortMode_MIN = emVPM_Invalid;
const EmHDVideoPortMode EmHDVideoPortMode_MAX = emVPM_VGA;
const int EmHDVideoPortMode_ARRAYSIZE = EmHDVideoPortMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDVideoPortMode_descriptor();
inline const ::std::string& EmHDVideoPortMode_Name(EmHDVideoPortMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDVideoPortMode_descriptor(), value);
}
inline bool EmHDVideoPortMode_Parse(
    const ::std::string& name, EmHDVideoPortMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDVideoPortMode>(
    EmHDVideoPortMode_descriptor(), name, value);
}
enum EmHDVideoOutPortType {
  emVOT_Invalid = 0,
  emVOT_DVI1 = 1,
  emVOT_DVI2 = 2,
  emVOT_DVI3 = 3,
  emVOT_DVI4 = 4,
  emVOT_HDMI1 = 5,
  emVOT_HDMI2 = 6,
  emVOT_HDMI3 = 7,
  emVOT_HDMI4 = 8,
  emVOT_YPbPr1 = 9,
  emVOT_YPbPr2 = 10,
  emVOT_YPbPr3 = 11,
  emVOT_YPbPr4 = 12,
  emVOT_VGA1 = 13,
  emVOT_VGA2 = 14,
  emVOT_VGA3 = 15,
  emVOT_VGA4 = 16,
  emVOT_SDI1 = 17,
  emVOT_SDI2 = 18,
  emVOT_SDI3 = 19,
  emVOT_SDI4 = 20,
  emVOT_C1 = 21,
  emVOT_C2 = 22,
  emVOT_C3 = 23
};
MTMSG_API bool EmHDVideoOutPortType_IsValid(int value);
const EmHDVideoOutPortType EmHDVideoOutPortType_MIN = emVOT_Invalid;
const EmHDVideoOutPortType EmHDVideoOutPortType_MAX = emVOT_C3;
const int EmHDVideoOutPortType_ARRAYSIZE = EmHDVideoOutPortType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDVideoOutPortType_descriptor();
inline const ::std::string& EmHDVideoOutPortType_Name(EmHDVideoOutPortType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDVideoOutPortType_descriptor(), value);
}
inline bool EmHDVideoOutPortType_Parse(
    const ::std::string& name, EmHDVideoOutPortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDVideoOutPortType>(
    EmHDVideoOutPortType_descriptor(), name, value);
}
enum EmHDVideoSourceType {
  emVS_Invalid = 0,
  emVS_1stDec = 1,
  emVS_2ndDec = 2,
  emVS_3rdDec = 3,
  emVS_4thDec = 4,
  emVS_5thDec = 5,
  emVS_6thDec = 6,
  emVS_7thDec = 7,
  emVS_8thDec = 8,
  emVS_9thDec = 9,
  emVS_10thDec = 10,
  emVS_MtVidInnerCamera = 11,
  emVS_MtVidDVI1 = 12,
  emVS_MtVidDVI2 = 13,
  emVS_MtVidDVI3 = 14,
  emVS_MtVidDVI4 = 15,
  emVS_MtVidHDMI1 = 16,
  emVS_MtVidHDMI2 = 17,
  emVS_MtVidHDMI3 = 18,
  emVS_MtVidHDMI4 = 19,
  emVS_MtVidYPbPr1 = 20,
  emVS_MtVidYPbPr2 = 21,
  emVS_MtVidYPbPr3 = 22,
  emVS_MtVidYPbPr4 = 23,
  emVS_MtVidVGA1 = 24,
  emVS_MtVidVGA2 = 25,
  emVS_MtVidVGA3 = 26,
  emVS_MtVidVGA4 = 27,
  emVS_MtVidC1 = 28,
  emVS_MtVidC2 = 29,
  emVS_MtVidC3 = 30,
  emVS_MtVidS1 = 31,
  emVS_MtVidS2 = 32,
  emVS_MtVidS3 = 33,
  emVS_MtVidHDBaseT1 = 34,
  emVS_MtVidHDBaseT2 = 35,
  emVS_MtVidHDBaseT3 = 36,
  emVS_MtVidHDBaseT4 = 37,
  emVS_MtVidSDI1 = 38,
  emVS_MtVidSDI2 = 39,
  emVS_MtVidSDI3 = 40,
  emVS_MtVidSDI4 = 41
};
MTMSG_API bool EmHDVideoSourceType_IsValid(int value);
const EmHDVideoSourceType EmHDVideoSourceType_MIN = emVS_Invalid;
const EmHDVideoSourceType EmHDVideoSourceType_MAX = emVS_MtVidSDI4;
const int EmHDVideoSourceType_ARRAYSIZE = EmHDVideoSourceType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDVideoSourceType_descriptor();
inline const ::std::string& EmHDVideoSourceType_Name(EmHDVideoSourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDVideoSourceType_descriptor(), value);
}
inline bool EmHDVideoSourceType_Parse(
    const ::std::string& name, EmHDVideoSourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDVideoSourceType>(
    EmHDVideoSourceType_descriptor(), name, value);
}
enum EmHDLastDisplay {
  emLD_LastFrame = 0,
  emLD_BlueScreen = 1,
  emLD_StaticBMP = 2,
  emLD_CustomBMP = 3
};
MTMSG_API bool EmHDLastDisplay_IsValid(int value);
const EmHDLastDisplay EmHDLastDisplay_MIN = emLD_LastFrame;
const EmHDLastDisplay EmHDLastDisplay_MAX = emLD_CustomBMP;
const int EmHDLastDisplay_ARRAYSIZE = EmHDLastDisplay_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDLastDisplay_descriptor();
inline const ::std::string& EmHDLastDisplay_Name(EmHDLastDisplay value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDLastDisplay_descriptor(), value);
}
inline bool EmHDLastDisplay_Parse(
    const ::std::string& name, EmHDLastDisplay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDLastDisplay>(
    EmHDLastDisplay_descriptor(), name, value);
}
enum EmHDImageNoise {
  emImageNoise_Disable = 0,
  emImageNoise_Low = 1,
  emImageNoise_Med = 2,
  emImageNoise_High = 3,
  emImageNoise_UltraHigh = 4
};
MTMSG_API bool EmHDImageNoise_IsValid(int value);
const EmHDImageNoise EmHDImageNoise_MIN = emImageNoise_Disable;
const EmHDImageNoise EmHDImageNoise_MAX = emImageNoise_UltraHigh;
const int EmHDImageNoise_ARRAYSIZE = EmHDImageNoise_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDImageNoise_descriptor();
inline const ::std::string& EmHDImageNoise_Name(EmHDImageNoise value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDImageNoise_descriptor(), value);
}
inline bool EmHDImageNoise_Parse(
    const ::std::string& name, EmHDImageNoise* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDImageNoise>(
    EmHDImageNoise_descriptor(), name, value);
}
enum EmHDImageDeformationTensile {
  emImageDT_Transverse = 0,
  emImageDT_Longitudinal = 1
};
MTMSG_API bool EmHDImageDeformationTensile_IsValid(int value);
const EmHDImageDeformationTensile EmHDImageDeformationTensile_MIN = emImageDT_Transverse;
const EmHDImageDeformationTensile EmHDImageDeformationTensile_MAX = emImageDT_Longitudinal;
const int EmHDImageDeformationTensile_ARRAYSIZE = EmHDImageDeformationTensile_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDImageDeformationTensile_descriptor();
inline const ::std::string& EmHDImageDeformationTensile_Name(EmHDImageDeformationTensile value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDImageDeformationTensile_descriptor(), value);
}
inline bool EmHDImageDeformationTensile_Parse(
    const ::std::string& name, EmHDImageDeformationTensile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDImageDeformationTensile>(
    EmHDImageDeformationTensile_descriptor(), name, value);
}
enum EmEthnetWorkMode {
  emEthModeAuto = 0,
  emEthMode10MFull = 1,
  emEthMode10MHalf = 2,
  emEthMode100MFull = 3,
  emEthMode100MHalf = 4,
  emEthMode1000MFull = 5,
  emEthMode1000MHalf = 6
};
MTMSG_API bool EmEthnetWorkMode_IsValid(int value);
const EmEthnetWorkMode EmEthnetWorkMode_MIN = emEthModeAuto;
const EmEthnetWorkMode EmEthnetWorkMode_MAX = emEthMode1000MHalf;
const int EmEthnetWorkMode_ARRAYSIZE = EmEthnetWorkMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEthnetWorkMode_descriptor();
inline const ::std::string& EmEthnetWorkMode_Name(EmEthnetWorkMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEthnetWorkMode_descriptor(), value);
}
inline bool EmEthnetWorkMode_Parse(
    const ::std::string& name, EmEthnetWorkMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEthnetWorkMode>(
    EmEthnetWorkMode_descriptor(), name, value);
}
enum EmEthInterfaceMode {
  emEthInterfaceModeBackup = 0,
  emEthInterfaceModeMulti = 1,
  emEthInterfaceModeSingle = 2
};
MTMSG_API bool EmEthInterfaceMode_IsValid(int value);
const EmEthInterfaceMode EmEthInterfaceMode_MIN = emEthInterfaceModeBackup;
const EmEthInterfaceMode EmEthInterfaceMode_MAX = emEthInterfaceModeSingle;
const int EmEthInterfaceMode_ARRAYSIZE = EmEthInterfaceMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEthInterfaceMode_descriptor();
inline const ::std::string& EmEthInterfaceMode_Name(EmEthInterfaceMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEthInterfaceMode_descriptor(), value);
}
inline bool EmEthInterfaceMode_Parse(
    const ::std::string& name, EmEthInterfaceMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEthInterfaceMode>(
    EmEthInterfaceMode_descriptor(), name, value);
}
enum EmEthStartupResult {
  emEthStartupSuccess = 0,
  emEthStartupFail = 1
};
MTMSG_API bool EmEthStartupResult_IsValid(int value);
const EmEthStartupResult EmEthStartupResult_MIN = emEthStartupSuccess;
const EmEthStartupResult EmEthStartupResult_MAX = emEthStartupFail;
const int EmEthStartupResult_ARRAYSIZE = EmEthStartupResult_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEthStartupResult_descriptor();
inline const ::std::string& EmEthStartupResult_Name(EmEthStartupResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEthStartupResult_descriptor(), value);
}
inline bool EmEthStartupResult_Parse(
    const ::std::string& name, EmEthStartupResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEthStartupResult>(
    EmEthStartupResult_descriptor(), name, value);
}
enum EmPPPoELinkState {
  emPPPoELinkStateIdle = 0,
  emPPPoELinkStateConnecting = 1,
  emPPPoELinkStateDisConnecting = 2,
  emPPPoELinkStateConnected = 3
};
MTMSG_API bool EmPPPoELinkState_IsValid(int value);
const EmPPPoELinkState EmPPPoELinkState_MIN = emPPPoELinkStateIdle;
const EmPPPoELinkState EmPPPoELinkState_MAX = emPPPoELinkStateConnected;
const int EmPPPoELinkState_ARRAYSIZE = EmPPPoELinkState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPPPoELinkState_descriptor();
inline const ::std::string& EmPPPoELinkState_Name(EmPPPoELinkState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPPPoELinkState_descriptor(), value);
}
inline bool EmPPPoELinkState_Parse(
    const ::std::string& name, EmPPPoELinkState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPPPoELinkState>(
    EmPPPoELinkState_descriptor(), name, value);
}
enum EmPPPoELinkErrReason {
  emPPPoELinkErrReason_None = 0,
  emPPPoELinkErrReason_UsrOrPwdError = 1,
  emPPPoELinkErrReason_Timeout = 2,
  emPPPoELinkErrReason_Linkdown = 3,
  emPPPoELinkErrReason_NoISPServer = 4,
  emPPPoELinkErrReason_Unknown = 5
};
MTMSG_API bool EmPPPoELinkErrReason_IsValid(int value);
const EmPPPoELinkErrReason EmPPPoELinkErrReason_MIN = emPPPoELinkErrReason_None;
const EmPPPoELinkErrReason EmPPPoELinkErrReason_MAX = emPPPoELinkErrReason_Unknown;
const int EmPPPoELinkErrReason_ARRAYSIZE = EmPPPoELinkErrReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPPPoELinkErrReason_descriptor();
inline const ::std::string& EmPPPoELinkErrReason_Name(EmPPPoELinkErrReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPPPoELinkErrReason_descriptor(), value);
}
inline bool EmPPPoELinkErrReason_Parse(
    const ::std::string& name, EmPPPoELinkErrReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPPPoELinkErrReason>(
    EmPPPoELinkErrReason_descriptor(), name, value);
}
enum EmWifiWorkMode {
  emWifiWorkModeClose = 0,
  emWifiWorkModeWifiClient = 1,
  emWifiWorkModeWifiAp = 2
};
MTMSG_API bool EmWifiWorkMode_IsValid(int value);
const EmWifiWorkMode EmWifiWorkMode_MIN = emWifiWorkModeClose;
const EmWifiWorkMode EmWifiWorkMode_MAX = emWifiWorkModeWifiAp;
const int EmWifiWorkMode_ARRAYSIZE = EmWifiWorkMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWifiWorkMode_descriptor();
inline const ::std::string& EmWifiWorkMode_Name(EmWifiWorkMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWifiWorkMode_descriptor(), value);
}
inline bool EmWifiWorkMode_Parse(
    const ::std::string& name, EmWifiWorkMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWifiWorkMode>(
    EmWifiWorkMode_descriptor(), name, value);
}
enum EmWifiKeyType {
  emWifiKeyTypeNone = 0,
  emWifiKeyTypeWPA = 1,
  emWifiKeyTypeWPA2 = 2,
  emWifiKeyTypeWPAWPA2 = 3,
  emWifiKeyTypeWEP = 4
};
MTMSG_API bool EmWifiKeyType_IsValid(int value);
const EmWifiKeyType EmWifiKeyType_MIN = emWifiKeyTypeNone;
const EmWifiKeyType EmWifiKeyType_MAX = emWifiKeyTypeWEP;
const int EmWifiKeyType_ARRAYSIZE = EmWifiKeyType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWifiKeyType_descriptor();
inline const ::std::string& EmWifiKeyType_Name(EmWifiKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWifiKeyType_descriptor(), value);
}
inline bool EmWifiKeyType_Parse(
    const ::std::string& name, EmWifiKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWifiKeyType>(
    EmWifiKeyType_descriptor(), name, value);
}
enum EmWifiSignalLevel {
  emWifiSignalLevelNone = 0,
  emWifiSignalLevelLess = 1,
  emWifiSignalLevelLow = 2,
  emWifiSignalLevelMid = 3,
  emWifiSignalLevelHigh = 4
};
MTMSG_API bool EmWifiSignalLevel_IsValid(int value);
const EmWifiSignalLevel EmWifiSignalLevel_MIN = emWifiSignalLevelNone;
const EmWifiSignalLevel EmWifiSignalLevel_MAX = emWifiSignalLevelHigh;
const int EmWifiSignalLevel_ARRAYSIZE = EmWifiSignalLevel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWifiSignalLevel_descriptor();
inline const ::std::string& EmWifiSignalLevel_Name(EmWifiSignalLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWifiSignalLevel_descriptor(), value);
}
inline bool EmWifiSignalLevel_Parse(
    const ::std::string& name, EmWifiSignalLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWifiSignalLevel>(
    EmWifiSignalLevel_descriptor(), name, value);
}
enum EmWifiLinkState {
  emWifiLinkStateIdle = 0,
  emWifiLinkStateAuthentication = 1,
  emWifiLinkStateBlocked = 2,
  emWifiLinkStateConnected = 3,
  emWifiLinkStateConnecting = 4,
  emWifiLinkStateDisConnected = 5,
  emWifiLinkStateDisConnecting = 6,
  emWifiLinkStateFailed = 7,
  emWifiLinkStateObtainingIpAddr = 8,
  emWifiLinkStateScanning = 9,
  emWifiLinkStateSuspended = 10,
  emWifiLinkStateVerifyingPoorLink = 11
};
MTMSG_API bool EmWifiLinkState_IsValid(int value);
const EmWifiLinkState EmWifiLinkState_MIN = emWifiLinkStateIdle;
const EmWifiLinkState EmWifiLinkState_MAX = emWifiLinkStateVerifyingPoorLink;
const int EmWifiLinkState_ARRAYSIZE = EmWifiLinkState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWifiLinkState_descriptor();
inline const ::std::string& EmWifiLinkState_Name(EmWifiLinkState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWifiLinkState_descriptor(), value);
}
inline bool EmWifiLinkState_Parse(
    const ::std::string& name, EmWifiLinkState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWifiLinkState>(
    EmWifiLinkState_descriptor(), name, value);
}
enum EmWifiLinkErrReason {
  emWifiLinkErrReason_None = 0,
  emWifiLinkErrReason_Failed = 1,
  emWifiLinkErrReason_Timeout = 2,
  emWifiLinkErrReason_Unknown = 3
};
MTMSG_API bool EmWifiLinkErrReason_IsValid(int value);
const EmWifiLinkErrReason EmWifiLinkErrReason_MIN = emWifiLinkErrReason_None;
const EmWifiLinkErrReason EmWifiLinkErrReason_MAX = emWifiLinkErrReason_Unknown;
const int EmWifiLinkErrReason_ARRAYSIZE = EmWifiLinkErrReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWifiLinkErrReason_descriptor();
inline const ::std::string& EmWifiLinkErrReason_Name(EmWifiLinkErrReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWifiLinkErrReason_descriptor(), value);
}
inline bool EmWifiLinkErrReason_Parse(
    const ::std::string& name, EmWifiLinkErrReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWifiLinkErrReason>(
    EmWifiLinkErrReason_descriptor(), name, value);
}
enum EmWifiApKeyType {
  emWifiApKeyTypeNone = 0,
  emWifiApKeyTypeWPA2 = 1
};
MTMSG_API bool EmWifiApKeyType_IsValid(int value);
const EmWifiApKeyType EmWifiApKeyType_MIN = emWifiApKeyTypeNone;
const EmWifiApKeyType EmWifiApKeyType_MAX = emWifiApKeyTypeWPA2;
const int EmWifiApKeyType_ARRAYSIZE = EmWifiApKeyType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWifiApKeyType_descriptor();
inline const ::std::string& EmWifiApKeyType_Name(EmWifiApKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWifiApKeyType_descriptor(), value);
}
inline bool EmWifiApKeyType_Parse(
    const ::std::string& name, EmWifiApKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWifiApKeyType>(
    EmWifiApKeyType_descriptor(), name, value);
}
enum EmWifiFrequencyBandType {
  emWifiFrequencyBandType_24GHz = 0,
  emWifiFrequencyBandType_50GHz = 1
};
MTMSG_API bool EmWifiFrequencyBandType_IsValid(int value);
const EmWifiFrequencyBandType EmWifiFrequencyBandType_MIN = emWifiFrequencyBandType_24GHz;
const EmWifiFrequencyBandType EmWifiFrequencyBandType_MAX = emWifiFrequencyBandType_50GHz;
const int EmWifiFrequencyBandType_ARRAYSIZE = EmWifiFrequencyBandType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWifiFrequencyBandType_descriptor();
inline const ::std::string& EmWifiFrequencyBandType_Name(EmWifiFrequencyBandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWifiFrequencyBandType_descriptor(), value);
}
inline bool EmWifiFrequencyBandType_Parse(
    const ::std::string& name, EmWifiFrequencyBandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWifiFrequencyBandType>(
    EmWifiFrequencyBandType_descriptor(), name, value);
}
enum EmMobileDataLinkState {
  emMobileDataLinkStateUnUsed = 0,
  emMobileDataLinkStateIdle = 1,
  emMobileDataLinkStateConnecting = 2,
  emMobileDataLinkLinkStateConnected = 3,
  emMobileDataLinkLinkStateSuspended = 4,
  emMobileDataLinkStateDisConnecting = 5,
  emMobileDataLinkLinkStateDisConnected = 6,
  emMobileDataLinkLinkStateUnknown = 7
};
MTMSG_API bool EmMobileDataLinkState_IsValid(int value);
const EmMobileDataLinkState EmMobileDataLinkState_MIN = emMobileDataLinkStateUnUsed;
const EmMobileDataLinkState EmMobileDataLinkState_MAX = emMobileDataLinkLinkStateUnknown;
const int EmMobileDataLinkState_ARRAYSIZE = EmMobileDataLinkState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMobileDataLinkState_descriptor();
inline const ::std::string& EmMobileDataLinkState_Name(EmMobileDataLinkState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMobileDataLinkState_descriptor(), value);
}
inline bool EmMobileDataLinkState_Parse(
    const ::std::string& name, EmMobileDataLinkState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMobileDataLinkState>(
    EmMobileDataLinkState_descriptor(), name, value);
}
enum EmMobileDataLinkErrReason {
  emMobileDataLinkErrReason_None = 0,
  emMobileDataLinkErrReason_Failed = 1,
  emMobileDataLinkErrReason_Timeout = 2,
  emMobileDataLinkErrReason_Unknown = 3
};
MTMSG_API bool EmMobileDataLinkErrReason_IsValid(int value);
const EmMobileDataLinkErrReason EmMobileDataLinkErrReason_MIN = emMobileDataLinkErrReason_None;
const EmMobileDataLinkErrReason EmMobileDataLinkErrReason_MAX = emMobileDataLinkErrReason_Unknown;
const int EmMobileDataLinkErrReason_ARRAYSIZE = EmMobileDataLinkErrReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMobileDataLinkErrReason_descriptor();
inline const ::std::string& EmMobileDataLinkErrReason_Name(EmMobileDataLinkErrReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMobileDataLinkErrReason_descriptor(), value);
}
inline bool EmMobileDataLinkErrReason_Parse(
    const ::std::string& name, EmMobileDataLinkErrReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMobileDataLinkErrReason>(
    EmMobileDataLinkErrReason_descriptor(), name, value);
}
enum EmMobileDataSignalLevel {
  emMobileDataSignalLevelNone = 0,
  emMobileDataSignalLevelLess = 1,
  emMobileDataSignalLevelLow = 2,
  emMobileDataSignalLevelMid = 3,
  emMobileDataSignalLevelHigh = 4
};
MTMSG_API bool EmMobileDataSignalLevel_IsValid(int value);
const EmMobileDataSignalLevel EmMobileDataSignalLevel_MIN = emMobileDataSignalLevelNone;
const EmMobileDataSignalLevel EmMobileDataSignalLevel_MAX = emMobileDataSignalLevelHigh;
const int EmMobileDataSignalLevel_ARRAYSIZE = EmMobileDataSignalLevel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMobileDataSignalLevel_descriptor();
inline const ::std::string& EmMobileDataSignalLevel_Name(EmMobileDataSignalLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMobileDataSignalLevel_descriptor(), value);
}
inline bool EmMobileDataSignalLevel_Parse(
    const ::std::string& name, EmMobileDataSignalLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMobileDataSignalLevel>(
    EmMobileDataSignalLevel_descriptor(), name, value);
}
enum EmNetAdapterWorkType {
  emNetAdapterWorkType_None = 0,
  emNetAdapterWorkType_Wifi = 1,
  emNetAdapterWorkType_PPPoE = 2,
  emNetAdapterWorkType_MobileData = 3,
  emNetAdapterWorkType_EthnetCard1 = 4,
  emNetAdapterWorkType_EthnetCard2 = 5,
  emNetAdapterWorkType_E1 = 6
};
MTMSG_API bool EmNetAdapterWorkType_IsValid(int value);
const EmNetAdapterWorkType EmNetAdapterWorkType_MIN = emNetAdapterWorkType_None;
const EmNetAdapterWorkType EmNetAdapterWorkType_MAX = emNetAdapterWorkType_E1;
const int EmNetAdapterWorkType_ARRAYSIZE = EmNetAdapterWorkType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNetAdapterWorkType_descriptor();
inline const ::std::string& EmNetAdapterWorkType_Name(EmNetAdapterWorkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNetAdapterWorkType_descriptor(), value);
}
inline bool EmNetAdapterWorkType_Parse(
    const ::std::string& name, EmNetAdapterWorkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNetAdapterWorkType>(
    EmNetAdapterWorkType_descriptor(), name, value);
}
enum EmMobileDataNetType {
  emMobileDataNetType_None = 0,
  emMobileDataNetType_CMCC = 1,
  emMobileDataNetType_CUCC = 2,
  emMobileDataNetType_CTCC = 3
};
MTMSG_API bool EmMobileDataNetType_IsValid(int value);
const EmMobileDataNetType EmMobileDataNetType_MIN = emMobileDataNetType_None;
const EmMobileDataNetType EmMobileDataNetType_MAX = emMobileDataNetType_CTCC;
const int EmMobileDataNetType_ARRAYSIZE = EmMobileDataNetType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMobileDataNetType_descriptor();
inline const ::std::string& EmMobileDataNetType_Name(EmMobileDataNetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMobileDataNetType_descriptor(), value);
}
inline bool EmMobileDataNetType_Parse(
    const ::std::string& name, EmMobileDataNetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMobileDataNetType>(
    EmMobileDataNetType_descriptor(), name, value);
}
enum EmMobileDataNetGenerationType {
  emMobileDataNetGenerationType_None = 0,
  emMobileDataNetGenerationType_2G = 1,
  emMobileDataNetGenerationType_3G = 2,
  emMobileDataNetGenerationType_4G = 3
};
MTMSG_API bool EmMobileDataNetGenerationType_IsValid(int value);
const EmMobileDataNetGenerationType EmMobileDataNetGenerationType_MIN = emMobileDataNetGenerationType_None;
const EmMobileDataNetGenerationType EmMobileDataNetGenerationType_MAX = emMobileDataNetGenerationType_4G;
const int EmMobileDataNetGenerationType_ARRAYSIZE = EmMobileDataNetGenerationType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMobileDataNetGenerationType_descriptor();
inline const ::std::string& EmMobileDataNetGenerationType_Name(EmMobileDataNetGenerationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMobileDataNetGenerationType_descriptor(), value);
}
inline bool EmMobileDataNetGenerationType_Parse(
    const ::std::string& name, EmMobileDataNetGenerationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMobileDataNetGenerationType>(
    EmMobileDataNetGenerationType_descriptor(), name, value);
}
enum EmEthnetParamType {
  emType_SetIpAndMask = 0,
  emType_SetMacAddress = 1,
  emType_SetAllParam = 2,
  emType_SetSecondIp = 3
};
MTMSG_API bool EmEthnetParamType_IsValid(int value);
const EmEthnetParamType EmEthnetParamType_MIN = emType_SetIpAndMask;
const EmEthnetParamType EmEthnetParamType_MAX = emType_SetSecondIp;
const int EmEthnetParamType_ARRAYSIZE = EmEthnetParamType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEthnetParamType_descriptor();
inline const ::std::string& EmEthnetParamType_Name(EmEthnetParamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEthnetParamType_descriptor(), value);
}
inline bool EmEthnetParamType_Parse(
    const ::std::string& name, EmEthnetParamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEthnetParamType>(
    EmEthnetParamType_descriptor(), name, value);
}
enum EmE1InterfaceType {
  emE1IfType_Serial = 0,
  emE1IfType_Virtual = 1
};
MTMSG_API bool EmE1InterfaceType_IsValid(int value);
const EmE1InterfaceType EmE1InterfaceType_MIN = emE1IfType_Serial;
const EmE1InterfaceType EmE1InterfaceType_MAX = emE1IfType_Virtual;
const int EmE1InterfaceType_ARRAYSIZE = EmE1InterfaceType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmE1InterfaceType_descriptor();
inline const ::std::string& EmE1InterfaceType_Name(EmE1InterfaceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmE1InterfaceType_descriptor(), value);
}
inline bool EmE1InterfaceType_Parse(
    const ::std::string& name, EmE1InterfaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmE1InterfaceType>(
    EmE1InterfaceType_descriptor(), name, value);
}
enum EmE1ClockType {
  emClockType_Dce = 0,
  emClockType_Dte = 1
};
MTMSG_API bool EmE1ClockType_IsValid(int value);
const EmE1ClockType EmE1ClockType_MIN = emClockType_Dce;
const EmE1ClockType EmE1ClockType_MAX = emClockType_Dte;
const int EmE1ClockType_ARRAYSIZE = EmE1ClockType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmE1ClockType_descriptor();
inline const ::std::string& EmE1ClockType_Name(EmE1ClockType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmE1ClockType_descriptor(), value);
}
inline bool EmE1ClockType_Parse(
    const ::std::string& name, EmE1ClockType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmE1ClockType>(
    EmE1ClockType_descriptor(), name, value);
}
enum EmE1ChainOptType {
  emType_OpenSingle = 0,
  emType_CloseSingle = 1,
  emType_OpenMult = 2,
  emType_CloseMult = 3
};
MTMSG_API bool EmE1ChainOptType_IsValid(int value);
const EmE1ChainOptType EmE1ChainOptType_MIN = emType_OpenSingle;
const EmE1ChainOptType EmE1ChainOptType_MAX = emType_CloseMult;
const int EmE1ChainOptType_ARRAYSIZE = EmE1ChainOptType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmE1ChainOptType_descriptor();
inline const ::std::string& EmE1ChainOptType_Name(EmE1ChainOptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmE1ChainOptType_descriptor(), value);
}
inline bool EmE1ChainOptType_Parse(
    const ::std::string& name, EmE1ChainOptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmE1ChainOptType>(
    EmE1ChainOptType_descriptor(), name, value);
}
enum EmE1LinkErrReason {
  emE1ErrNone = 0,
  emE1ErrParamException = 1,
  emE1ErrSerialIdInvalid = 2,
  emE1ErrE1IdInvalid = 3,
  emE1ErrE1TsMaskInvalid = 4,
  emE1ErrE1ChainGroupInvalid = 5,
  emE1ErrSerialProtocolTypeInvalid = 6,
  emE1ErrSerialEchoIntervalInvalid = 7,
  emE1ErrSerialEchoMaxRetryInvalid = 8,
  emE1ErrStringLenOverflow = 9,
  emE1ErrNipOptErr = 10,
  emE1ErrChainNotConfig = 11,
  emE1ErrChainConflict = 12,
  emE1ErrPppAuthTypeInvalid = 13,
  emE1ErrPppFragTooShort = 14,
  emE1ParamCheckErr = 15,
  emE1ParamConflict = 16
};
MTMSG_API bool EmE1LinkErrReason_IsValid(int value);
const EmE1LinkErrReason EmE1LinkErrReason_MIN = emE1ErrNone;
const EmE1LinkErrReason EmE1LinkErrReason_MAX = emE1ParamConflict;
const int EmE1LinkErrReason_ARRAYSIZE = EmE1LinkErrReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmE1LinkErrReason_descriptor();
inline const ::std::string& EmE1LinkErrReason_Name(EmE1LinkErrReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmE1LinkErrReason_descriptor(), value);
}
inline bool EmE1LinkErrReason_Parse(
    const ::std::string& name, EmE1LinkErrReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmE1LinkErrReason>(
    EmE1LinkErrReason_descriptor(), name, value);
}
enum EmPingErrcode {
  emPingReply = 0,
  emPingTimeout = 1,
  emPingError = 2,
  emPingNetUnreach = 3
};
MTMSG_API bool EmPingErrcode_IsValid(int value);
const EmPingErrcode EmPingErrcode_MIN = emPingReply;
const EmPingErrcode EmPingErrcode_MAX = emPingNetUnreach;
const int EmPingErrcode_ARRAYSIZE = EmPingErrcode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPingErrcode_descriptor();
inline const ::std::string& EmPingErrcode_Name(EmPingErrcode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPingErrcode_descriptor(), value);
}
inline bool EmPingErrcode_Parse(
    const ::std::string& name, EmPingErrcode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPingErrcode>(
    EmPingErrcode_descriptor(), name, value);
}
enum EmUpgradeType {
  emSusUpgrade = 1,
  emLocalUpgrade = 2,
  emMtcUpgrade = 3
};
MTMSG_API bool EmUpgradeType_IsValid(int value);
const EmUpgradeType EmUpgradeType_MIN = emSusUpgrade;
const EmUpgradeType EmUpgradeType_MAX = emMtcUpgrade;
const int EmUpgradeType_ARRAYSIZE = EmUpgradeType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmUpgradeType_descriptor();
inline const ::std::string& EmUpgradeType_Name(EmUpgradeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmUpgradeType_descriptor(), value);
}
inline bool EmUpgradeType_Parse(
    const ::std::string& name, EmUpgradeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmUpgradeType>(
    EmUpgradeType_descriptor(), name, value);
}
enum EmUpgradeNotify {
  emFileCheckBgn = 0,
  emWholeUpgradeBgn = 1,
  emFileCheckSuccess = 2,
  emWholeUpgradeSuccess = 3,
  emUnknownErr = 4,
  emInvalidFileErr = 5,
  emLoadXmlFileErr = 6,
  emFileCheckErr = 7,
  emSysMountBakErr = 8,
  emUpgradeDriverModuleErr = 9,
  emUpgradeAppModuleErr = 10,
  emUpgradeExeModuleErr = 11
};
MTMSG_API bool EmUpgradeNotify_IsValid(int value);
const EmUpgradeNotify EmUpgradeNotify_MIN = emFileCheckBgn;
const EmUpgradeNotify EmUpgradeNotify_MAX = emUpgradeExeModuleErr;
const int EmUpgradeNotify_ARRAYSIZE = EmUpgradeNotify_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmUpgradeNotify_descriptor();
inline const ::std::string& EmUpgradeNotify_Name(EmUpgradeNotify value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmUpgradeNotify_descriptor(), value);
}
inline bool EmUpgradeNotify_Parse(
    const ::std::string& name, EmUpgradeNotify* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmUpgradeNotify>(
    EmUpgradeNotify_descriptor(), name, value);
}
enum EmNetConflictType {
  emConflictType_None = 0,
  emConflictType_Ip = 1,
  emConflictType_Mac = 2,
  emConflictType_Both = 3
};
MTMSG_API bool EmNetConflictType_IsValid(int value);
const EmNetConflictType EmNetConflictType_MIN = emConflictType_None;
const EmNetConflictType EmNetConflictType_MAX = emConflictType_Both;
const int EmNetConflictType_ARRAYSIZE = EmNetConflictType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNetConflictType_descriptor();
inline const ::std::string& EmNetConflictType_Name(EmNetConflictType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNetConflictType_descriptor(), value);
}
inline bool EmNetConflictType_Parse(
    const ::std::string& name, EmNetConflictType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNetConflictType>(
    EmNetConflictType_descriptor(), name, value);
}
enum EmHDMicGain {
  emMicGainOff = 0,
  emMicGainLow = 1,
  emMicGainMiddle = 2,
  emMicGainHigh = 3
};
MTMSG_API bool EmHDMicGain_IsValid(int value);
const EmHDMicGain EmHDMicGain_MIN = emMicGainOff;
const EmHDMicGain EmHDMicGain_MAX = emMicGainHigh;
const int EmHDMicGain_ARRAYSIZE = EmHDMicGain_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmHDMicGain_descriptor();
inline const ::std::string& EmHDMicGain_Name(EmHDMicGain value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmHDMicGain_descriptor(), value);
}
inline bool EmHDMicGain_Parse(
    const ::std::string& name, EmHDMicGain* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmHDMicGain>(
    EmHDMicGain_descriptor(), name, value);
}
enum EmPPPoEDialMode {
  emPPPoEDialManual = 0,
  emPPPoEDialAuto = 1
};
MTMSG_API bool EmPPPoEDialMode_IsValid(int value);
const EmPPPoEDialMode EmPPPoEDialMode_MIN = emPPPoEDialManual;
const EmPPPoEDialMode EmPPPoEDialMode_MAX = emPPPoEDialAuto;
const int EmPPPoEDialMode_ARRAYSIZE = EmPPPoEDialMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPPPoEDialMode_descriptor();
inline const ::std::string& EmPPPoEDialMode_Name(EmPPPoEDialMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPPPoEDialMode_descriptor(), value);
}
inline bool EmPPPoEDialMode_Parse(
    const ::std::string& name, EmPPPoEDialMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPPPoEDialMode>(
    EmPPPoEDialMode_descriptor(), name, value);
}
enum EmEquipmentUpgrading {
  emEUbegin = 0,
  emEUHD120 = 1,
  emEUHD200 = 2,
  emEUHD120E = 3,
  emEUHD200E = 4,
  emEUMoon50 = 5,
  emEUMoon50_1080p = 6,
  emEUMoon70_1080p = 7
};
MTMSG_API bool EmEquipmentUpgrading_IsValid(int value);
const EmEquipmentUpgrading EmEquipmentUpgrading_MIN = emEUbegin;
const EmEquipmentUpgrading EmEquipmentUpgrading_MAX = emEUMoon70_1080p;
const int EmEquipmentUpgrading_ARRAYSIZE = EmEquipmentUpgrading_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmEquipmentUpgrading_descriptor();
inline const ::std::string& EmEquipmentUpgrading_Name(EmEquipmentUpgrading value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmEquipmentUpgrading_descriptor(), value);
}
inline bool EmEquipmentUpgrading_Parse(
    const ::std::string& name, EmEquipmentUpgrading* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmEquipmentUpgrading>(
    EmEquipmentUpgrading_descriptor(), name, value);
}
enum EmUartNum {
  emUartDMIC1 = 0,
  emUartDMIC2 = 1
};
MTMSG_API bool EmUartNum_IsValid(int value);
const EmUartNum EmUartNum_MIN = emUartDMIC1;
const EmUartNum EmUartNum_MAX = emUartDMIC2;
const int EmUartNum_ARRAYSIZE = EmUartNum_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmUartNum_descriptor();
inline const ::std::string& EmUartNum_Name(EmUartNum value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmUartNum_descriptor(), value);
}
inline bool EmUartNum_Parse(
    const ::std::string& name, EmUartNum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmUartNum>(
    EmUartNum_descriptor(), name, value);
}
enum EmPicFormat {
  emJPEG = 0,
  emBMP = 1
};
MTMSG_API bool EmPicFormat_IsValid(int value);
const EmPicFormat EmPicFormat_MIN = emJPEG;
const EmPicFormat EmPicFormat_MAX = emBMP;
const int EmPicFormat_ARRAYSIZE = EmPicFormat_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPicFormat_descriptor();
inline const ::std::string& EmPicFormat_Name(EmPicFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPicFormat_descriptor(), value);
}
inline bool EmPicFormat_Parse(
    const ::std::string& name, EmPicFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPicFormat>(
    EmPicFormat_descriptor(), name, value);
}
enum EmImgParam {
  emHue = 0,
  emWhiteBalance = 1,
  emContrast = 2,
  emSaturation = 3,
  emSharpness = 4,
  emBright = 5
};
MTMSG_API bool EmImgParam_IsValid(int value);
const EmImgParam EmImgParam_MIN = emHue;
const EmImgParam EmImgParam_MAX = emBright;
const int EmImgParam_ARRAYSIZE = EmImgParam_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmImgParam_descriptor();
inline const ::std::string& EmImgParam_Name(EmImgParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmImgParam_descriptor(), value);
}
inline bool EmImgParam_Parse(
    const ::std::string& name, EmImgParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmImgParam>(
    EmImgParam_descriptor(), name, value);
}
enum EmFxoState {
  emFxoIdle = 0,
  emFxoCallIn = 1,
  emFxoCalling = 2,
  emFxoConnect = 3
};
MTMSG_API bool EmFxoState_IsValid(int value);
const EmFxoState EmFxoState_MIN = emFxoIdle;
const EmFxoState EmFxoState_MAX = emFxoConnect;
const int EmFxoState_ARRAYSIZE = EmFxoState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmFxoState_descriptor();
inline const ::std::string& EmFxoState_Name(EmFxoState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmFxoState_descriptor(), value);
}
inline bool EmFxoState_Parse(
    const ::std::string& name, EmFxoState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmFxoState>(
    EmFxoState_descriptor(), name, value);
}
enum EmSdiInOut {
  emSdiNone = 0,
  emSdiTwoIn = 1,
  emSdiOneInOneOut = 2
};
MTMSG_API bool EmSdiInOut_IsValid(int value);
const EmSdiInOut EmSdiInOut_MIN = emSdiNone;
const EmSdiInOut EmSdiInOut_MAX = emSdiOneInOneOut;
const int EmSdiInOut_ARRAYSIZE = EmSdiInOut_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSdiInOut_descriptor();
inline const ::std::string& EmSdiInOut_Name(EmSdiInOut value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSdiInOut_descriptor(), value);
}
inline bool EmSdiInOut_Parse(
    const ::std::string& name, EmSdiInOut* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSdiInOut>(
    EmSdiInOut_descriptor(), name, value);
}
enum EmMsgFromSource {
  emMsgFromInvalid = 0,
  emMsgFromWebMtc = 1,
  emMsgFromOsd = 2
};
MTMSG_API bool EmMsgFromSource_IsValid(int value);
const EmMsgFromSource EmMsgFromSource_MIN = emMsgFromInvalid;
const EmMsgFromSource EmMsgFromSource_MAX = emMsgFromOsd;
const int EmMsgFromSource_ARRAYSIZE = EmMsgFromSource_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMsgFromSource_descriptor();
inline const ::std::string& EmMsgFromSource_Name(EmMsgFromSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMsgFromSource_descriptor(), value);
}
inline bool EmMsgFromSource_Parse(
    const ::std::string& name, EmMsgFromSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMsgFromSource>(
    EmMsgFromSource_descriptor(), name, value);
}
enum EmNmsLoginResult {
  emNmsLogin_Success = 0,
  emNmsLogin_ErrorID = 1,
  emNmsLogin_RepeatLogin = 2,
  emNmsLogin_ErrorDevType = 3,
  emNmsLogin_DisConnect = 255
};
MTMSG_API bool EmNmsLoginResult_IsValid(int value);
const EmNmsLoginResult EmNmsLoginResult_MIN = emNmsLogin_Success;
const EmNmsLoginResult EmNmsLoginResult_MAX = emNmsLogin_DisConnect;
const int EmNmsLoginResult_ARRAYSIZE = EmNmsLoginResult_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNmsLoginResult_descriptor();
inline const ::std::string& EmNmsLoginResult_Name(EmNmsLoginResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNmsLoginResult_descriptor(), value);
}
inline bool EmNmsLoginResult_Parse(
    const ::std::string& name, EmNmsLoginResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNmsLoginResult>(
    EmNmsLoginResult_descriptor(), name, value);
}
enum EmTimeZone {
  emTimeZone_GMT = 0,
  emTimeZone_UTC = 1,
  emTimeZone_ECT = 2,
  emTimeZone_EET = 3,
  emTimeZone_ART = 4,
  emTimeZone_EAT = 5,
  emTimeZone_MET = 6,
  emTimeZone_NET = 7,
  emTimeZone_PLT = 8,
  emTimeZone_IST = 9,
  emTimeZone_BST = 10,
  emTimeZone_VST = 11,
  emTimeZone_CTT = 12,
  emTimeZone_JST = 13,
  emTimeZone_ACT = 14,
  emTimeZone_AET = 15,
  emTimeZone_SST = 16,
  emTimeZone_NST = 17,
  emTimeZone_MIT = 18,
  emTimeZone_HST = 19,
  emTimeZone_AST = 20,
  emTimeZone_PST = 21,
  emTimeZone_PNT = 22,
  emTimeZone_MST = 23,
  emTimeZone_CST = 24,
  emTimeZone_EST = 25,
  emTimeZone_IET = 26,
  emTimeZone_PRT = 27,
  emTimeZone_CNT = 28,
  emTimeZone_AGT = 29,
  emTimeZone_BET = 30,
  emTimeZone_CAT = 31
};
MTMSG_API bool EmTimeZone_IsValid(int value);
const EmTimeZone EmTimeZone_MIN = emTimeZone_GMT;
const EmTimeZone EmTimeZone_MAX = emTimeZone_CAT;
const int EmTimeZone_ARRAYSIZE = EmTimeZone_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmTimeZone_descriptor();
inline const ::std::string& EmTimeZone_Name(EmTimeZone value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmTimeZone_descriptor(), value);
}
inline bool EmTimeZone_Parse(
    const ::std::string& name, EmTimeZone* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmTimeZone>(
    EmTimeZone_descriptor(), name, value);
}
enum EmMtSmoothSendLevel {
  emSmoothSendLevel_Off = 0,
  emSmoothSendLevel_High = 1,
  emSmoothSendLevel_Middle = 2,
  emSmoothSendLevel_Low = 3
};
MTMSG_API bool EmMtSmoothSendLevel_IsValid(int value);
const EmMtSmoothSendLevel EmMtSmoothSendLevel_MIN = emSmoothSendLevel_Off;
const EmMtSmoothSendLevel EmMtSmoothSendLevel_MAX = emSmoothSendLevel_Low;
const int EmMtSmoothSendLevel_ARRAYSIZE = EmMtSmoothSendLevel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtSmoothSendLevel_descriptor();
inline const ::std::string& EmMtSmoothSendLevel_Name(EmMtSmoothSendLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtSmoothSendLevel_descriptor(), value);
}
inline bool EmMtSmoothSendLevel_Parse(
    const ::std::string& name, EmMtSmoothSendLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtSmoothSendLevel>(
    EmMtSmoothSendLevel_descriptor(), name, value);
}
enum EmRestDualMode {
  emRestDual_Speaker = 0,
  emRestDual_any = 1,
  emRestDual_assign = 2
};
MTMSG_API bool EmRestDualMode_IsValid(int value);
const EmRestDualMode EmRestDualMode_MIN = emRestDual_Speaker;
const EmRestDualMode EmRestDualMode_MAX = emRestDual_assign;
const int EmRestDualMode_ARRAYSIZE = EmRestDualMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRestDualMode_descriptor();
inline const ::std::string& EmRestDualMode_Name(EmRestDualMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRestDualMode_descriptor(), value);
}
inline bool EmRestDualMode_Parse(
    const ::std::string& name, EmRestDualMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRestDualMode>(
    EmRestDualMode_descriptor(), name, value);
}
enum EmRestMeetingSafeType {
  emRestMeetingType_Public = 0,
  emRestMeetingType_Port = 1
};
MTMSG_API bool EmRestMeetingSafeType_IsValid(int value);
const EmRestMeetingSafeType EmRestMeetingSafeType_MIN = emRestMeetingType_Public;
const EmRestMeetingSafeType EmRestMeetingSafeType_MAX = emRestMeetingType_Port;
const int EmRestMeetingSafeType_ARRAYSIZE = EmRestMeetingSafeType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRestMeetingSafeType_descriptor();
inline const ::std::string& EmRestMeetingSafeType_Name(EmRestMeetingSafeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRestMeetingSafeType_descriptor(), value);
}
inline bool EmRestMeetingSafeType_Parse(
    const ::std::string& name, EmRestMeetingSafeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRestMeetingSafeType>(
    EmRestMeetingSafeType_descriptor(), name, value);
}
enum EmRestVideoQuality {
  emRestQualityPrecedence = 0,
  emRestSpeedPrecedence = 1
};
MTMSG_API bool EmRestVideoQuality_IsValid(int value);
const EmRestVideoQuality EmRestVideoQuality_MIN = emRestQualityPrecedence;
const EmRestVideoQuality EmRestVideoQuality_MAX = emRestSpeedPrecedence;
const int EmRestVideoQuality_ARRAYSIZE = EmRestVideoQuality_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRestVideoQuality_descriptor();
inline const ::std::string& EmRestVideoQuality_Name(EmRestVideoQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRestVideoQuality_descriptor(), value);
}
inline bool EmRestVideoQuality_Parse(
    const ::std::string& name, EmRestVideoQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRestVideoQuality>(
    EmRestVideoQuality_descriptor(), name, value);
}
enum EmRestCascadeMode {
  emRestCascade_Simple = 0,
  emRestCascade_Merge = 1
};
MTMSG_API bool EmRestCascadeMode_IsValid(int value);
const EmRestCascadeMode EmRestCascadeMode_MIN = emRestCascade_Simple;
const EmRestCascadeMode EmRestCascadeMode_MAX = emRestCascade_Merge;
const int EmRestCascadeMode_ARRAYSIZE = EmRestCascadeMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRestCascadeMode_descriptor();
inline const ::std::string& EmRestCascadeMode_Name(EmRestCascadeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRestCascadeMode_descriptor(), value);
}
inline bool EmRestCascadeMode_Parse(
    const ::std::string& name, EmRestCascadeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRestCascadeMode>(
    EmRestCascadeMode_descriptor(), name, value);
}
enum EmRemoteType {
  emRemoteTypeUnknown = 0,
  emRemoteTypeShortBlack = 1,
  emRemoteTypeLongBlack = 2,
  emRemoteTypeSilver = 3,
  emRemoteTypeV3CamCtrl = 4,
  emRemoteTypeSkyWalker = 5,
  emRemoteTypeIRLongBlack = 6
};
MTMSG_API bool EmRemoteType_IsValid(int value);
const EmRemoteType EmRemoteType_MIN = emRemoteTypeUnknown;
const EmRemoteType EmRemoteType_MAX = emRemoteTypeIRLongBlack;
const int EmRemoteType_ARRAYSIZE = EmRemoteType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRemoteType_descriptor();
inline const ::std::string& EmRemoteType_Name(EmRemoteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRemoteType_descriptor(), value);
}
inline bool EmRemoteType_Parse(
    const ::std::string& name, EmRemoteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRemoteType>(
    EmRemoteType_descriptor(), name, value);
}
enum EmRemoteScanCode {
  emScanCode0 = 0,
  emScanCode1 = 1,
  emScanCode2 = 2,
  emScanCode3 = 3,
  emScanCode4 = 4,
  emScanCode5 = 5,
  emScanCode6 = 6,
  emScanCode7 = 7,
  emScanCode8 = 8,
  emScanCode9 = 9,
  emScanCodePoint = 10,
  emScanCodeSharp = 11,
  emScanCodeMenu = 12,
  emScanCodeBackspace = 13,
  emScanCodeEnter = 14,
  emScanCodeUp = 15,
  emScanCodeDown = 16,
  emScanCodeLeft = 17,
  emScanCodeRight = 18,
  emScanCodePower = 19,
  emScanCodeMainVSrc = 20,
  emScanCodeAV = 21,
  emScanCodeFarCtrl = 22,
  emScanCodeMute = 23,
  emScanCodeQuiet = 24,
  emScanCodeVGA = 25,
  emScanCodeS = 26,
  emScanCodeShotSnap = 27,
  emScanCodeVolumeUp = 28,
  emScanCodeVolumeDown = 29,
  emScanCodeConnect = 30,
  emScanCodeDisconnect = 31,
  emScanCodeDirectory = 32,
  emScanCodePipEnable = 33,
  emScanCodePipAdjust = 34,
  emScanCodeSelfTest = 35,
  emScanCodeAutoFocus = 36,
  emScanCodeNearZoom = 37,
  emScanCodeFarZoom = 38,
  emScanCodePreSave = 39,
  emScanCodePreMove = 40,
  emScanCodeChairReq = 41,
  emScanCodeSpeakReq = 42,
  emScanCodeQuitReq = 43,
  emScanCodeState = 44,
  emScanCodeHotLeft = 45,
  emScanCodeHotCenter = 46,
  emScanCodeHotRight = 47,
  emScanCodeHelp = 48,
  emScanCodeBrightUp = 49,
  emScanCodeBrightDown = 50,
  emScanCodeDual = 51,
  emScanCodeReturn = 52,
  emScanCodeFunc = 53,
  emScanCodeSearch = 54,
  emScanCodeImixMenu = 55,
  emScanCodeNull = 98,
  emScanCodeInvalid = 99
};
MTMSG_API bool EmRemoteScanCode_IsValid(int value);
const EmRemoteScanCode EmRemoteScanCode_MIN = emScanCode0;
const EmRemoteScanCode EmRemoteScanCode_MAX = emScanCodeInvalid;
const int EmRemoteScanCode_ARRAYSIZE = EmRemoteScanCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRemoteScanCode_descriptor();
inline const ::std::string& EmRemoteScanCode_Name(EmRemoteScanCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRemoteScanCode_descriptor(), value);
}
inline bool EmRemoteScanCode_Parse(
    const ::std::string& name, EmRemoteScanCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRemoteScanCode>(
    EmRemoteScanCode_descriptor(), name, value);
}
enum EmParticipantResponse {
  emResponseNoFeedback = 0,
  emResponseReject = 1,
  emResponseParticipant = 2,
  emResponseCustom = 3
};
MTMSG_API bool EmParticipantResponse_IsValid(int value);
const EmParticipantResponse EmParticipantResponse_MIN = emResponseNoFeedback;
const EmParticipantResponse EmParticipantResponse_MAX = emResponseCustom;
const int EmParticipantResponse_ARRAYSIZE = EmParticipantResponse_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmParticipantResponse_descriptor();
inline const ::std::string& EmParticipantResponse_Name(EmParticipantResponse value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmParticipantResponse_descriptor(), value);
}
inline bool EmParticipantResponse_Parse(
    const ::std::string& name, EmParticipantResponse* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmParticipantResponse>(
    EmParticipantResponse_descriptor(), name, value);
}
enum EmClosedMeeting {
  emClosedMeeting_Close = 0,
  emClosedMeeting_Open = 1
};
MTMSG_API bool EmClosedMeeting_IsValid(int value);
const EmClosedMeeting EmClosedMeeting_MIN = emClosedMeeting_Close;
const EmClosedMeeting EmClosedMeeting_MAX = emClosedMeeting_Open;
const int EmClosedMeeting_ARRAYSIZE = EmClosedMeeting_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmClosedMeeting_descriptor();
inline const ::std::string& EmClosedMeeting_Name(EmClosedMeeting value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmClosedMeeting_descriptor(), value);
}
inline bool EmClosedMeeting_Parse(
    const ::std::string& name, EmClosedMeeting* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmClosedMeeting>(
    EmClosedMeeting_descriptor(), name, value);
}
enum EmCameraSpeed {
  emCameraSlow = 0,
  emCameraNormal = 1,
  emCameraFast = 2
};
MTMSG_API bool EmCameraSpeed_IsValid(int value);
const EmCameraSpeed EmCameraSpeed_MIN = emCameraSlow;
const EmCameraSpeed EmCameraSpeed_MAX = emCameraFast;
const int EmCameraSpeed_ARRAYSIZE = EmCameraSpeed_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCameraSpeed_descriptor();
inline const ::std::string& EmCameraSpeed_Name(EmCameraSpeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCameraSpeed_descriptor(), value);
}
inline bool EmCameraSpeed_Parse(
    const ::std::string& name, EmCameraSpeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCameraSpeed>(
    EmCameraSpeed_descriptor(), name, value);
}
enum EmCameraView {
  emRestoreCameraView = 0,
  em1stCameraView = 1,
  em2ndCameraView = 2,
  emCameraMultiView = 3,
  em3rdCameraView = 4
};
MTMSG_API bool EmCameraView_IsValid(int value);
const EmCameraView EmCameraView_MIN = emRestoreCameraView;
const EmCameraView EmCameraView_MAX = em3rdCameraView;
const int EmCameraView_ARRAYSIZE = EmCameraView_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCameraView_descriptor();
inline const ::std::string& EmCameraView_Name(EmCameraView value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCameraView_descriptor(), value);
}
inline bool EmCameraView_Parse(
    const ::std::string& name, EmCameraView* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCameraView>(
    EmCameraView_descriptor(), name, value);
}
enum EmRestNotifyType {
  emUnknownType = 0,
  emNewFan = 1,
  emNewFeed = 2,
  emNewRemindMe = 3,
  emNewReply = 4,
  emGroupInvite = 5,
  emNewLike = 6,
  emNewPrivateMsg = 7
};
MTMSG_API bool EmRestNotifyType_IsValid(int value);
const EmRestNotifyType EmRestNotifyType_MIN = emUnknownType;
const EmRestNotifyType EmRestNotifyType_MAX = emNewPrivateMsg;
const int EmRestNotifyType_ARRAYSIZE = EmRestNotifyType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRestNotifyType_descriptor();
inline const ::std::string& EmRestNotifyType_Name(EmRestNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRestNotifyType_descriptor(), value);
}
inline bool EmRestNotifyType_Parse(
    const ::std::string& name, EmRestNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRestNotifyType>(
    EmRestNotifyType_descriptor(), name, value);
}
enum EmVidRationStrategy {
  EmAssVidPri = 0,
  EmMainVidPri = 1,
  EmUserDefined = 2
};
MTMSG_API bool EmVidRationStrategy_IsValid(int value);
const EmVidRationStrategy EmVidRationStrategy_MIN = EmAssVidPri;
const EmVidRationStrategy EmVidRationStrategy_MAX = EmUserDefined;
const int EmVidRationStrategy_ARRAYSIZE = EmVidRationStrategy_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVidRationStrategy_descriptor();
inline const ::std::string& EmVidRationStrategy_Name(EmVidRationStrategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVidRationStrategy_descriptor(), value);
}
inline bool EmVidRationStrategy_Parse(
    const ::std::string& name, EmVidRationStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVidRationStrategy>(
    EmVidRationStrategy_descriptor(), name, value);
}
enum EmSystemFileType {
  emFileNormal = 0,
  emFileDirectory = 1,
  emFileLink = 2,
  emFilePipe = 3
};
MTMSG_API bool EmSystemFileType_IsValid(int value);
const EmSystemFileType EmSystemFileType_MIN = emFileNormal;
const EmSystemFileType EmSystemFileType_MAX = emFilePipe;
const int EmSystemFileType_ARRAYSIZE = EmSystemFileType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSystemFileType_descriptor();
inline const ::std::string& EmSystemFileType_Name(EmSystemFileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSystemFileType_descriptor(), value);
}
inline bool EmSystemFileType_Parse(
    const ::std::string& name, EmSystemFileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSystemFileType>(
    EmSystemFileType_descriptor(), name, value);
}
enum EmSaveJpegType {
  emSJMonitor = 0,
  emSJPresetPos = 1,
  emSJFtpSnapshot = 2
};
MTMSG_API bool EmSaveJpegType_IsValid(int value);
const EmSaveJpegType EmSaveJpegType_MIN = emSJMonitor;
const EmSaveJpegType EmSaveJpegType_MAX = emSJFtpSnapshot;
const int EmSaveJpegType_ARRAYSIZE = EmSaveJpegType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSaveJpegType_descriptor();
inline const ::std::string& EmSaveJpegType_Name(EmSaveJpegType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSaveJpegType_descriptor(), value);
}
inline bool EmSaveJpegType_Parse(
    const ::std::string& name, EmSaveJpegType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSaveJpegType>(
    EmSaveJpegType_descriptor(), name, value);
}
enum EmSleepFailReason {
  emSFRNoError = 0,
  emSFRProtectionTime = 1,
  emSFRMonitor = 2,
  emSFRInConf = 3,
  emSFRLoop = 4,
  emSFRRibbonTest = 5,
  emSFRSnapView = 6,
  emSFRVrs = 7,
  emSFRUpgrade = 8,
  emSFRSusUpgrade = 9,
  emSFRNetCap = 10,
  emSFRAddrbook = 11,
  emSFRSnapExport = 12,
  emSFRCameraUpgrade = 13,
  emSFRMicPhoneUpgrade = 14,
  emSFRMtRecorde = 15,
  emSFRMtAssStream = 16
};
MTMSG_API bool EmSleepFailReason_IsValid(int value);
const EmSleepFailReason EmSleepFailReason_MIN = emSFRNoError;
const EmSleepFailReason EmSleepFailReason_MAX = emSFRMtAssStream;
const int EmSleepFailReason_ARRAYSIZE = EmSleepFailReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSleepFailReason_descriptor();
inline const ::std::string& EmSleepFailReason_Name(EmSleepFailReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSleepFailReason_descriptor(), value);
}
inline bool EmSleepFailReason_Parse(
    const ::std::string& name, EmSleepFailReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSleepFailReason>(
    EmSleepFailReason_descriptor(), name, value);
}
enum EmResizeMode {
  emBlackEdge = 0,
  emCutEdge = 1,
  emNoProportionally = 2
};
MTMSG_API bool EmResizeMode_IsValid(int value);
const EmResizeMode EmResizeMode_MIN = emBlackEdge;
const EmResizeMode EmResizeMode_MAX = emNoProportionally;
const int EmResizeMode_ARRAYSIZE = EmResizeMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmResizeMode_descriptor();
inline const ::std::string& EmResizeMode_Name(EmResizeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmResizeMode_descriptor(), value);
}
inline bool EmResizeMode_Parse(
    const ::std::string& name, EmResizeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmResizeMode>(
    EmResizeMode_descriptor(), name, value);
}
enum EmLocalSoundType {
  emLSRing = 0,
  emLSKeyTone = 1,
  emLSSpecialEffects = 2
};
MTMSG_API bool EmLocalSoundType_IsValid(int value);
const EmLocalSoundType EmLocalSoundType_MIN = emLSRing;
const EmLocalSoundType EmLocalSoundType_MAX = emLSSpecialEffects;
const int EmLocalSoundType_ARRAYSIZE = EmLocalSoundType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmLocalSoundType_descriptor();
inline const ::std::string& EmLocalSoundType_Name(EmLocalSoundType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmLocalSoundType_descriptor(), value);
}
inline bool EmLocalSoundType_Parse(
    const ::std::string& name, EmLocalSoundType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmLocalSoundType>(
    EmLocalSoundType_descriptor(), name, value);
}
enum EmLocalSoundIndex {
  emSound1st = 0,
  emSound2nd = 1,
  emSound3rd = 2,
  emSound4th = 3,
  emSound5th = 4,
  emSound6th = 5,
  emSound7th = 6,
  emSound8th = 7,
  emSound9th = 8
};
MTMSG_API bool EmLocalSoundIndex_IsValid(int value);
const EmLocalSoundIndex EmLocalSoundIndex_MIN = emSound1st;
const EmLocalSoundIndex EmLocalSoundIndex_MAX = emSound9th;
const int EmLocalSoundIndex_ARRAYSIZE = EmLocalSoundIndex_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmLocalSoundIndex_descriptor();
inline const ::std::string& EmLocalSoundIndex_Name(EmLocalSoundIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmLocalSoundIndex_descriptor(), value);
}
inline bool EmLocalSoundIndex_Parse(
    const ::std::string& name, EmLocalSoundIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmLocalSoundIndex>(
    EmLocalSoundIndex_descriptor(), name, value);
}
enum EmFileCopyErr {
  emCopySuccess = 0,
  emCopyUnknownErr = 1,
  emCopyNoSpace = 2,
  emCopySrcFileNotFound = 3,
  emCopyDstPathNotFound = 4,
  emCopyStop = 5
};
MTMSG_API bool EmFileCopyErr_IsValid(int value);
const EmFileCopyErr EmFileCopyErr_MIN = emCopySuccess;
const EmFileCopyErr EmFileCopyErr_MAX = emCopyStop;
const int EmFileCopyErr_ARRAYSIZE = EmFileCopyErr_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmFileCopyErr_descriptor();
inline const ::std::string& EmFileCopyErr_Name(EmFileCopyErr value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmFileCopyErr_descriptor(), value);
}
inline bool EmFileCopyErr_Parse(
    const ::std::string& name, EmFileCopyErr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmFileCopyErr>(
    EmFileCopyErr_descriptor(), name, value);
}
enum EmMicDevId {
  emWiredMic0 = 0,
  emWiredMic1 = 1,
  emWirelessMic0 = 2,
  emWirelessMic1 = 3,
  emWirelessMic2 = 4,
  emWiredMic0Cascade1 = 5,
  emWiredMic0Cascade2 = 6,
  emWiredMic1Cascade1 = 7,
  emWiredMic1Cascade2 = 8,
  emBuiltinMic0 = 9,
  emBuiltinMic1 = 10,
  emMicDevEnd = 11
};
MTMSG_API bool EmMicDevId_IsValid(int value);
const EmMicDevId EmMicDevId_MIN = emWiredMic0;
const EmMicDevId EmMicDevId_MAX = emMicDevEnd;
const int EmMicDevId_ARRAYSIZE = EmMicDevId_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMicDevId_descriptor();
inline const ::std::string& EmMicDevId_Name(EmMicDevId value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMicDevId_descriptor(), value);
}
inline bool EmMicDevId_Parse(
    const ::std::string& name, EmMicDevId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMicDevId>(
    EmMicDevId_descriptor(), name, value);
}
enum EmTemplateAccoutType {
  emAccountNone = 0,
  emAccountMoid = 1,
  emAccountAny = 3,
  emAccountNonSysMail = 4,
  emAccountE164 = 5,
  emAccountTelPhone = 6,
  emAccountIP = 7,
  emAccountAlias = 8
};
MTMSG_API bool EmTemplateAccoutType_IsValid(int value);
const EmTemplateAccoutType EmTemplateAccoutType_MIN = emAccountNone;
const EmTemplateAccoutType EmTemplateAccoutType_MAX = emAccountAlias;
const int EmTemplateAccoutType_ARRAYSIZE = EmTemplateAccoutType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmTemplateAccoutType_descriptor();
inline const ::std::string& EmTemplateAccoutType_Name(EmTemplateAccoutType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmTemplateAccoutType_descriptor(), value);
}
inline bool EmTemplateAccoutType_Parse(
    const ::std::string& name, EmTemplateAccoutType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmTemplateAccoutType>(
    EmTemplateAccoutType_descriptor(), name, value);
}
enum EmPingUserId {
  emPingUidLan = 0,
  emPingUidInternet = 1,
  emPingUidDns = 2,
  emPingUidServer = 3,
  emPingUid4 = 4,
  emPingUid5 = 5,
  emPingUid6 = 6,
  emPingUid7 = 7,
  emPingUid8 = 8
};
MTMSG_API bool EmPingUserId_IsValid(int value);
const EmPingUserId EmPingUserId_MIN = emPingUidLan;
const EmPingUserId EmPingUserId_MAX = emPingUid8;
const int EmPingUserId_ARRAYSIZE = EmPingUserId_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPingUserId_descriptor();
inline const ::std::string& EmPingUserId_Name(EmPingUserId value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPingUserId_descriptor(), value);
}
inline bool EmPingUserId_Parse(
    const ::std::string& name, EmPingUserId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPingUserId>(
    EmPingUserId_descriptor(), name, value);
}
enum EmMicUpgradeState {
  emUploadEnable = 0,
  emUploading = 1,
  emInstallable = 2,
  emInstalling = 3,
  emUpgradeSuccess = 4,
  emLatestVersion = 5,
  emReserve1 = 6,
  emReserve2 = 7
};
MTMSG_API bool EmMicUpgradeState_IsValid(int value);
const EmMicUpgradeState EmMicUpgradeState_MIN = emUploadEnable;
const EmMicUpgradeState EmMicUpgradeState_MAX = emReserve2;
const int EmMicUpgradeState_ARRAYSIZE = EmMicUpgradeState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMicUpgradeState_descriptor();
inline const ::std::string& EmMicUpgradeState_Name(EmMicUpgradeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMicUpgradeState_descriptor(), value);
}
inline bool EmMicUpgradeState_Parse(
    const ::std::string& name, EmMicUpgradeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMicUpgradeState>(
    EmMicUpgradeState_descriptor(), name, value);
}
enum EmAudioDelayCheckState {
  emAudioDelayBegin = 0,
  emAudioDelayChecking = 1,
  emAudioDelayChecked = 2,
  emAudioDelayTimeout = 3,
  emAudioDelayFailed = 4,
  emAudioDelayReserve1 = 5,
  emAudioDelayReserve2 = 6
};
MTMSG_API bool EmAudioDelayCheckState_IsValid(int value);
const EmAudioDelayCheckState EmAudioDelayCheckState_MIN = emAudioDelayBegin;
const EmAudioDelayCheckState EmAudioDelayCheckState_MAX = emAudioDelayReserve2;
const int EmAudioDelayCheckState_ARRAYSIZE = EmAudioDelayCheckState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAudioDelayCheckState_descriptor();
inline const ::std::string& EmAudioDelayCheckState_Name(EmAudioDelayCheckState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAudioDelayCheckState_descriptor(), value);
}
inline bool EmAudioDelayCheckState_Parse(
    const ::std::string& name, EmAudioDelayCheckState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAudioDelayCheckState>(
    EmAudioDelayCheckState_descriptor(), name, value);
}
enum EmCameraUpgradeErrCode {
  emCUSuccess = 0,
  emCUUpgrading = 1,
  emCUErrType = 2,
  emCUNoDevice = 3,
  emCUNoUpgradeFile = 4,
  emCUFailure = 5
};
MTMSG_API bool EmCameraUpgradeErrCode_IsValid(int value);
const EmCameraUpgradeErrCode EmCameraUpgradeErrCode_MIN = emCUSuccess;
const EmCameraUpgradeErrCode EmCameraUpgradeErrCode_MAX = emCUFailure;
const int EmCameraUpgradeErrCode_ARRAYSIZE = EmCameraUpgradeErrCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCameraUpgradeErrCode_descriptor();
inline const ::std::string& EmCameraUpgradeErrCode_Name(EmCameraUpgradeErrCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCameraUpgradeErrCode_descriptor(), value);
}
inline bool EmCameraUpgradeErrCode_Parse(
    const ::std::string& name, EmCameraUpgradeErrCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCameraUpgradeErrCode>(
    EmCameraUpgradeErrCode_descriptor(), name, value);
}
enum EmUpgradeExitErrCode {
  emUpgradeForceExit = 0,
  emUpgradeNetWorkDisconnect = 1
};
MTMSG_API bool EmUpgradeExitErrCode_IsValid(int value);
const EmUpgradeExitErrCode EmUpgradeExitErrCode_MIN = emUpgradeForceExit;
const EmUpgradeExitErrCode EmUpgradeExitErrCode_MAX = emUpgradeNetWorkDisconnect;
const int EmUpgradeExitErrCode_ARRAYSIZE = EmUpgradeExitErrCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmUpgradeExitErrCode_descriptor();
inline const ::std::string& EmUpgradeExitErrCode_Name(EmUpgradeExitErrCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmUpgradeExitErrCode_descriptor(), value);
}
inline bool EmUpgradeExitErrCode_Parse(
    const ::std::string& name, EmUpgradeExitErrCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmUpgradeExitErrCode>(
    EmUpgradeExitErrCode_descriptor(), name, value);
}
enum EmGeneralLevel {
  emGeneralLevel0 = 0,
  emGeneralLevel1 = 1,
  emGeneralLevel2 = 2
};
MTMSG_API bool EmGeneralLevel_IsValid(int value);
const EmGeneralLevel EmGeneralLevel_MIN = emGeneralLevel0;
const EmGeneralLevel EmGeneralLevel_MAX = emGeneralLevel2;
const int EmGeneralLevel_ARRAYSIZE = EmGeneralLevel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmGeneralLevel_descriptor();
inline const ::std::string& EmGeneralLevel_Name(EmGeneralLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmGeneralLevel_descriptor(), value);
}
inline bool EmGeneralLevel_Parse(
    const ::std::string& name, EmGeneralLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmGeneralLevel>(
    EmGeneralLevel_descriptor(), name, value);
}
enum EmISO {
  emISOAuto = 0,
  emISO80 = 1,
  emISO100 = 2,
  emISO200 = 3,
  emISO400 = 4,
  emISO800 = 5,
  emISO1250 = 6
};
MTMSG_API bool EmISO_IsValid(int value);
const EmISO EmISO_MIN = emISOAuto;
const EmISO EmISO_MAX = emISO1250;
const int EmISO_ARRAYSIZE = EmISO_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmISO_descriptor();
inline const ::std::string& EmISO_Name(EmISO value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmISO_descriptor(), value);
}
inline bool EmISO_Parse(
    const ::std::string& name, EmISO* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmISO>(
    EmISO_descriptor(), name, value);
}
enum EmExposureMode {
  emExMManual = 0,
  emExMAuto = 1,
  emExMAperturePri = 2,
  emExMShutterPri = 3,
  emExLowLight = 4,
  emExHDR = 5
};
MTMSG_API bool EmExposureMode_IsValid(int value);
const EmExposureMode EmExposureMode_MIN = emExMManual;
const EmExposureMode EmExposureMode_MAX = emExHDR;
const int EmExposureMode_ARRAYSIZE = EmExposureMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmExposureMode_descriptor();
inline const ::std::string& EmExposureMode_Name(EmExposureMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmExposureMode_descriptor(), value);
}
inline bool EmExposureMode_Parse(
    const ::std::string& name, EmExposureMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmExposureMode>(
    EmExposureMode_descriptor(), name, value);
}
enum EmAperture {
  emF1p2 = 0,
  emF1p6 = 1,
  emF1p8 = 2,
  emF2p0 = 3,
  emF2p8 = 4,
  emF4p0 = 5,
  emF5p6 = 6,
  emF8p0 = 7,
  emF11 = 8
};
MTMSG_API bool EmAperture_IsValid(int value);
const EmAperture EmAperture_MIN = emF1p2;
const EmAperture EmAperture_MAX = emF11;
const int EmAperture_ARRAYSIZE = EmAperture_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAperture_descriptor();
inline const ::std::string& EmAperture_Name(EmAperture value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAperture_descriptor(), value);
}
inline bool EmAperture_Parse(
    const ::std::string& name, EmAperture* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAperture>(
    EmAperture_descriptor(), name, value);
}
enum EmShutterType {
  emShutterTypeManual = 0,
  emShutterTypeAuto = 1
};
MTMSG_API bool EmShutterType_IsValid(int value);
const EmShutterType EmShutterType_MIN = emShutterTypeManual;
const EmShutterType EmShutterType_MAX = emShutterTypeAuto;
const int EmShutterType_ARRAYSIZE = EmShutterType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmShutterType_descriptor();
inline const ::std::string& EmShutterType_Name(EmShutterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmShutterType_descriptor(), value);
}
inline bool EmShutterType_Parse(
    const ::std::string& name, EmShutterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmShutterType>(
    EmShutterType_descriptor(), name, value);
}
enum EmShutterLevel {
  emShutter8 = 0,
  emShutter15 = 1,
  emShutter30 = 2,
  emShutter60 = 3,
  emShutter100 = 4,
  emShutter125 = 5,
  emShutter250 = 6,
  emShutter500 = 7,
  emShutter1000 = 8,
  emShutter2000 = 9,
  emShutter4000 = 10
};
MTMSG_API bool EmShutterLevel_IsValid(int value);
const EmShutterLevel EmShutterLevel_MIN = emShutter8;
const EmShutterLevel EmShutterLevel_MAX = emShutter4000;
const int EmShutterLevel_ARRAYSIZE = EmShutterLevel_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmShutterLevel_descriptor();
inline const ::std::string& EmShutterLevel_Name(EmShutterLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmShutterLevel_descriptor(), value);
}
inline bool EmShutterLevel_Parse(
    const ::std::string& name, EmShutterLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmShutterLevel>(
    EmShutterLevel_descriptor(), name, value);
}
enum EmWBAMode {
  emWBAAuto = 0,
  emWBADay = 1,
  emWBACloudy = 2,
  emWBAShade = 3,
  emWBAFluorescent = 4,
  emWBATUngsten = 5,
  emWBAWarm = 6,
  emWBAStandard = 7,
  emWBANatural = 8,
  emWBASunlight = 9,
  emWBAManual = 10
};
MTMSG_API bool EmWBAMode_IsValid(int value);
const EmWBAMode EmWBAMode_MIN = emWBAAuto;
const EmWBAMode EmWBAMode_MAX = emWBAManual;
const int EmWBAMode_ARRAYSIZE = EmWBAMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWBAMode_descriptor();
inline const ::std::string& EmWBAMode_Name(EmWBAMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWBAMode_descriptor(), value);
}
inline bool EmWBAMode_Parse(
    const ::std::string& name, EmWBAMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWBAMode>(
    EmWBAMode_descriptor(), name, value);
}
enum EMWBAModeGainType {
  emWBAModeGainRed = 0,
  emWBAModeGainBlue = 1
};
MTMSG_API bool EMWBAModeGainType_IsValid(int value);
const EMWBAModeGainType EMWBAModeGainType_MIN = emWBAModeGainRed;
const EMWBAModeGainType EMWBAModeGainType_MAX = emWBAModeGainBlue;
const int EMWBAModeGainType_ARRAYSIZE = EMWBAModeGainType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EMWBAModeGainType_descriptor();
inline const ::std::string& EMWBAModeGainType_Name(EMWBAModeGainType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMWBAModeGainType_descriptor(), value);
}
inline bool EMWBAModeGainType_Parse(
    const ::std::string& name, EMWBAModeGainType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMWBAModeGainType>(
    EMWBAModeGainType_descriptor(), name, value);
}
enum EmSceneMode {
  emSceneOff = 0,
  emSceneNight = 1,
  emSceneAuto = 2,
  emSceneWDR = 3,
  emSceneHCT = 4
};
MTMSG_API bool EmSceneMode_IsValid(int value);
const EmSceneMode EmSceneMode_MIN = emSceneOff;
const EmSceneMode EmSceneMode_MAX = emSceneHCT;
const int EmSceneMode_ARRAYSIZE = EmSceneMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSceneMode_descriptor();
inline const ::std::string& EmSceneMode_Name(EmSceneMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSceneMode_descriptor(), value);
}
inline bool EmSceneMode_Parse(
    const ::std::string& name, EmSceneMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSceneMode>(
    EmSceneMode_descriptor(), name, value);
}
enum EmNFType {
  emNFType_2D = 0,
  emNFType_3D = 1
};
MTMSG_API bool EmNFType_IsValid(int value);
const EmNFType EmNFType_MIN = emNFType_2D;
const EmNFType EmNFType_MAX = emNFType_3D;
const int EmNFType_ARRAYSIZE = EmNFType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNFType_descriptor();
inline const ::std::string& EmNFType_Name(EmNFType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNFType_descriptor(), value);
}
inline bool EmNFType_Parse(
    const ::std::string& name, EmNFType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNFType>(
    EmNFType_descriptor(), name, value);
}
enum EmNFMode {
  emNF_Off = 0,
  emNF_Low = 1,
  emNF_Mid = 2,
  emNF_High = 3
};
MTMSG_API bool EmNFMode_IsValid(int value);
const EmNFMode EmNFMode_MIN = emNF_Off;
const EmNFMode EmNFMode_MAX = emNF_High;
const int EmNFMode_ARRAYSIZE = EmNFMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmNFMode_descriptor();
inline const ::std::string& EmNFMode_Name(EmNFMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmNFMode_descriptor(), value);
}
inline bool EmNFMode_Parse(
    const ::std::string& name, EmNFMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmNFMode>(
    EmNFMode_descriptor(), name, value);
}
enum EmBrightnessDirection {
  emBrightnessUp = 0,
  emBrightnessDown = 1
};
MTMSG_API bool EmBrightnessDirection_IsValid(int value);
const EmBrightnessDirection EmBrightnessDirection_MIN = emBrightnessUp;
const EmBrightnessDirection EmBrightnessDirection_MAX = emBrightnessDown;
const int EmBrightnessDirection_ARRAYSIZE = EmBrightnessDirection_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmBrightnessDirection_descriptor();
inline const ::std::string& EmBrightnessDirection_Name(EmBrightnessDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmBrightnessDirection_descriptor(), value);
}
inline bool EmBrightnessDirection_Parse(
    const ::std::string& name, EmBrightnessDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmBrightnessDirection>(
    EmBrightnessDirection_descriptor(), name, value);
}
enum EmIspImgInf {
  IspImgInf_Noise = 0,
  IspImgInf_Sharpness = 1,
  IspImgInf_ISO = 2,
  IspImgInf_ExposureMode = 3,
  IspImgInf_Aperture = 4,
  IspImgInf_Shutter = 5,
  IspImgInf_Brightnesss = 6,
  IspImgInf_WhiteBalance = 7,
  IspImgInf_Noise_2D = 8,
  IspImgInf_Noise_3D = 9,
  IspImgInf_BrightnesssValue = 10,
  IspImgInf_Contrast = 11,
  IspImgInf_Saturation = 12,
  IspImgInf_Sharpness_Value = 13,
  IspImgInf_Hue = 14,
  IspImgInf_BackLight_Type = 15,
  IspImgInf_BackLight_Value = 16,
  IspImgInf_RedGain = 17,
  IspImgInf_BlueGain = 18,
  IspImgInf_AotoExposureGain = 19,
  IspImgInf_ManualExposureGain = 20,
  IspImgInf_ImgGamma = 21,
  IspImgInf_ImgDefog = 22,
  IspImgInf_DigDynSwitch = 23,
  IspImgInf_DigDynLevel = 24
};
MTMSG_API bool EmIspImgInf_IsValid(int value);
const EmIspImgInf EmIspImgInf_MIN = IspImgInf_Noise;
const EmIspImgInf EmIspImgInf_MAX = IspImgInf_DigDynLevel;
const int EmIspImgInf_ARRAYSIZE = EmIspImgInf_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmIspImgInf_descriptor();
inline const ::std::string& EmIspImgInf_Name(EmIspImgInf value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmIspImgInf_descriptor(), value);
}
inline bool EmIspImgInf_Parse(
    const ::std::string& name, EmIspImgInf* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmIspImgInf>(
    EmIspImgInf_descriptor(), name, value);
}
enum EmExposureModeGainType {
  emExposureModeGainAuto = 0,
  emExposureModeGainManual = 1
};
MTMSG_API bool EmExposureModeGainType_IsValid(int value);
const EmExposureModeGainType EmExposureModeGainType_MIN = emExposureModeGainAuto;
const EmExposureModeGainType EmExposureModeGainType_MAX = emExposureModeGainManual;
const int EmExposureModeGainType_ARRAYSIZE = EmExposureModeGainType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmExposureModeGainType_descriptor();
inline const ::std::string& EmExposureModeGainType_Name(EmExposureModeGainType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmExposureModeGainType_descriptor(), value);
}
inline bool EmExposureModeGainType_Parse(
    const ::std::string& name, EmExposureModeGainType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmExposureModeGainType>(
    EmExposureModeGainType_descriptor(), name, value);
}
enum EmExposureModeGainRestrict {
  emGainRestrict15 = 0,
  emGainRestrict18 = 1,
  emGainRestrict21 = 2,
  emGainRestrict24 = 3,
  emGainRestrict27 = 4,
  emGainRestrict30 = 5,
  emGainRestrict33 = 6,
  emGainRestrict36 = 7,
  emGainRestrict39 = 8,
  emGainRestrict42 = 9,
  emGainRestrict45 = 10
};
MTMSG_API bool EmExposureModeGainRestrict_IsValid(int value);
const EmExposureModeGainRestrict EmExposureModeGainRestrict_MIN = emGainRestrict15;
const EmExposureModeGainRestrict EmExposureModeGainRestrict_MAX = emGainRestrict45;
const int EmExposureModeGainRestrict_ARRAYSIZE = EmExposureModeGainRestrict_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmExposureModeGainRestrict_descriptor();
inline const ::std::string& EmExposureModeGainRestrict_Name(EmExposureModeGainRestrict value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmExposureModeGainRestrict_descriptor(), value);
}
inline bool EmExposureModeGainRestrict_Parse(
    const ::std::string& name, EmExposureModeGainRestrict* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmExposureModeGainRestrict>(
    EmExposureModeGainRestrict_descriptor(), name, value);
}
enum EmFocusMode {
  emFocusModeManual = 0,
  emFocusModeAuto = 1
};
MTMSG_API bool EmFocusMode_IsValid(int value);
const EmFocusMode EmFocusMode_MIN = emFocusModeManual;
const EmFocusMode EmFocusMode_MAX = emFocusModeAuto;
const int EmFocusMode_ARRAYSIZE = EmFocusMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmFocusMode_descriptor();
inline const ::std::string& EmFocusMode_Name(EmFocusMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmFocusMode_descriptor(), value);
}
inline bool EmFocusMode_Parse(
    const ::std::string& name, EmFocusMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmFocusMode>(
    EmFocusMode_descriptor(), name, value);
}
enum EmImgMode {
  emImgStandard = 0,
  emImgSoft = 1,
  emImgBright = 2
};
MTMSG_API bool EmImgMode_IsValid(int value);
const EmImgMode EmImgMode_MIN = emImgStandard;
const EmImgMode EmImgMode_MAX = emImgBright;
const int EmImgMode_ARRAYSIZE = EmImgMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmImgMode_descriptor();
inline const ::std::string& EmImgMode_Name(EmImgMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmImgMode_descriptor(), value);
}
inline bool EmImgMode_Parse(
    const ::std::string& name, EmImgMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmImgMode>(
    EmImgMode_descriptor(), name, value);
}
enum EmIspActionType {
  IspActSetZoomOut = 0,
  IspActSetZoomIn = 1,
  IspActSetZoomStop = 2,
  IspActSetZoomAuto = 3,
  IspActSetZoomSpeed = 4,
  IspActSetZoomLimit = 5,
  IspActSetZoomPosition = 6,
  IspActGetZoomPosition = 7,
  IspActSetFocusNear = 8,
  IspActSetFocusFar = 9,
  IspActSetFocusStop = 10,
  IspActSetFocusAuto = 11,
  IspActSetFocusPosition = 12,
  IspActGetFocusPosition = 13,
  IspActSetAperture = 14,
  IspActSetPiCalibrate = 15,
  IspActSetCameraStd = 16,
  IspActSetCameraFlip = 17
};
MTMSG_API bool EmIspActionType_IsValid(int value);
const EmIspActionType EmIspActionType_MIN = IspActSetZoomOut;
const EmIspActionType EmIspActionType_MAX = IspActSetCameraFlip;
const int EmIspActionType_ARRAYSIZE = EmIspActionType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmIspActionType_descriptor();
inline const ::std::string& EmIspActionType_Name(EmIspActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmIspActionType_descriptor(), value);
}
inline bool EmIspActionType_Parse(
    const ::std::string& name, EmIspActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmIspActionType>(
    EmIspActionType_descriptor(), name, value);
}
enum EmCameraVidStd {
  emCamera_Auto = 0,
  emCamera_1080p_25 = 1,
  emCamera_1080p_30 = 2,
  emCamera_1080p_50 = 3,
  emCamera_1080p_60 = 4,
  emCamera_1080i_50 = 5,
  emCamera_1080i_60 = 6,
  emCamera_720p_50 = 7,
  emCamera_720p_60 = 8
};
MTMSG_API bool EmCameraVidStd_IsValid(int value);
const EmCameraVidStd EmCameraVidStd_MIN = emCamera_Auto;
const EmCameraVidStd EmCameraVidStd_MAX = emCamera_720p_60;
const int EmCameraVidStd_ARRAYSIZE = EmCameraVidStd_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCameraVidStd_descriptor();
inline const ::std::string& EmCameraVidStd_Name(EmCameraVidStd value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCameraVidStd_descriptor(), value);
}
inline bool EmCameraVidStd_Parse(
    const ::std::string& name, EmCameraVidStd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCameraVidStd>(
    EmCameraVidStd_descriptor(), name, value);
}
enum EmFilpType {
  emFlip_OFF = 0,
  emFlip_Vertical = 1,
  emFlip_Horizontal = 2,
  emFlip_Center = 3
};
MTMSG_API bool EmFilpType_IsValid(int value);
const EmFilpType EmFilpType_MIN = emFlip_OFF;
const EmFilpType EmFilpType_MAX = emFlip_Center;
const int EmFilpType_ARRAYSIZE = EmFilpType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmFilpType_descriptor();
inline const ::std::string& EmFilpType_Name(EmFilpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmFilpType_descriptor(), value);
}
inline bool EmFilpType_Parse(
    const ::std::string& name, EmFilpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmFilpType>(
    EmFilpType_descriptor(), name, value);
}
enum EmVmpMode {
  emScreenVmp = 0,
  emCustomScreenVmp = 1,
  emAutoScreenVmp = 2
};
MTMSG_API bool EmVmpMode_IsValid(int value);
const EmVmpMode EmVmpMode_MIN = emScreenVmp;
const EmVmpMode EmVmpMode_MAX = emAutoScreenVmp;
const int EmVmpMode_ARRAYSIZE = EmVmpMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVmpMode_descriptor();
inline const ::std::string& EmVmpMode_Name(EmVmpMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVmpMode_descriptor(), value);
}
inline bool EmVmpMode_Parse(
    const ::std::string& name, EmVmpMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVmpMode>(
    EmVmpMode_descriptor(), name, value);
}
enum EmPollMode {
  emPollModeBegin = 0,
  emVideoPoll = 1,
  emReserveTwo = 2,
  emAudioPoll = 3
};
MTMSG_API bool EmPollMode_IsValid(int value);
const EmPollMode EmPollMode_MIN = emPollModeBegin;
const EmPollMode EmPollMode_MAX = emAudioPoll;
const int EmPollMode_ARRAYSIZE = EmPollMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPollMode_descriptor();
inline const ::std::string& EmPollMode_Name(EmPollMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPollMode_descriptor(), value);
}
inline bool EmPollMode_Parse(
    const ::std::string& name, EmPollMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPollMode>(
    EmPollMode_descriptor(), name, value);
}
enum EmStreamNumber {
  emStreamBeg = 0,
  emMainAudEnc = 1,
  emMainAudDec = 2,
  emAssAudEnc = 3,
  emAssAudDec = 4,
  em1stVidEnc = 5,
  em1stVidDec = 6,
  em2ndVidEnc = 7,
  em2ndVidDec = 8,
  em3rdVidEnc = 9,
  em3rdVidDec = 10,
  emAssVidEnc = 11,
  emAssVidDec = 12,
  emStreamEnd = 128
};
MTMSG_API bool EmStreamNumber_IsValid(int value);
const EmStreamNumber EmStreamNumber_MIN = emStreamBeg;
const EmStreamNumber EmStreamNumber_MAX = emStreamEnd;
const int EmStreamNumber_ARRAYSIZE = EmStreamNumber_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmStreamNumber_descriptor();
inline const ::std::string& EmStreamNumber_Name(EmStreamNumber value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmStreamNumber_descriptor(), value);
}
inline bool EmStreamNumber_Parse(
    const ::std::string& name, EmStreamNumber* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmStreamNumber>(
    EmStreamNumber_descriptor(), name, value);
}
enum EmCtrlType {
  emAudioEncType = 0,
  emAudioDecType = 1,
  emVideoEncType = 2,
  emVideoDecType = 3
};
MTMSG_API bool EmCtrlType_IsValid(int value);
const EmCtrlType EmCtrlType_MIN = emAudioEncType;
const EmCtrlType EmCtrlType_MAX = emVideoDecType;
const int EmCtrlType_ARRAYSIZE = EmCtrlType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCtrlType_descriptor();
inline const ::std::string& EmCtrlType_Name(EmCtrlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCtrlType_descriptor(), value);
}
inline bool EmCtrlType_Parse(
    const ::std::string& name, EmCtrlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCtrlType>(
    EmCtrlType_descriptor(), name, value);
}
enum EmVideoRecordErrorNum {
  emErrorNoError = 0,
  emErrorFileNotFound = 1,
  emErrorInvalidASFFile = 2,
  emErrorObjectNotFound = 3,
  emErrorBadIndex = 4,
  emErrorValueNotFound = 5,
  emErrorBadArgument = 6,
  emErrorReadOnly = 7,
  emErrorNotEnoughSpace = 8,
  emErrorInternalError = 9,
  emErrorReadFileError = 10,
  emErrorWriteFileError = 11,
  emErrorSeekFileError = 12,
  emErrorCreateFileError = 13,
  emErrorCreateThreadError = 14,
  emErrorObjectNULLError = 15,
  emErrorTooMuchVideoStrream = 16,
  emErrorNotSupportedCodec = 17,
  emErrorFileEnd = 18,
  emErrorUnknownError = 19,
  emErrorWriteMemError = 20,
  emErrorFileNameEmpty = 21,
  emErrorNotDir = 22,
  emErrorLoop = 23,
  emErrorAccess = 24,
  emErrorNameTooLong = 25
};
MTMSG_API bool EmVideoRecordErrorNum_IsValid(int value);
const EmVideoRecordErrorNum EmVideoRecordErrorNum_MIN = emErrorNoError;
const EmVideoRecordErrorNum EmVideoRecordErrorNum_MAX = emErrorNameTooLong;
const int EmVideoRecordErrorNum_ARRAYSIZE = EmVideoRecordErrorNum_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVideoRecordErrorNum_descriptor();
inline const ::std::string& EmVideoRecordErrorNum_Name(EmVideoRecordErrorNum value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVideoRecordErrorNum_descriptor(), value);
}
inline bool EmVideoRecordErrorNum_Parse(
    const ::std::string& name, EmVideoRecordErrorNum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVideoRecordErrorNum>(
    EmVideoRecordErrorNum_descriptor(), name, value);
}
enum EmKeyState {
  emKeyUp = 0,
  emKeyDown = 1,
  emKeyLongPressed = 2
};
MTMSG_API bool EmKeyState_IsValid(int value);
const EmKeyState EmKeyState_MIN = emKeyUp;
const EmKeyState EmKeyState_MAX = emKeyLongPressed;
const int EmKeyState_ARRAYSIZE = EmKeyState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmKeyState_descriptor();
inline const ::std::string& EmKeyState_Name(EmKeyState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmKeyState_descriptor(), value);
}
inline bool EmKeyState_Parse(
    const ::std::string& name, EmKeyState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmKeyState>(
    EmKeyState_descriptor(), name, value);
}
enum EmVideoRecordStatus {
  emVideoRecordIdle = 0,
  emVideoRecordRecording = 1,
  emVideoRecordPause = 2
};
MTMSG_API bool EmVideoRecordStatus_IsValid(int value);
const EmVideoRecordStatus EmVideoRecordStatus_MIN = emVideoRecordIdle;
const EmVideoRecordStatus EmVideoRecordStatus_MAX = emVideoRecordPause;
const int EmVideoRecordStatus_ARRAYSIZE = EmVideoRecordStatus_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVideoRecordStatus_descriptor();
inline const ::std::string& EmVideoRecordStatus_Name(EmVideoRecordStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVideoRecordStatus_descriptor(), value);
}
inline bool EmVideoRecordStatus_Parse(
    const ::std::string& name, EmVideoRecordStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVideoRecordStatus>(
    EmVideoRecordStatus_descriptor(), name, value);
}
enum EmWirelessScreenState {
  emWirelessScreen_enabled = 0,
  emWirelessScreen_disabled = 1
};
MTMSG_API bool EmWirelessScreenState_IsValid(int value);
const EmWirelessScreenState EmWirelessScreenState_MIN = emWirelessScreen_enabled;
const EmWirelessScreenState EmWirelessScreenState_MAX = emWirelessScreen_disabled;
const int EmWirelessScreenState_ARRAYSIZE = EmWirelessScreenState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWirelessScreenState_descriptor();
inline const ::std::string& EmWirelessScreenState_Name(EmWirelessScreenState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWirelessScreenState_descriptor(), value);
}
inline bool EmWirelessScreenState_Parse(
    const ::std::string& name, EmWirelessScreenState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWirelessScreenState>(
    EmWirelessScreenState_descriptor(), name, value);
}
enum EmWirelessScreenErrReason {
  emWirelessScreenErrReason_None = 0,
  emWirelessScreenErrReason_Failed = 1,
  emWirelessScreenErrReason_Timeout = 2,
  emWirelessScreenErrReason_Unknown = 3
};
MTMSG_API bool EmWirelessScreenErrReason_IsValid(int value);
const EmWirelessScreenErrReason EmWirelessScreenErrReason_MIN = emWirelessScreenErrReason_None;
const EmWirelessScreenErrReason EmWirelessScreenErrReason_MAX = emWirelessScreenErrReason_Unknown;
const int EmWirelessScreenErrReason_ARRAYSIZE = EmWirelessScreenErrReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWirelessScreenErrReason_descriptor();
inline const ::std::string& EmWirelessScreenErrReason_Name(EmWirelessScreenErrReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWirelessScreenErrReason_descriptor(), value);
}
inline bool EmWirelessScreenErrReason_Parse(
    const ::std::string& name, EmWirelessScreenErrReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWirelessScreenErrReason>(
    EmWirelessScreenErrReason_descriptor(), name, value);
}
enum EmMtWarnType {
  emMtWarnBegin = 0,
  emMtWarnTemp = 1,
  emMtWarnFanSpeed = 2,
  emMtWarnCpu = 4,
  emMtWarnVolt = 8,
  emMtWarnEnd = 32768
};
MTMSG_API bool EmMtWarnType_IsValid(int value);
const EmMtWarnType EmMtWarnType_MIN = emMtWarnBegin;
const EmMtWarnType EmMtWarnType_MAX = emMtWarnEnd;
const int EmMtWarnType_ARRAYSIZE = EmMtWarnType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtWarnType_descriptor();
inline const ::std::string& EmMtWarnType_Name(EmMtWarnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtWarnType_descriptor(), value);
}
inline bool EmMtWarnType_Parse(
    const ::std::string& name, EmMtWarnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtWarnType>(
    EmMtWarnType_descriptor(), name, value);
}
enum EmLimitedIpType {
  emLimitedIpType_WhiteList = 0,
  emLimitedIpType_BlackList = 1,
  emLimitedIpType_Reset = 2
};
MTMSG_API bool EmLimitedIpType_IsValid(int value);
const EmLimitedIpType EmLimitedIpType_MIN = emLimitedIpType_WhiteList;
const EmLimitedIpType EmLimitedIpType_MAX = emLimitedIpType_Reset;
const int EmLimitedIpType_ARRAYSIZE = EmLimitedIpType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmLimitedIpType_descriptor();
inline const ::std::string& EmLimitedIpType_Name(EmLimitedIpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmLimitedIpType_descriptor(), value);
}
inline bool EmLimitedIpType_Parse(
    const ::std::string& name, EmLimitedIpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmLimitedIpType>(
    EmLimitedIpType_descriptor(), name, value);
}
enum EmTerControlCameraOsdType {
  emCameraOsdMenu = 0,
  emCameraOsdOk = 1,
  emCameraOsdReture = 2
};
MTMSG_API bool EmTerControlCameraOsdType_IsValid(int value);
const EmTerControlCameraOsdType EmTerControlCameraOsdType_MIN = emCameraOsdMenu;
const EmTerControlCameraOsdType EmTerControlCameraOsdType_MAX = emCameraOsdReture;
const int EmTerControlCameraOsdType_ARRAYSIZE = EmTerControlCameraOsdType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmTerControlCameraOsdType_descriptor();
inline const ::std::string& EmTerControlCameraOsdType_Name(EmTerControlCameraOsdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmTerControlCameraOsdType_descriptor(), value);
}
inline bool EmTerControlCameraOsdType_Parse(
    const ::std::string& name, EmTerControlCameraOsdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmTerControlCameraOsdType>(
    EmTerControlCameraOsdType_descriptor(), name, value);
}
enum EmDigestType {
  emSm3 = 0,
  emMd5 = 1
};
MTMSG_API bool EmDigestType_IsValid(int value);
const EmDigestType EmDigestType_MIN = emSm3;
const EmDigestType EmDigestType_MAX = emMd5;
const int EmDigestType_ARRAYSIZE = EmDigestType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDigestType_descriptor();
inline const ::std::string& EmDigestType_Name(EmDigestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDigestType_descriptor(), value);
}
inline bool EmDigestType_Parse(
    const ::std::string& name, EmDigestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDigestType>(
    EmDigestType_descriptor(), name, value);
}
enum EmPubPriType {
  emRsa = 1,
  emSm2 = 2
};
MTMSG_API bool EmPubPriType_IsValid(int value);
const EmPubPriType EmPubPriType_MIN = emRsa;
const EmPubPriType EmPubPriType_MAX = emSm2;
const int EmPubPriType_ARRAYSIZE = EmPubPriType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPubPriType_descriptor();
inline const ::std::string& EmPubPriType_Name(EmPubPriType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPubPriType_descriptor(), value);
}
inline bool EmPubPriType_Parse(
    const ::std::string& name, EmPubPriType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPubPriType>(
    EmPubPriType_descriptor(), name, value);
}
enum EmSrtpCryptoType {
  emSrtpCryptoNone = 0,
  emSrtpCryptoAES_CM_128 = 1,
  emSrtpCryptoAES_CM_192 = 2,
  emSrtpCryptoAES_CM_256 = 3,
  emSrtpCryptoAES_GCM_128 = 4,
  emSrtpCryptoAES_GCM_192 = 5,
  emSrtpCryptoAES_GCM_256 = 6,
  emSrtpCryptoSM4_CM_128 = 7,
  emSrtpCryptoSM1_CM_128 = 8
};
MTMSG_API bool EmSrtpCryptoType_IsValid(int value);
const EmSrtpCryptoType EmSrtpCryptoType_MIN = emSrtpCryptoNone;
const EmSrtpCryptoType EmSrtpCryptoType_MAX = emSrtpCryptoSM1_CM_128;
const int EmSrtpCryptoType_ARRAYSIZE = EmSrtpCryptoType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSrtpCryptoType_descriptor();
inline const ::std::string& EmSrtpCryptoType_Name(EmSrtpCryptoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSrtpCryptoType_descriptor(), value);
}
inline bool EmSrtpCryptoType_Parse(
    const ::std::string& name, EmSrtpCryptoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSrtpCryptoType>(
    EmSrtpCryptoType_descriptor(), name, value);
}
enum EmSrtpAuthType {
  emSrtpAuthNone = 0,
  emSrtpAuthTag_8 = 1,
  emSrtpAuthTag_16 = 2,
  emSrtpAuthTag_32 = 3,
  emSrtpAuthTag_80 = 4
};
MTMSG_API bool EmSrtpAuthType_IsValid(int value);
const EmSrtpAuthType EmSrtpAuthType_MIN = emSrtpAuthNone;
const EmSrtpAuthType EmSrtpAuthType_MAX = emSrtpAuthTag_80;
const int EmSrtpAuthType_ARRAYSIZE = EmSrtpAuthType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSrtpAuthType_descriptor();
inline const ::std::string& EmSrtpAuthType_Name(EmSrtpAuthType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSrtpAuthType_descriptor(), value);
}
inline bool EmSrtpAuthType_Parse(
    const ::std::string& name, EmSrtpAuthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSrtpAuthType>(
    EmSrtpAuthType_descriptor(), name, value);
}
enum EmSipConnectType {
  emSipUdpConnect = 0,
  emSipTcpConnect = 1,
  emSipTlsConnect = 2,
  emSipGMTlsConnect = 3
};
MTMSG_API bool EmSipConnectType_IsValid(int value);
const EmSipConnectType EmSipConnectType_MIN = emSipUdpConnect;
const EmSipConnectType EmSipConnectType_MAX = emSipGMTlsConnect;
const int EmSipConnectType_ARRAYSIZE = EmSipConnectType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSipConnectType_descriptor();
inline const ::std::string& EmSipConnectType_Name(EmSipConnectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSipConnectType_descriptor(), value);
}
inline bool EmSipConnectType_Parse(
    const ::std::string& name, EmSipConnectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSipConnectType>(
    EmSipConnectType_descriptor(), name, value);
}
enum EmSecCertFormat {
  emSecCertFormart_NULL = 0,
  emSecCertFormart_PEM = 1,
  emSecCertFormart_DER = 2,
  emSecCertFormart_PFX = 3,
  emSecCertFormart_B64 = 4
};
MTMSG_API bool EmSecCertFormat_IsValid(int value);
const EmSecCertFormat EmSecCertFormat_MIN = emSecCertFormart_NULL;
const EmSecCertFormat EmSecCertFormat_MAX = emSecCertFormart_B64;
const int EmSecCertFormat_ARRAYSIZE = EmSecCertFormat_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSecCertFormat_descriptor();
inline const ::std::string& EmSecCertFormat_Name(EmSecCertFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSecCertFormat_descriptor(), value);
}
inline bool EmSecCertFormat_Parse(
    const ::std::string& name, EmSecCertFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSecCertFormat>(
    EmSecCertFormat_descriptor(), name, value);
}
enum EmRecordType {
  emStartRecordType = 0,
  emConferenceRecord = 1,
  emTerminalRecord = 2
};
MTMSG_API bool EmRecordType_IsValid(int value);
const EmRecordType EmRecordType_MIN = emStartRecordType;
const EmRecordType EmRecordType_MAX = emTerminalRecord;
const int EmRecordType_ARRAYSIZE = EmRecordType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRecordType_descriptor();
inline const ::std::string& EmRecordType_Name(EmRecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRecordType_descriptor(), value);
}
inline bool EmRecordType_Parse(
    const ::std::string& name, EmRecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRecordType>(
    EmRecordType_descriptor(), name, value);
}
enum EmPublishMode {
  emNotPublishMode = 0,
  emPublishMode = 1
};
MTMSG_API bool EmPublishMode_IsValid(int value);
const EmPublishMode EmPublishMode_MIN = emNotPublishMode;
const EmPublishMode EmPublishMode_MAX = emPublishMode;
const int EmPublishMode_ARRAYSIZE = EmPublishMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPublishMode_descriptor();
inline const ::std::string& EmPublishMode_Name(EmPublishMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPublishMode_descriptor(), value);
}
inline bool EmPublishMode_Parse(
    const ::std::string& name, EmPublishMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPublishMode>(
    EmPublishMode_descriptor(), name, value);
}
enum EmRecordMode {
  emDisableRecordMode = 0,
  emRecordMode = 1,
  emLiveMode = 2,
  emRecordLiveMode = 3
};
MTMSG_API bool EmRecordMode_IsValid(int value);
const EmRecordMode EmRecordMode_MIN = emDisableRecordMode;
const EmRecordMode EmRecordMode_MAX = emRecordLiveMode;
const int EmRecordMode_ARRAYSIZE = EmRecordMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRecordMode_descriptor();
inline const ::std::string& EmRecordMode_Name(EmRecordMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRecordMode_descriptor(), value);
}
inline bool EmRecordMode_Parse(
    const ::std::string& name, EmRecordMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRecordMode>(
    EmRecordMode_descriptor(), name, value);
}
enum EmCallMode {
  emMannualCall = 0,
  emAutoCall = 1,
  emTimingCall = 2,
  emChasingCall = 3
};
MTMSG_API bool EmCallMode_IsValid(int value);
const EmCallMode EmCallMode_MIN = emMannualCall;
const EmCallMode EmCallMode_MAX = emChasingCall;
const int EmCallMode_ARRAYSIZE = EmCallMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCallMode_descriptor();
inline const ::std::string& EmCallMode_Name(EmCallMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCallMode_descriptor(), value);
}
inline bool EmCallMode_Parse(
    const ::std::string& name, EmCallMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCallMode>(
    EmCallMode_descriptor(), name, value);
}
enum EmRecordState {
  emDoNotRecord = 0,
  emRecording = 1,
  emSuspendRecord = 2,
  emCallingMT = 3,
  emPrepareRecord = 4
};
MTMSG_API bool EmRecordState_IsValid(int value);
const EmRecordState EmRecordState_MIN = emDoNotRecord;
const EmRecordState EmRecordState_MAX = emPrepareRecord;
const int EmRecordState_ARRAYSIZE = EmRecordState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRecordState_descriptor();
inline const ::std::string& EmRecordState_Name(EmRecordState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRecordState_descriptor(), value);
}
inline bool EmRecordState_Parse(
    const ::std::string& name, EmRecordState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRecordState>(
    EmRecordState_descriptor(), name, value);
}
enum EmRecordCmd {
  emRecordCmdBak = 0,
  emPauseRecord = 1,
  emContinueRecord = 2
};
MTMSG_API bool EmRecordCmd_IsValid(int value);
const EmRecordCmd EmRecordCmd_MIN = emRecordCmdBak;
const EmRecordCmd EmRecordCmd_MAX = emContinueRecord;
const int EmRecordCmd_ARRAYSIZE = EmRecordCmd_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmRecordCmd_descriptor();
inline const ::std::string& EmRecordCmd_Name(EmRecordCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmRecordCmd_descriptor(), value);
}
inline bool EmRecordCmd_Parse(
    const ::std::string& name, EmRecordCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmRecordCmd>(
    EmRecordCmd_descriptor(), name, value);
}
enum EmMtDcsType {
  emTypeUnknown = 0,
  emTypeTrueLink = 1,
  emTypeTrueTouchPhoneIOS = 2,
  emTypeTrueTouchPadIOS = 3,
  emTypeTrueTouchPhoneAndroid = 4,
  emTypeTrueTouchPadAndroid = 5,
  emTypeTrueSens = 6,
  emTypeIMIX = 7,
  emTypeThirdPartyTer = 8,
  emTypeButt = 9
};
MTMSG_API bool EmMtDcsType_IsValid(int value);
const EmMtDcsType EmMtDcsType_MIN = emTypeUnknown;
const EmMtDcsType EmMtDcsType_MAX = emTypeButt;
const int EmMtDcsType_ARRAYSIZE = EmMtDcsType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtDcsType_descriptor();
inline const ::std::string& EmMtDcsType_Name(EmMtDcsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtDcsType_descriptor(), value);
}
inline bool EmMtDcsType_Parse(
    const ::std::string& name, EmMtDcsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtDcsType>(
    EmMtDcsType_descriptor(), name, value);
}
enum EmMtDcsRole {
  emRoleManage = 0,
  emRoleOper = 1,
  emRoleUser = 2,
  emRoleErr = 10
};
MTMSG_API bool EmMtDcsRole_IsValid(int value);
const EmMtDcsRole EmMtDcsRole_MIN = emRoleManage;
const EmMtDcsRole EmMtDcsRole_MAX = emRoleErr;
const int EmMtDcsRole_ARRAYSIZE = EmMtDcsRole_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtDcsRole_descriptor();
inline const ::std::string& EmMtDcsRole_Name(EmMtDcsRole value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtDcsRole_descriptor(), value);
}
inline bool EmMtDcsRole_Parse(
    const ::std::string& name, EmMtDcsRole* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtDcsRole>(
    EmMtDcsRole_descriptor(), name, value);
}
enum EmMtDcsConfMode {
  emConfModeStop = 0,
  emConfModeManage = 1,
  emConfModeAuto = 2
};
MTMSG_API bool EmMtDcsConfMode_IsValid(int value);
const EmMtDcsConfMode EmMtDcsConfMode_MIN = emConfModeStop;
const EmMtDcsConfMode EmMtDcsConfMode_MAX = emConfModeAuto;
const int EmMtDcsConfMode_ARRAYSIZE = EmMtDcsConfMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtDcsConfMode_descriptor();
inline const ::std::string& EmMtDcsConfMode_Name(EmMtDcsConfMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtDcsConfMode_descriptor(), value);
}
inline bool EmMtDcsConfMode_Parse(
    const ::std::string& name, EmMtDcsConfMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtDcsConfMode>(
    EmMtDcsConfMode_descriptor(), name, value);
}
enum EmMtDcsConfType {
  emConfTypeP2P = 0,
  emConfTypeMCC = 1
};
MTMSG_API bool EmMtDcsConfType_IsValid(int value);
const EmMtDcsConfType EmMtDcsConfType_MIN = emConfTypeP2P;
const EmMtDcsConfType EmMtDcsConfType_MAX = emConfTypeMCC;
const int EmMtDcsConfType_ARRAYSIZE = EmMtDcsConfType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtDcsConfType_descriptor();
inline const ::std::string& EmMtDcsConfType_Name(EmMtDcsConfType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtDcsConfType_descriptor(), value);
}
inline bool EmMtDcsConfType_Parse(
    const ::std::string& name, EmMtDcsConfType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtDcsConfType>(
    EmMtDcsConfType_descriptor(), name, value);
}
enum EmMtDcsWbMode {
  emWbModeWB = 0,
  emWBModeDOC = 1
};
MTMSG_API bool EmMtDcsWbMode_IsValid(int value);
const EmMtDcsWbMode EmMtDcsWbMode_MIN = emWbModeWB;
const EmMtDcsWbMode EmMtDcsWbMode_MAX = emWBModeDOC;
const int EmMtDcsWbMode_ARRAYSIZE = EmMtDcsWbMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtDcsWbMode_descriptor();
inline const ::std::string& EmMtDcsWbMode_Name(EmMtDcsWbMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtDcsWbMode_descriptor(), value);
}
inline bool EmMtDcsWbMode_Parse(
    const ::std::string& name, EmMtDcsWbMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtDcsWbMode>(
    EmMtDcsWbMode_descriptor(), name, value);
}
enum EmWbEntityType {
  emUnknow = 0,
  emLine = 1,
  emCircle = 2,
  emPencil = 3,
  emColorPen = 4,
  emImage = 5
};
MTMSG_API bool EmWbEntityType_IsValid(int value);
const EmWbEntityType EmWbEntityType_MIN = emUnknow;
const EmWbEntityType EmWbEntityType_MAX = emImage;
const int EmWbEntityType_ARRAYSIZE = EmWbEntityType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWbEntityType_descriptor();
inline const ::std::string& EmWbEntityType_Name(EmWbEntityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWbEntityType_descriptor(), value);
}
inline bool EmWbEntityType_Parse(
    const ::std::string& name, EmWbEntityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWbEntityType>(
    EmWbEntityType_descriptor(), name, value);
}
enum EmWbImageState {
  emImageStateDownloading = 0,
  emImageStateDownLoadFail = 1,
  emImageStateOwnerAlreadyLeave = 2,
  emImageStateDownLoadOk = 3,
  emImageStateInit = 4,
  emImageStateConvertFail = 5,
  emImageStateSelfAlreadyLeave = 6
};
MTMSG_API bool EmWbImageState_IsValid(int value);
const EmWbImageState EmWbImageState_MIN = emImageStateDownloading;
const EmWbImageState EmWbImageState_MAX = emImageStateSelfAlreadyLeave;
const int EmWbImageState_ARRAYSIZE = EmWbImageState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWbImageState_descriptor();
inline const ::std::string& EmWbImageState_Name(EmWbImageState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWbImageState_descriptor(), value);
}
inline bool EmWbImageState_Parse(
    const ::std::string& name, EmWbImageState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWbImageState>(
    EmWbImageState_descriptor(), name, value);
}
enum EmWBMode {
  emWbModeUnkown = 0,
  emWbModeWhiteBoard = 1,
  emWbModeDOC = 2
};
MTMSG_API bool EmWBMode_IsValid(int value);
const EmWBMode EmWBMode_MIN = emWbModeUnkown;
const EmWBMode EmWBMode_MAX = emWbModeDOC;
const int EmWBMode_ARRAYSIZE = EmWBMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmWBMode_descriptor();
inline const ::std::string& EmWBMode_Name(EmWBMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmWBMode_descriptor(), value);
}
inline bool EmWBMode_Parse(
    const ::std::string& name, EmWBMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmWBMode>(
    EmWBMode_descriptor(), name, value);
}
enum EmDcsConnectType {
  emConnectLogin = 0,
  emConnectConf = 1
};
MTMSG_API bool EmDcsConnectType_IsValid(int value);
const EmDcsConnectType EmDcsConnectType_MIN = emConnectLogin;
const EmDcsConnectType EmDcsConnectType_MAX = emConnectConf;
const int EmDcsConnectType_ARRAYSIZE = EmDcsConnectType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDcsConnectType_descriptor();
inline const ::std::string& EmDcsConnectType_Name(EmDcsConnectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDcsConnectType_descriptor(), value);
}
inline bool EmDcsConnectType_Parse(
    const ::std::string& name, EmDcsConnectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDcsConnectType>(
    EmDcsConnectType_descriptor(), name, value);
}
enum EmDcsOper {
  emWbLineOperInfo = 0,
  emWbCircleOperInfo = 1,
  emWbRectangleOperInfo = 2,
  emWbPencilOperInfo = 3,
  emWbColorPenOperInfo = 4,
  emWbImageOperInfo = 5,
  emWbAddSubPageInfo = 6,
  emWbEraseOperInfo = 7,
  emWbZoomInfo = 8,
  emWbUndo = 9,
  emWbRedo = 10,
  emWbRotateLeft = 11,
  emWbRotateRight = 12,
  emWbClearScreen = 13,
  emWbScrollScreen = 14,
  emWbFullScreen = 15,
  emWb100ProportionScreen = 16,
  emWbReginErase = 17,
  emWbInsertPic = 18,
  emWbPitchPicZoom = 19,
  emWbPitchPicRotate = 20,
  emWbPitchPicDrag = 21,
  emWbPitchPicDel = 22
};
MTMSG_API bool EmDcsOper_IsValid(int value);
const EmDcsOper EmDcsOper_MIN = emWbLineOperInfo;
const EmDcsOper EmDcsOper_MAX = emWbPitchPicDel;
const int EmDcsOper_ARRAYSIZE = EmDcsOper_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDcsOper_descriptor();
inline const ::std::string& EmDcsOper_Name(EmDcsOper value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDcsOper_descriptor(), value);
}
inline bool EmDcsOper_Parse(
    const ::std::string& name, EmDcsOper* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDcsOper>(
    EmDcsOper_descriptor(), name, value);
}
enum EmDcsConnectErrCode {
  emConfSuccess = 1,
  emConfFailed = 2,
  emConfDisconnect = 3,
  emLoginSuccess = 4,
  emLoginFailed = 5,
  emLoginDisconnect = 6
};
MTMSG_API bool EmDcsConnectErrCode_IsValid(int value);
const EmDcsConnectErrCode EmDcsConnectErrCode_MIN = emConfSuccess;
const EmDcsConnectErrCode EmDcsConnectErrCode_MAX = emLoginDisconnect;
const int EmDcsConnectErrCode_ARRAYSIZE = EmDcsConnectErrCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDcsConnectErrCode_descriptor();
inline const ::std::string& EmDcsConnectErrCode_Name(EmDcsConnectErrCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDcsConnectErrCode_descriptor(), value);
}
inline bool EmDcsConnectErrCode_Parse(
    const ::std::string& name, EmDcsConnectErrCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDcsConnectErrCode>(
    EmDcsConnectErrCode_descriptor(), name, value);
}
enum EmDcsAdpRejectJoinConfCode {
  emRejectJoinConf_start = 1,
  emRejectJoinConf_busy = 2,
  emRejectJoinConf_normal = 3,
  emRejectJoinConf_rejected = 4,
  emRejectJoinConf_unreachable = 5,
  emRejectJoinConf_unknown = 6,
  emRejectJoinConf_end = 7
};
MTMSG_API bool EmDcsAdpRejectJoinConfCode_IsValid(int value);
const EmDcsAdpRejectJoinConfCode EmDcsAdpRejectJoinConfCode_MIN = emRejectJoinConf_start;
const EmDcsAdpRejectJoinConfCode EmDcsAdpRejectJoinConfCode_MAX = emRejectJoinConf_end;
const int EmDcsAdpRejectJoinConfCode_ARRAYSIZE = EmDcsAdpRejectJoinConfCode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmDcsAdpRejectJoinConfCode_descriptor();
inline const ::std::string& EmDcsAdpRejectJoinConfCode_Name(EmDcsAdpRejectJoinConfCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmDcsAdpRejectJoinConfCode_descriptor(), value);
}
inline bool EmDcsAdpRejectJoinConfCode_Parse(
    const ::std::string& name, EmDcsAdpRejectJoinConfCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmDcsAdpRejectJoinConfCode>(
    EmDcsAdpRejectJoinConfCode_descriptor(), name, value);
}
enum EmSecAutState {
  emSecAutidle = 0,
  emSecAuting = 1,
  emSecAutsuc = 2
};
MTMSG_API bool EmSecAutState_IsValid(int value);
const EmSecAutState EmSecAutState_MIN = emSecAutidle;
const EmSecAutState EmSecAutState_MAX = emSecAutsuc;
const int EmSecAutState_ARRAYSIZE = EmSecAutState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSecAutState_descriptor();
inline const ::std::string& EmSecAutState_Name(EmSecAutState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSecAutState_descriptor(), value);
}
inline bool EmSecAutState_Parse(
    const ::std::string& name, EmSecAutState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSecAutState>(
    EmSecAutState_descriptor(), name, value);
}
enum EmAuthCancelReason {
  emSecAuth_Cancel = 1,
  emSecAuth_ErrOverTime = 2,
  emSecAut_TimeOut = 3,
  emSecAut_ErrConnect = 4
};
MTMSG_API bool EmAuthCancelReason_IsValid(int value);
const EmAuthCancelReason EmAuthCancelReason_MIN = emSecAuth_Cancel;
const EmAuthCancelReason EmAuthCancelReason_MAX = emSecAut_ErrConnect;
const int EmAuthCancelReason_ARRAYSIZE = EmAuthCancelReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAuthCancelReason_descriptor();
inline const ::std::string& EmAuthCancelReason_Name(EmAuthCancelReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAuthCancelReason_descriptor(), value);
}
inline bool EmAuthCancelReason_Parse(
    const ::std::string& name, EmAuthCancelReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAuthCancelReason>(
    EmAuthCancelReason_descriptor(), name, value);
}
enum EmSecKeyUpdateMode {
  EmSecKeyUpdateModeByPeriod = 0,
  EmSecKeyUpdateModeByPackage = 1
};
MTMSG_API bool EmSecKeyUpdateMode_IsValid(int value);
const EmSecKeyUpdateMode EmSecKeyUpdateMode_MIN = EmSecKeyUpdateModeByPeriod;
const EmSecKeyUpdateMode EmSecKeyUpdateMode_MAX = EmSecKeyUpdateModeByPackage;
const int EmSecKeyUpdateMode_ARRAYSIZE = EmSecKeyUpdateMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmSecKeyUpdateMode_descriptor();
inline const ::std::string& EmSecKeyUpdateMode_Name(EmSecKeyUpdateMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmSecKeyUpdateMode_descriptor(), value);
}
inline bool EmSecKeyUpdateMode_Parse(
    const ::std::string& name, EmSecKeyUpdateMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmSecKeyUpdateMode>(
    EmSecKeyUpdateMode_descriptor(), name, value);
}
enum EmCameraCtrlType {
  emIspImgCtrl = 1,
  emSerialCtrl = 2
};
MTMSG_API bool EmCameraCtrlType_IsValid(int value);
const EmCameraCtrlType EmCameraCtrlType_MIN = emIspImgCtrl;
const EmCameraCtrlType EmCameraCtrlType_MAX = emSerialCtrl;
const int EmCameraCtrlType_ARRAYSIZE = EmCameraCtrlType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCameraCtrlType_descriptor();
inline const ::std::string& EmCameraCtrlType_Name(EmCameraCtrlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCameraCtrlType_descriptor(), value);
}
inline bool EmCameraCtrlType_Parse(
    const ::std::string& name, EmCameraCtrlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCameraCtrlType>(
    EmCameraCtrlType_descriptor(), name, value);
}
enum EmVersionType {
  emChannel = 0,
  emOthers = 1
};
MTMSG_API bool EmVersionType_IsValid(int value);
const EmVersionType EmVersionType_MIN = emChannel;
const EmVersionType EmVersionType_MAX = emOthers;
const int EmVersionType_ARRAYSIZE = EmVersionType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVersionType_descriptor();
inline const ::std::string& EmVersionType_Name(EmVersionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVersionType_descriptor(), value);
}
inline bool EmVersionType_Parse(
    const ::std::string& name, EmVersionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVersionType>(
    EmVersionType_descriptor(), name, value);
}
enum EmLicenseKeyCheckValue {
  emWrongKey = 0,
  emRightKey = 1,
  emNotExist = 2,
  emParseError = 3
};
MTMSG_API bool EmLicenseKeyCheckValue_IsValid(int value);
const EmLicenseKeyCheckValue EmLicenseKeyCheckValue_MIN = emWrongKey;
const EmLicenseKeyCheckValue EmLicenseKeyCheckValue_MAX = emParseError;
const int EmLicenseKeyCheckValue_ARRAYSIZE = EmLicenseKeyCheckValue_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmLicenseKeyCheckValue_descriptor();
inline const ::std::string& EmLicenseKeyCheckValue_Name(EmLicenseKeyCheckValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmLicenseKeyCheckValue_descriptor(), value);
}
inline bool EmLicenseKeyCheckValue_Parse(
    const ::std::string& name, EmLicenseKeyCheckValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmLicenseKeyCheckValue>(
    EmLicenseKeyCheckValue_descriptor(), name, value);
}
enum EmCameraErrorType {
  EmCameraErrorType_unknown = 0,
  EmCameraErrorType_ZoominEnd = 1,
  EmCameraErrorType_ZoomoutEnd = 2,
  EmCameraErrorType_TiltUpEnd = 3,
  EmCameraErrorType_TiltDownEnd = 4,
  EmCameraErrorType_PanLeftEnd = 5,
  EmCameraErrorType_PanRightEnd = 6
};
MTMSG_API bool EmCameraErrorType_IsValid(int value);
const EmCameraErrorType EmCameraErrorType_MIN = EmCameraErrorType_unknown;
const EmCameraErrorType EmCameraErrorType_MAX = EmCameraErrorType_PanRightEnd;
const int EmCameraErrorType_ARRAYSIZE = EmCameraErrorType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCameraErrorType_descriptor();
inline const ::std::string& EmCameraErrorType_Name(EmCameraErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCameraErrorType_descriptor(), value);
}
inline bool EmCameraErrorType_Parse(
    const ::std::string& name, EmCameraErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCameraErrorType>(
    EmCameraErrorType_descriptor(), name, value);
}
enum EmCameraSceneMode {
  EmCameraSceneMode_Standard = 0,
  EmCameraSceneMode_Projector = 1,
  EmCameraSceneMode_Peoplefeature = 2,
  EmCameraSceneMode_Peoplebacklight = 3
};
MTMSG_API bool EmCameraSceneMode_IsValid(int value);
const EmCameraSceneMode EmCameraSceneMode_MIN = EmCameraSceneMode_Standard;
const EmCameraSceneMode EmCameraSceneMode_MAX = EmCameraSceneMode_Peoplebacklight;
const int EmCameraSceneMode_ARRAYSIZE = EmCameraSceneMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmCameraSceneMode_descriptor();
inline const ::std::string& EmCameraSceneMode_Name(EmCameraSceneMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmCameraSceneMode_descriptor(), value);
}
inline bool EmCameraSceneMode_Parse(
    const ::std::string& name, EmCameraSceneMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmCameraSceneMode>(
    EmCameraSceneMode_descriptor(), name, value);
}
enum EmMtVConfStatus {
  emVConf_Idle = 0,
  emVConf_Busy = 1
};
MTMSG_API bool EmMtVConfStatus_IsValid(int value);
const EmMtVConfStatus EmMtVConfStatus_MIN = emVConf_Idle;
const EmMtVConfStatus EmMtVConfStatus_MAX = emVConf_Busy;
const int EmMtVConfStatus_ARRAYSIZE = EmMtVConfStatus_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtVConfStatus_descriptor();
inline const ::std::string& EmMtVConfStatus_Name(EmMtVConfStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtVConfStatus_descriptor(), value);
}
inline bool EmMtVConfStatus_Parse(
    const ::std::string& name, EmMtVConfStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtVConfStatus>(
    EmMtVConfStatus_descriptor(), name, value);
}
enum EmMtMaxJoinMt {
  emMaxJoinMt_8 = 0,
  emMaxJoinMt_32 = 1,
  emMaxJoinMt_64 = 2,
  emMaxJoinMt_192 = 3
};
MTMSG_API bool EmMtMaxJoinMt_IsValid(int value);
const EmMtMaxJoinMt EmMtMaxJoinMt_MIN = emMaxJoinMt_8;
const EmMtMaxJoinMt EmMtMaxJoinMt_MAX = emMaxJoinMt_192;
const int EmMtMaxJoinMt_ARRAYSIZE = EmMtMaxJoinMt_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtMaxJoinMt_descriptor();
inline const ::std::string& EmMtMaxJoinMt_Name(EmMtMaxJoinMt value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtMaxJoinMt_descriptor(), value);
}
inline bool EmMtMaxJoinMt_Parse(
    const ::std::string& name, EmMtMaxJoinMt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtMaxJoinMt>(
    EmMtMaxJoinMt_descriptor(), name, value);
}
enum EmMtVConfResources {
  emVConfResource_8_720 = 1,
  emVConfResource_8_1080 = 2,
  emVConfResource_32_720 = 3,
  emVConfResource_32_1080 = 4,
  emVConfResource_64_720 = 5,
  emVConfResource_64_1080 = 6,
  emVConfResource_192_720 = 7,
  emVConfResource_192_1080 = 8
};
MTMSG_API bool EmMtVConfResources_IsValid(int value);
const EmMtVConfResources EmMtVConfResources_MIN = emVConfResource_8_720;
const EmMtVConfResources EmMtVConfResources_MAX = emVConfResource_192_1080;
const int EmMtVConfResources_ARRAYSIZE = EmMtVConfResources_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtVConfResources_descriptor();
inline const ::std::string& EmMtVConfResources_Name(EmMtVConfResources value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtVConfResources_descriptor(), value);
}
inline bool EmMtVConfResources_Parse(
    const ::std::string& name, EmMtVConfResources* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtVConfResources>(
    EmMtVConfResources_descriptor(), name, value);
}
enum EmMtFecMode {
  emMtFec_Close = 0,
  emMtFec_Open = 1
};
MTMSG_API bool EmMtFecMode_IsValid(int value);
const EmMtFecMode EmMtFecMode_MIN = emMtFec_Close;
const EmMtFecMode EmMtFecMode_MAX = emMtFec_Open;
const int EmMtFecMode_ARRAYSIZE = EmMtFecMode_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtFecMode_descriptor();
inline const ::std::string& EmMtFecMode_Name(EmMtFecMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtFecMode_descriptor(), value);
}
inline bool EmMtFecMode_Parse(
    const ::std::string& name, EmMtFecMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtFecMode>(
    EmMtFecMode_descriptor(), name, value);
}
enum EmPlatform {
  emOLD_PLATFORM = 0,
  emBUSS_PLATFORM = 1,
  emCOMM_PLATFORM = 2
};
MTMSG_API bool EmPlatform_IsValid(int value);
const EmPlatform EmPlatform_MIN = emOLD_PLATFORM;
const EmPlatform EmPlatform_MAX = emCOMM_PLATFORM;
const int EmPlatform_ARRAYSIZE = EmPlatform_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmPlatform_descriptor();
inline const ::std::string& EmPlatform_Name(EmPlatform value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmPlatform_descriptor(), value);
}
inline bool EmPlatform_Parse(
    const ::std::string& name, EmPlatform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmPlatform>(
    EmPlatform_descriptor(), name, value);
}
enum EmMtChipType {
  emMtChip_Main = 0,
  emMtChip_VidEnc1 = 1,
  emMtChip_VidEnc2 = 2,
  emMtChip_VidEnc3 = 3,
  emMtChip_VidEnc4 = 4,
  emMtChip_VidEnc5 = 5,
  emMtChip_VidDec1 = 6,
  emMtChip_VidDec2 = 7,
  emMtChip_VidDec3 = 8,
  emMtChip_VidDec4 = 9,
  emMtChip_VidDec5 = 10,
  emMtChip_AudEnc1 = 11,
  emMtChip_AudDec1 = 12
};
MTMSG_API bool EmMtChipType_IsValid(int value);
const EmMtChipType EmMtChipType_MIN = emMtChip_Main;
const EmMtChipType EmMtChipType_MAX = emMtChip_AudDec1;
const int EmMtChipType_ARRAYSIZE = EmMtChipType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmMtChipType_descriptor();
inline const ::std::string& EmMtChipType_Name(EmMtChipType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmMtChipType_descriptor(), value);
}
inline bool EmMtChipType_Parse(
    const ::std::string& name, EmMtChipType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmMtChipType>(
    EmMtChipType_descriptor(), name, value);
}
enum EmClientAppType {
  emClientAppOsd = 0,
  emClientAppWebService = 1,
  emClientAppSkyShare = 2,
  emClientAppSkyRemote = 3,
  emClientAppSkyMTC = 4,
  emClientAppSkyWindows = 5,
  emClientAppSkyAndroid = 6,
  emClientAppSkyIOS = 7,
  emClientAppThirdParty = 8,
  emClientAppNexVison = 9,
  emClientAppMTCEnd = 10
};
MTMSG_API bool EmClientAppType_IsValid(int value);
const EmClientAppType EmClientAppType_MIN = emClientAppOsd;
const EmClientAppType EmClientAppType_MAX = emClientAppMTCEnd;
const int EmClientAppType_ARRAYSIZE = EmClientAppType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmClientAppType_descriptor();
inline const ::std::string& EmClientAppType_Name(EmClientAppType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmClientAppType_descriptor(), value);
}
inline bool EmClientAppType_Parse(
    const ::std::string& name, EmClientAppType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmClientAppType>(
    EmClientAppType_descriptor(), name, value);
}
enum EmAuthType {
  emUserNamePwdAuth = 0,
  emInnerPwdAuth = 1,
  emDynamicAuth = 2,
  emAuthEnd = 3
};
MTMSG_API bool EmAuthType_IsValid(int value);
const EmAuthType EmAuthType_MIN = emUserNamePwdAuth;
const EmAuthType EmAuthType_MAX = emAuthEnd;
const int EmAuthType_ARRAYSIZE = EmAuthType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAuthType_descriptor();
inline const ::std::string& EmAuthType_Name(EmAuthType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAuthType_descriptor(), value);
}
inline bool EmAuthType_Parse(
    const ::std::string& name, EmAuthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAuthType>(
    EmAuthType_descriptor(), name, value);
}
enum EmLoginFailReason {
  emPwdErr = 1,
  emTerStarting = 2,
  emTerUpgrading = 3,
  emFailReasonEnd = 10
};
MTMSG_API bool EmLoginFailReason_IsValid(int value);
const EmLoginFailReason EmLoginFailReason_MIN = emPwdErr;
const EmLoginFailReason EmLoginFailReason_MAX = emFailReasonEnd;
const int EmLoginFailReason_ARRAYSIZE = EmLoginFailReason_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmLoginFailReason_descriptor();
inline const ::std::string& EmLoginFailReason_Name(EmLoginFailReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmLoginFailReason_descriptor(), value);
}
inline bool EmLoginFailReason_Parse(
    const ::std::string& name, EmLoginFailReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmLoginFailReason>(
    EmLoginFailReason_descriptor(), name, value);
}
enum EmVConfCreateType {
  emCreateNormalConf = 0,
  emCreateVirtualConf = 1,
  emCreateConfByTemplate = 2
};
MTMSG_API bool EmVConfCreateType_IsValid(int value);
const EmVConfCreateType EmVConfCreateType_MIN = emCreateNormalConf;
const EmVConfCreateType EmVConfCreateType_MAX = emCreateConfByTemplate;
const int EmVConfCreateType_ARRAYSIZE = EmVConfCreateType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmVConfCreateType_descriptor();
inline const ::std::string& EmVConfCreateType_Name(EmVConfCreateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmVConfCreateType_descriptor(), value);
}
inline bool EmVConfCreateType_Parse(
    const ::std::string& name, EmVConfCreateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmVConfCreateType>(
    EmVConfCreateType_descriptor(), name, value);
}
enum EmQkState {
  emUsbOff = 0,
  emUsbOn = 1,
  emUpdating = 2,
  emWps = 3,
  emWpsSucc = 4,
  emApLink = 5,
  emApOff = 6,
  emQkStart = 7,
  emQkOff = 8,
  emWpsTimeOut = 9
};
MTMSG_API bool EmQkState_IsValid(int value);
const EmQkState EmQkState_MIN = emUsbOff;
const EmQkState EmQkState_MAX = emWpsTimeOut;
const int EmQkState_ARRAYSIZE = EmQkState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmQkState_descriptor();
inline const ::std::string& EmQkState_Name(EmQkState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmQkState_descriptor(), value);
}
inline bool EmQkState_Parse(
    const ::std::string& name, EmQkState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmQkState>(
    EmQkState_descriptor(), name, value);
}
enum EmResourceType {
  emResourceType_LimitP = 0,
  emResourceType_LimitPR = 1,
  emResourceType_None = 2
};
MTMSG_API bool EmResourceType_IsValid(int value);
const EmResourceType EmResourceType_MIN = emResourceType_LimitP;
const EmResourceType EmResourceType_MAX = emResourceType_None;
const int EmResourceType_ARRAYSIZE = EmResourceType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmResourceType_descriptor();
inline const ::std::string& EmResourceType_Name(EmResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmResourceType_descriptor(), value);
}
inline bool EmResourceType_Parse(
    const ::std::string& name, EmResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmResourceType>(
    EmResourceType_descriptor(), name, value);
}
enum EmAgentPackFileState {
  emPackNotStart = 0,
  emPacking = 1,
  emPackError = 2
};
MTMSG_API bool EmAgentPackFileState_IsValid(int value);
const EmAgentPackFileState EmAgentPackFileState_MIN = emPackNotStart;
const EmAgentPackFileState EmAgentPackFileState_MAX = emPackError;
const int EmAgentPackFileState_ARRAYSIZE = EmAgentPackFileState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAgentPackFileState_descriptor();
inline const ::std::string& EmAgentPackFileState_Name(EmAgentPackFileState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAgentPackFileState_descriptor(), value);
}
inline bool EmAgentPackFileState_Parse(
    const ::std::string& name, EmAgentPackFileState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAgentPackFileState>(
    EmAgentPackFileState_descriptor(), name, value);
}
enum EmAiAudioType {
  emAiUnknow = 0,
  emAiPleaseSay = 1,
  emAiBayBay = 2,
  emAiUnLoginPlatForm = 3,
  emAiRepeatConfName = 4,
  emAiSelectConf = 5,
  emAiJoinConfFail = 6,
  emAiOnCreateConf = 7,
  emAiCreateSuccess = 8,
  emAiCreateFail = 9,
  emAiJoinConfSuccess = 10,
  emAiOnJoinConf = 11,
  emAiNoPermission = 12,
  emAiHungupConf = 13,
  emAiRobAss = 14,
  emAiDelayConf = 15,
  emAiConfIsIdle = 16,
  emAiConfNotMcc = 17,
  emAiEndConf = 18,
  emAiUnknowAgain = 19,
  emAiOnFindConf = 20,
  emAiGood = 21,
  emAiOnFindConfMember = 22,
  emAiRepeatInviteMember = 23,
  emAiOnInviteMember = 24,
  emAiSatrtAss = 25,
  emAiAssNoSignal = 26,
  emAiDelayConfWithTime = 27,
  emAiUpAudio = 28,
  emAiDownAudio = 29,
  emAiMaxAudio = 30,
  emAiMinAudio = 31,
  emAiSelectMember = 32,
  emAiCloseAss = 33,
  emAiSureOrNotEndConf = 34,
  emAiSureOrNotHangupConf = 35,
  emAiCancleOperator = 36,
  emAiHangupOrEndConf = 37,
  emAiApplyChair = 38,
  emAiSelectView = 39,
  emAiSelectViewNotExist = 40,
  emAiCancleSelectView = 41,
  emAiMtOnConf = 42,
  emAiAssIsClose = 43,
  emAiEnd = 100
};
MTMSG_API bool EmAiAudioType_IsValid(int value);
const EmAiAudioType EmAiAudioType_MIN = emAiUnknow;
const EmAiAudioType EmAiAudioType_MAX = emAiEnd;
const int EmAiAudioType_ARRAYSIZE = EmAiAudioType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAiAudioType_descriptor();
inline const ::std::string& EmAiAudioType_Name(EmAiAudioType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAiAudioType_descriptor(), value);
}
inline bool EmAiAudioType_Parse(
    const ::std::string& name, EmAiAudioType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAiAudioType>(
    EmAiAudioType_descriptor(), name, value);
}
enum EmAiActionState {
  emAiActionBegin = 0,
  emAiActionEndConf = 1,
  emAiActionHungupConf = 2,
  emAiActionOpenAss = 3,
  emAiActionJoinConf = 4,
  emAiActionInviteCall = 5,
  emAiActionEnd = 50
};
MTMSG_API bool EmAiActionState_IsValid(int value);
const EmAiActionState EmAiActionState_MIN = emAiActionBegin;
const EmAiActionState EmAiActionState_MAX = emAiActionEnd;
const int EmAiActionState_ARRAYSIZE = EmAiActionState_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAiActionState_descriptor();
inline const ::std::string& EmAiActionState_Name(EmAiActionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAiActionState_descriptor(), value);
}
inline bool EmAiActionState_Parse(
    const ::std::string& name, EmAiActionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAiActionState>(
    EmAiActionState_descriptor(), name, value);
}
enum EmAiContactType {
  emAiContactBegin = 0,
  emAiLocalContact = 1,
  emAiShareContact = 2,
  emAiContactEnd = 20
};
MTMSG_API bool EmAiContactType_IsValid(int value);
const EmAiContactType EmAiContactType_MIN = emAiContactBegin;
const EmAiContactType EmAiContactType_MAX = emAiContactEnd;
const int EmAiContactType_ARRAYSIZE = EmAiContactType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmAiContactType_descriptor();
inline const ::std::string& EmAiContactType_Name(EmAiContactType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmAiContactType_descriptor(), value);
}
inline bool EmAiContactType_Parse(
    const ::std::string& name, EmAiContactType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmAiContactType>(
    EmAiContactType_descriptor(), name, value);
}
enum EmShortCutKeyType {
  emUnkown = 0,
  emRedShortCutKey = 1,
  emYellowShortCutKey = 2,
  emGreenShortCutKey = 3
};
MTMSG_API bool EmShortCutKeyType_IsValid(int value);
const EmShortCutKeyType EmShortCutKeyType_MIN = emUnkown;
const EmShortCutKeyType EmShortCutKeyType_MAX = emGreenShortCutKey;
const int EmShortCutKeyType_ARRAYSIZE = EmShortCutKeyType_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmShortCutKeyType_descriptor();
inline const ::std::string& EmShortCutKeyType_Name(EmShortCutKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmShortCutKeyType_descriptor(), value);
}
inline bool EmShortCutKeyType_Parse(
    const ::std::string& name, EmShortCutKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmShortCutKeyType>(
    EmShortCutKeyType_descriptor(), name, value);
}
enum EmShortCutKeyFuc {
  emFucBegin = 0,
  emLoop = 1,
  emApplyChair = 2,
  emApplySpeaker = 3,
  emShowSystemInfo = 4,
  emFullMute = 5,
  emSpeechHelper = 6,
  emFaceCheckIn = 7,
  emClose = 20
};
MTMSG_API bool EmShortCutKeyFuc_IsValid(int value);
const EmShortCutKeyFuc EmShortCutKeyFuc_MIN = emFucBegin;
const EmShortCutKeyFuc EmShortCutKeyFuc_MAX = emClose;
const int EmShortCutKeyFuc_ARRAYSIZE = EmShortCutKeyFuc_MAX + 1;

MTMSG_API const ::google::protobuf::EnumDescriptor* EmShortCutKeyFuc_descriptor();
inline const ::std::string& EmShortCutKeyFuc_Name(EmShortCutKeyFuc value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmShortCutKeyFuc_descriptor(), value);
}
inline bool EmShortCutKeyFuc_Parse(
    const ::std::string& name, EmShortCutKeyFuc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmShortCutKeyFuc>(
    EmShortCutKeyFuc_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace mt

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHintCode>() {
  return ::mt::EmHintCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmStackInitFailReason>() {
  return ::mt::EmStackInitFailReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmKdvMtModel>() {
  return ::mt::EmKdvMtModel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtModel>() {
  return ::mt::EmMtModel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmConfProtocol>() {
  return ::mt::EmConfProtocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCodecComponent>() {
  return ::mt::EmCodecComponent_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCodecComponentIndex>() {
  return ::mt::EmCodecComponentIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVidFormat>() {
  return ::mt::EmVidFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAudFormat>() {
  return ::mt::EmAudFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmEncodeMode>() {
  return ::mt::EmEncodeMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmTermSwitchMode>() {
  return ::mt::EmTermSwitchMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtResolution>() {
  return ::mt::EmMtResolution_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVidPort>() {
  return ::mt::EmVidPort_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAudPort>() {
  return ::mt::EmAudPort_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmLostPackStrategy>() {
  return ::mt::EmLostPackStrategy_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmIpAddrType>() {
  return ::mt::EmIpAddrType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmStopBits>() {
  return ::mt::EmStopBits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmParityCheck>() {
  return ::mt::EmParityCheck_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSerialType>() {
  return ::mt::EmSerialType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDisplayRatio>() {
  return ::mt::EmDisplayRatio_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAnswerMode>() {
  return ::mt::EmAnswerMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmH264AdditionalModes>() {
  return ::mt::EmH264AdditionalModes_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmH264Profile>() {
  return ::mt::EmH264Profile_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmH265Profile>() {
  return ::mt::EmH265Profile_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDirection>() {
  return ::mt::EmDirection_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmFeccPTFZRequest>() {
  return ::mt::EmFeccPTFZRequest_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmFeccAction>() {
  return ::mt::EmFeccAction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmFeccCMEMsgType>() {
  return ::mt::EmFeccCMEMsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtSysStartMod>() {
  return ::mt::EmMtSysStartMod_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtSysStartModFromUI>() {
  return ::mt::EmMtSysStartModFromUI_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtSysSrvState>() {
  return ::mt::EmMtSysSrvState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtSysKeepLiveState>() {
  return ::mt::EmMtSysKeepLiveState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtChanType>() {
  return ::mt::EmMtChanType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtAssStreamType>() {
  return ::mt::EmMtAssStreamType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtVidLabel>() {
  return ::mt::EmMtVidLabel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtAudLabel>() {
  return ::mt::EmMtAudLabel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtConfType>() {
  return ::mt::EmMtConfType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtMediaType>() {
  return ::mt::EmMtMediaType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMediaModeDef>() {
  return ::mt::EmMediaModeDef_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSite>() {
  return ::mt::EmSite_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtMediaDirection>() {
  return ::mt::EmMtMediaDirection_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAacChnlNum>() {
  return ::mt::EmAacChnlNum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAacSampFreq>() {
  return ::mt::EmAacSampFreq_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtChanState>() {
  return ::mt::EmMtChanState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtCallingType>() {
  return ::mt::EmMtCallingType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtCallState>() {
  return ::mt::EmMtCallState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmH323ChanState>() {
  return ::mt::EmH323ChanState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmH323CallState>() {
  return ::mt::EmH323CallState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmEndpointType>() {
  return ::mt::EmEndpointType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSMSType>() {
  return ::mt::EmSMSType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRollMsgSpeed>() {
  return ::mt::EmRollMsgSpeed_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtVideoPort>() {
  return ::mt::EmMtVideoPort_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtJoinCreateConfRsp>() {
  return ::mt::EmMtJoinCreateConfRsp_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtConfDetailErr>() {
  return ::mt::EmMtConfDetailErr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtDualMode>() {
  return ::mt::EmMtDualMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtPollModeDef>() {
  return ::mt::EmMtPollModeDef_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtPairTalkOperationType>() {
  return ::mt::EmMtPairTalkOperationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtCallMode>() {
  return ::mt::EmMtCallMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtConfMode>() {
  return ::mt::EmMtConfMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtLogChnnlType>() {
  return ::mt::EmMtLogChnnlType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtMcu2MtNtfMsgType>() {
  return ::mt::EmMtMcu2MtNtfMsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmGetListRspErr>() {
  return ::mt::EmGetListRspErr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmConfSpecial>() {
  return ::mt::EmConfSpecial_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmConfListType>() {
  return ::mt::EmConfListType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtClarity>() {
  return ::mt::EmMtClarity_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtType>() {
  return ::mt::EmMtType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtAddrType>() {
  return ::mt::EmMtAddrType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtModifyConfInfoType>() {
  return ::mt::EmMtModifyConfInfoType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtConfFailureReason>() {
  return ::mt::EmMtConfFailureReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtConfReleaseModeDef>() {
  return ::mt::EmMtConfReleaseModeDef_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtAliasType>() {
  return ::mt::EmMtAliasType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtOpenMode>() {
  return ::mt::EmMtOpenMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtVmpMode>() {
  return ::mt::EmMtVmpMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtMixType>() {
  return ::mt::EmMtMixType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtCallDisReason>() {
  return ::mt::EmMtCallDisReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmUnRegFailedReason>() {
  return ::mt::EmUnRegFailedReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRegFailedReason>() {
  return ::mt::EmRegFailedReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmEncryptArithmetic>() {
  return ::mt::EmEncryptArithmetic_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtVmpStyle>() {
  return ::mt::EmMtVmpStyle_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtMemberStatusDef>() {
  return ::mt::EmMtMemberStatusDef_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtVMPMmbType>() {
  return ::mt::EmMtVMPMmbType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAction>() {
  return ::mt::EmAction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmFileSys>() {
  return ::mt::EmFileSys_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmQoS>() {
  return ::mt::EmQoS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmTOS>() {
  return ::mt::EmTOS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCodecEvent>() {
  return ::mt::EmCodecEvent_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtcType>() {
  return ::mt::EmMtcType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtSleepState>() {
  return ::mt::EmMtSleepState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtPortType>() {
  return ::mt::EmMtPortType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmLabelType>() {
  return ::mt::EmLabelType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmLabelPosType>() {
  return ::mt::EmLabelPosType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDualVideoShowMode>() {
  return ::mt::EmDualVideoShowMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPiPMode>() {
  return ::mt::EmPiPMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDisplayDeviceType>() {
  return ::mt::EmDisplayDeviceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmOsdScreenMode>() {
  return ::mt::EmOsdScreenMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtRing>() {
  return ::mt::EmMtRing_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtPathType>() {
  return ::mt::EmMtPathType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtOnlineState>() {
  return ::mt::EmMtOnlineState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtImTerminalType>() {
  return ::mt::EmMtImTerminalType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtFile>() {
  return ::mt::EmMtFile_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EImDeclineReason>() {
  return ::mt::EImDeclineReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EImCharState>() {
  return ::mt::EImCharState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtMemberType>() {
  return ::mt::EmMtMemberType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtMultiChatType>() {
  return ::mt::EmMtMultiChatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRestMeetingNotifyType>() {
  return ::mt::EmRestMeetingNotifyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtOperateUserInfo>() {
  return ::mt::EmMtOperateUserInfo_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmH323SrvType>() {
  return ::mt::EmH323SrvType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSipSrvType>() {
  return ::mt::EmSipSrvType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::APIType>() {
  return ::mt::APIType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmChatType>() {
  return ::mt::EmChatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRtspStatus>() {
  return ::mt::EmRtspStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmServerAddrType>() {
  return ::mt::EmServerAddrType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVMeetingVideoModel>() {
  return ::mt::EmVMeetingVideoModel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDesktopShareLimit>() {
  return ::mt::EmDesktopShareLimit_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVMeetingMode>() {
  return ::mt::EmVMeetingMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCallDuration>() {
  return ::mt::EmCallDuration_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmNetType>() {
  return ::mt::EmNetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmUpgradeVerLevel>() {
  return ::mt::EmUpgradeVerLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmUpgradeReleaseAttr>() {
  return ::mt::EmUpgradeReleaseAttr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtPortrait>() {
  return ::mt::EmMtPortrait_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMCMode>() {
  return ::mt::EmMCMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmServerType>() {
  return ::mt::EmServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmServerState>() {
  return ::mt::EmServerState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtCallRecordType>() {
  return ::mt::EmMtCallRecordType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtCallType>() {
  return ::mt::EmMtCallType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtRecordErr>() {
  return ::mt::EmMtRecordErr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtRecordSearchType>() {
  return ::mt::EmMtRecordSearchType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtAudPrecedenceLevel>() {
  return ::mt::EmMtAudPrecedenceLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAlarmLevel>() {
  return ::mt::EmAlarmLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAlarmState>() {
  return ::mt::EmAlarmState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAlarmCode>() {
  return ::mt::EmAlarmCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDLProtocol>() {
  return ::mt::EmDLProtocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAuthenticationType>() {
  return ::mt::EmAuthenticationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmApsLoginErrcode>() {
  return ::mt::EmApsLoginErrcode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPortType>() {
  return ::mt::EmPortType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVideoType>() {
  return ::mt::EmVideoType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVideoOutPutMode>() {
  return ::mt::EmVideoOutPutMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmTextAlign>() {
  return ::mt::EmTextAlign_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRollMode>() {
  return ::mt::EmRollMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRollSpeed>() {
  return ::mt::EmRollSpeed_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDAudPortIn>() {
  return ::mt::EmHDAudPortIn_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDAudPortOut>() {
  return ::mt::EmHDAudPortOut_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDMultiVideoSwitch>() {
  return ::mt::EmHDMultiVideoSwitch_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDMultiViewMP>() {
  return ::mt::EmHDMultiViewMP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDVideoPortMode>() {
  return ::mt::EmHDVideoPortMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDVideoOutPortType>() {
  return ::mt::EmHDVideoOutPortType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDVideoSourceType>() {
  return ::mt::EmHDVideoSourceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDLastDisplay>() {
  return ::mt::EmHDLastDisplay_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDImageNoise>() {
  return ::mt::EmHDImageNoise_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDImageDeformationTensile>() {
  return ::mt::EmHDImageDeformationTensile_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmEthnetWorkMode>() {
  return ::mt::EmEthnetWorkMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmEthInterfaceMode>() {
  return ::mt::EmEthInterfaceMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmEthStartupResult>() {
  return ::mt::EmEthStartupResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPPPoELinkState>() {
  return ::mt::EmPPPoELinkState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPPPoELinkErrReason>() {
  return ::mt::EmPPPoELinkErrReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWifiWorkMode>() {
  return ::mt::EmWifiWorkMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWifiKeyType>() {
  return ::mt::EmWifiKeyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWifiSignalLevel>() {
  return ::mt::EmWifiSignalLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWifiLinkState>() {
  return ::mt::EmWifiLinkState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWifiLinkErrReason>() {
  return ::mt::EmWifiLinkErrReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWifiApKeyType>() {
  return ::mt::EmWifiApKeyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWifiFrequencyBandType>() {
  return ::mt::EmWifiFrequencyBandType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMobileDataLinkState>() {
  return ::mt::EmMobileDataLinkState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMobileDataLinkErrReason>() {
  return ::mt::EmMobileDataLinkErrReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMobileDataSignalLevel>() {
  return ::mt::EmMobileDataSignalLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmNetAdapterWorkType>() {
  return ::mt::EmNetAdapterWorkType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMobileDataNetType>() {
  return ::mt::EmMobileDataNetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMobileDataNetGenerationType>() {
  return ::mt::EmMobileDataNetGenerationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmEthnetParamType>() {
  return ::mt::EmEthnetParamType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmE1InterfaceType>() {
  return ::mt::EmE1InterfaceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmE1ClockType>() {
  return ::mt::EmE1ClockType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmE1ChainOptType>() {
  return ::mt::EmE1ChainOptType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmE1LinkErrReason>() {
  return ::mt::EmE1LinkErrReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPingErrcode>() {
  return ::mt::EmPingErrcode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmUpgradeType>() {
  return ::mt::EmUpgradeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmUpgradeNotify>() {
  return ::mt::EmUpgradeNotify_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmNetConflictType>() {
  return ::mt::EmNetConflictType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmHDMicGain>() {
  return ::mt::EmHDMicGain_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPPPoEDialMode>() {
  return ::mt::EmPPPoEDialMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmEquipmentUpgrading>() {
  return ::mt::EmEquipmentUpgrading_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmUartNum>() {
  return ::mt::EmUartNum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPicFormat>() {
  return ::mt::EmPicFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmImgParam>() {
  return ::mt::EmImgParam_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmFxoState>() {
  return ::mt::EmFxoState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSdiInOut>() {
  return ::mt::EmSdiInOut_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMsgFromSource>() {
  return ::mt::EmMsgFromSource_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmNmsLoginResult>() {
  return ::mt::EmNmsLoginResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmTimeZone>() {
  return ::mt::EmTimeZone_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtSmoothSendLevel>() {
  return ::mt::EmMtSmoothSendLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRestDualMode>() {
  return ::mt::EmRestDualMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRestMeetingSafeType>() {
  return ::mt::EmRestMeetingSafeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRestVideoQuality>() {
  return ::mt::EmRestVideoQuality_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRestCascadeMode>() {
  return ::mt::EmRestCascadeMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRemoteType>() {
  return ::mt::EmRemoteType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRemoteScanCode>() {
  return ::mt::EmRemoteScanCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmParticipantResponse>() {
  return ::mt::EmParticipantResponse_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmClosedMeeting>() {
  return ::mt::EmClosedMeeting_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCameraSpeed>() {
  return ::mt::EmCameraSpeed_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCameraView>() {
  return ::mt::EmCameraView_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRestNotifyType>() {
  return ::mt::EmRestNotifyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVidRationStrategy>() {
  return ::mt::EmVidRationStrategy_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSystemFileType>() {
  return ::mt::EmSystemFileType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSaveJpegType>() {
  return ::mt::EmSaveJpegType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSleepFailReason>() {
  return ::mt::EmSleepFailReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmResizeMode>() {
  return ::mt::EmResizeMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmLocalSoundType>() {
  return ::mt::EmLocalSoundType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmLocalSoundIndex>() {
  return ::mt::EmLocalSoundIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmFileCopyErr>() {
  return ::mt::EmFileCopyErr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMicDevId>() {
  return ::mt::EmMicDevId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmTemplateAccoutType>() {
  return ::mt::EmTemplateAccoutType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPingUserId>() {
  return ::mt::EmPingUserId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMicUpgradeState>() {
  return ::mt::EmMicUpgradeState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAudioDelayCheckState>() {
  return ::mt::EmAudioDelayCheckState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCameraUpgradeErrCode>() {
  return ::mt::EmCameraUpgradeErrCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmUpgradeExitErrCode>() {
  return ::mt::EmUpgradeExitErrCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmGeneralLevel>() {
  return ::mt::EmGeneralLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmISO>() {
  return ::mt::EmISO_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmExposureMode>() {
  return ::mt::EmExposureMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAperture>() {
  return ::mt::EmAperture_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmShutterType>() {
  return ::mt::EmShutterType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmShutterLevel>() {
  return ::mt::EmShutterLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWBAMode>() {
  return ::mt::EmWBAMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EMWBAModeGainType>() {
  return ::mt::EMWBAModeGainType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSceneMode>() {
  return ::mt::EmSceneMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmNFType>() {
  return ::mt::EmNFType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmNFMode>() {
  return ::mt::EmNFMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmBrightnessDirection>() {
  return ::mt::EmBrightnessDirection_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmIspImgInf>() {
  return ::mt::EmIspImgInf_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmExposureModeGainType>() {
  return ::mt::EmExposureModeGainType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmExposureModeGainRestrict>() {
  return ::mt::EmExposureModeGainRestrict_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmFocusMode>() {
  return ::mt::EmFocusMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmImgMode>() {
  return ::mt::EmImgMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmIspActionType>() {
  return ::mt::EmIspActionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCameraVidStd>() {
  return ::mt::EmCameraVidStd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmFilpType>() {
  return ::mt::EmFilpType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVmpMode>() {
  return ::mt::EmVmpMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPollMode>() {
  return ::mt::EmPollMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmStreamNumber>() {
  return ::mt::EmStreamNumber_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCtrlType>() {
  return ::mt::EmCtrlType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVideoRecordErrorNum>() {
  return ::mt::EmVideoRecordErrorNum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmKeyState>() {
  return ::mt::EmKeyState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVideoRecordStatus>() {
  return ::mt::EmVideoRecordStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWirelessScreenState>() {
  return ::mt::EmWirelessScreenState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWirelessScreenErrReason>() {
  return ::mt::EmWirelessScreenErrReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtWarnType>() {
  return ::mt::EmMtWarnType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmLimitedIpType>() {
  return ::mt::EmLimitedIpType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmTerControlCameraOsdType>() {
  return ::mt::EmTerControlCameraOsdType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDigestType>() {
  return ::mt::EmDigestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPubPriType>() {
  return ::mt::EmPubPriType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSrtpCryptoType>() {
  return ::mt::EmSrtpCryptoType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSrtpAuthType>() {
  return ::mt::EmSrtpAuthType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSipConnectType>() {
  return ::mt::EmSipConnectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSecCertFormat>() {
  return ::mt::EmSecCertFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRecordType>() {
  return ::mt::EmRecordType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPublishMode>() {
  return ::mt::EmPublishMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRecordMode>() {
  return ::mt::EmRecordMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCallMode>() {
  return ::mt::EmCallMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRecordState>() {
  return ::mt::EmRecordState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmRecordCmd>() {
  return ::mt::EmRecordCmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtDcsType>() {
  return ::mt::EmMtDcsType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtDcsRole>() {
  return ::mt::EmMtDcsRole_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtDcsConfMode>() {
  return ::mt::EmMtDcsConfMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtDcsConfType>() {
  return ::mt::EmMtDcsConfType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtDcsWbMode>() {
  return ::mt::EmMtDcsWbMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWbEntityType>() {
  return ::mt::EmWbEntityType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWbImageState>() {
  return ::mt::EmWbImageState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmWBMode>() {
  return ::mt::EmWBMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDcsConnectType>() {
  return ::mt::EmDcsConnectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDcsOper>() {
  return ::mt::EmDcsOper_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDcsConnectErrCode>() {
  return ::mt::EmDcsConnectErrCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmDcsAdpRejectJoinConfCode>() {
  return ::mt::EmDcsAdpRejectJoinConfCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSecAutState>() {
  return ::mt::EmSecAutState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAuthCancelReason>() {
  return ::mt::EmAuthCancelReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmSecKeyUpdateMode>() {
  return ::mt::EmSecKeyUpdateMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCameraCtrlType>() {
  return ::mt::EmCameraCtrlType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVersionType>() {
  return ::mt::EmVersionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmLicenseKeyCheckValue>() {
  return ::mt::EmLicenseKeyCheckValue_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCameraErrorType>() {
  return ::mt::EmCameraErrorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmCameraSceneMode>() {
  return ::mt::EmCameraSceneMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtVConfStatus>() {
  return ::mt::EmMtVConfStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtMaxJoinMt>() {
  return ::mt::EmMtMaxJoinMt_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtVConfResources>() {
  return ::mt::EmMtVConfResources_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtFecMode>() {
  return ::mt::EmMtFecMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmPlatform>() {
  return ::mt::EmPlatform_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmMtChipType>() {
  return ::mt::EmMtChipType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmClientAppType>() {
  return ::mt::EmClientAppType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAuthType>() {
  return ::mt::EmAuthType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmLoginFailReason>() {
  return ::mt::EmLoginFailReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmVConfCreateType>() {
  return ::mt::EmVConfCreateType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmQkState>() {
  return ::mt::EmQkState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmResourceType>() {
  return ::mt::EmResourceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAgentPackFileState>() {
  return ::mt::EmAgentPackFileState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAiAudioType>() {
  return ::mt::EmAiAudioType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAiActionState>() {
  return ::mt::EmAiActionState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmAiContactType>() {
  return ::mt::EmAiContactType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmShortCutKeyType>() {
  return ::mt::EmShortCutKeyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mt::EmShortCutKeyFuc>() {
  return ::mt::EmShortCutKeyFuc_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_enum_2eproto__INCLUDED
