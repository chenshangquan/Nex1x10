#ifndef KDVIPDT__H__
#define KDVIPDT__H__

#include <stddef.h>
#include "kdvtype.h"

//////////////////////////////////////////////////////////////////////////
// 常量定义
//////////////////////////////////////////////////////////////////////////

#if defined(_LINUX_)
#define DEFAULT_KDVIPDT_CFG		"/usr/bin/kdvipdt.ini"
#else
#define DEFAULT_KDVIPDT_CFG		"conf\\kdvipdt.ini"
#endif

#define DEVTYPE_STR_LEN                    64      //设备类型字符串最大长度

const s8 kdvipdtSecDev[] = "Dev";
const s8 kdvipdtKeyAliase[] =  "Alias";//此字段必须使用UTF-8编码
const s8 kdvipdtKeyType[] =  "Type";// kdv1000:1;cps:2;aps:3;mps:4;caps:5;maps:6;camps:7

const u16 KDT_PID_USELESS = 0;//非法值
const u16 KDT_PID_KDV1000 = 0x01;
const u16 KDT_PID_CPS = 0x02;
const u16 KDT_PID_APS = 0x03;
const u16 KDT_PID_MPS = 0x04;
const u16 KDT_PID_CAPS = 0x05;
const u16 KDT_PID_MAPS = 0x06;
const u16 KDT_PID_CAMPS = 0x07;

#if defined(_LINUX_)
typedef BOOL32 (*pfKDTSetRoute)( u32 dwIP );
typedef u32 (*pfKDTGetRoute)();
#endif

/********************************************************************************
注意:
1、pMtAlias是输出参数，需要在回调函数中将别名拷贝到此地址
2、如果pMtAlias != null 则将别名返回给detector 
3、别名长度最大为64字节，采用UTF-8编码
4、如果不注册此回调函数将默认从配置文件kdvipdt.ini中获取别名
*********************************************************************************/
typedef BOOL32 (*pfKDTSetAliasAndType)( s8* pchDevAlias, s8* pchDevType );

//////////////////////////////////////////////////////////////////////////
// 函数声明
//////////////////////////////////////////////////////////////////////////

/*====================================================================
函	 数   名: KDTStart
功	      能: 设备搜索业务启动函数
算 法 实  现: 
引用全局变量: 无
输入参数说明: dwProductId - 设备产品号
返   回   值: 成功 - TRUE
			  失败 - FALSE
====================================================================*/
BOOL32 KDTStart( u32 dwProductId , s8* achCfgPath=NULL );
#if defined(_LINUX_)
/*====================================================================
函	 数   名: KDTRegSetRouteCallback
功	      能: 注册修改路由回调函数
算 法 实  现: 
引用全局变量: 无
输入参数说明: pfKDTSetRouteCallback - 回调函数结构指针
返   回   值: 成功 - TRUE
			  失败 - FALSE
====================================================================*/
BOOL32 KDTRegSetRouteCallback( pfKDTSetRoute pfKDTSetRouteCallback);

/*====================================================================
函	 数   名: KDTRegGetRouteCallback
功	      能: 注册获取路由回调函数
算 法 实  现: 
引用全局变量: 无
输入参数说明: pfKDTGetRouteCallback - 回调函数结构指针
返   回   值: 成功 - TRUE
			  失败 - FALSE
====================================================================*/
BOOL32 KDTRegGetRouteCallback( pfKDTGetRoute pfKDTGetRouteCallback);
#endif

/*====================================================================
函	 数   名: KDTRegSetAliasAndTypeCallback
功	      能: 注册设备搜索工具设置终端别名和设备类型的回调函数
算 法 实  现: 
引用全局变量: 无
输入参数说明: KDTRegSetAliasAndTypeCallback - 别名设置回调函数指针
返   回   值: 成功 - TRUE
			  失败 - FALSE
====================================================================*/
BOOL32 KDTRegSetAliasAndTypeCallback( pfKDTSetAliasAndType KDTRegSetAliasAndTypeCallback );

/*=============================================================================
函   数  名：AddPermitIP
功       能：添加允许通信的IP  地址
注	     意：
算 法 实 现：
全 局 变 量：g_adwPermitIP
参	     数：dwIP IP地址
返   回  值：BOOL32   TRUE:添加成功FALSE:由于添加的IP 地址数量已经达到最大导致添加失败
-------------------------------------------------------------------------------
修改纪录：
日		期	版本  修改人  修改内容
2013/04/18	      李平付    创建
=============================================================================*/
BOOL32 AddPermitIP( u32 dwIP );

/*=============================================================================
函   数  名：DeletePermitIP
功	     能：删除允许通信的IP  地址
注	     意：
算 法 实 现：
全 局 变 量：g_adwPermitIP
参	     数：dwIP IP地址
返   回  值：void
-------------------------------------------------------------------------------
修改纪录：
日		期	版本  修改人  修改内容
2013/04/18	      李平付    创建
=============================================================================*/
void DeletePermitIP( u32 dwIP );

/*=============================================================================
函   数  名：ClearPermitIP
功	     能：清除所有允许通信的IP  地址
注	     意：
算 法 实 现：
全 局 变 量：g_adwPermitIP
参	     数：无
返   回  值：void
-------------------------------------------------------------------------------
修改纪录：
日		期	版本  修改人  修改内容
2013/04/18	      李平付    创建
=============================================================================*/
void ClearPermitIP();

/*=============================================================================
函   数  名：CheckIPPermit
功       能：删除允许通信的IP  地址
注       意：
算 法 实 现：
全 局 变 量：g_adwPermitIP
参       数：dwIP IP地址
返   回  值：BOOL32   TRUE:此IP在列表中已经存在FALSE:此IP地址在列表中不存在
-------------------------------------------------------------------------------
修改纪录：
日		期	版本  修改人  修改内容
2013/04/18	      李平付    创建
=============================================================================*/
BOOL32 CheckIPPermit( u32 dwIP );
/*=============================================================================
函   数  名：GetPermitIP
功	     能：获取允许通信的IP  地址列表
注	     意：
算 法 实 现：
全 局 变 量：g_adwPermitIP
参	     数：nIPList  IP地址列表，作为输出参数存储IP地址
			 nIPNum  是nIPList实际能够存储的IP数量
返   回  值：s32 允许通信的IP地址数量
-------------------------------------------------------------------------------
修改纪录：
日		期	版本  修改人  修改内容
2013/04/18	      李平付    创建
=============================================================================*/
s32 GetPermitIP( s32* nIPList, s32 nIPNum );
#endif // KDVIPDT__H__
