// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvstructnet.proto

#ifndef PROTOBUF_nvstructnet_2eproto__INCLUDED
#define PROTOBUF_nvstructnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "nvenum.pb.h"
#include "nvstructcommon.pb.h"
// @@protoc_insertion_point(includes)

namespace nv {

// Internal implementation detail -- do not call these.
void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
void protobuf_AssignDesc_nvstructnet_2eproto();
void protobuf_ShutdownFile_nvstructnet_2eproto();

class TNVNetUsedInfo;
class TNVDfParam;
class TNVDfClientParam;
class TNVPingResult;
class TNVPingCmdOption;
class TNVPingTestParam;
class TEthnetInterfaceParam;
class TEthnetInterfaceParamList;
class TDNSParam;
class TDHCPLeaseInfo;
class TDHCPStateInfo;

// ===================================================================

class MTMSG_API TNVNetUsedInfo : public ::google::protobuf::Message {
 public:
  TNVNetUsedInfo();
  virtual ~TNVNetUsedInfo();

  TNVNetUsedInfo(const TNVNetUsedInfo& from);

  inline TNVNetUsedInfo& operator=(const TNVNetUsedInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNVNetUsedInfo& default_instance();

  void Swap(TNVNetUsedInfo* other);

  // implements Message ----------------------------------------------

  TNVNetUsedInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNVNetUsedInfo& from);
  void MergeFrom(const TNVNetUsedInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nv.EmNvNetAdapterWorkType used_type = 1;
  inline bool has_used_type() const;
  inline void clear_used_type();
  static const int kUsedTypeFieldNumber = 1;
  inline ::nv::EmNvNetAdapterWorkType used_type() const;
  inline void set_used_type(::nv::EmNvNetAdapterWorkType value);

  // optional uint32 ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // optional uint32 mask = 3;
  inline bool has_mask() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 3;
  inline ::google::protobuf::uint32 mask() const;
  inline void set_mask(::google::protobuf::uint32 value);

  // optional uint32 gateway_ip = 4;
  inline bool has_gateway_ip() const;
  inline void clear_gateway_ip();
  static const int kGatewayIpFieldNumber = 4;
  inline ::google::protobuf::uint32 gateway_ip() const;
  inline void set_gateway_ip(::google::protobuf::uint32 value);

  // optional uint32 dns = 5;
  inline bool has_dns() const;
  inline void clear_dns();
  static const int kDnsFieldNumber = 5;
  inline ::google::protobuf::uint32 dns() const;
  inline void set_dns(::google::protobuf::uint32 value);

  // optional uint32 dns_backup = 6;
  inline bool has_dns_backup() const;
  inline void clear_dns_backup();
  static const int kDnsBackupFieldNumber = 6;
  inline ::google::protobuf::uint32 dns_backup() const;
  inline void set_dns_backup(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nv.TNVNetUsedInfo)
 private:
  inline void set_has_used_type();
  inline void clear_has_used_type();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_mask();
  inline void clear_has_mask();
  inline void set_has_gateway_ip();
  inline void clear_has_gateway_ip();
  inline void set_has_dns();
  inline void clear_has_dns();
  inline void set_has_dns_backup();
  inline void clear_has_dns_backup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int used_type_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 mask_;
  ::google::protobuf::uint32 gateway_ip_;
  ::google::protobuf::uint32 dns_;
  ::google::protobuf::uint32 dns_backup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TNVNetUsedInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TNVDfParam : public ::google::protobuf::Message {
 public:
  TNVDfParam();
  virtual ~TNVDfParam();

  TNVDfParam(const TNVDfParam& from);

  inline TNVDfParam& operator=(const TNVDfParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNVDfParam& default_instance();

  void Swap(TNVDfParam* other);

  // implements Message ----------------------------------------------

  TNVDfParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNVDfParam& from);
  void MergeFrom(const TNVDfParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string versionid = 1;
  inline bool has_versionid() const;
  inline void clear_versionid();
  static const int kVersionidFieldNumber = 1;
  inline const ::std::string& versionid() const;
  inline void set_versionid(const ::std::string& value);
  inline void set_versionid(const char* value);
  inline void set_versionid(const char* value, size_t size);
  inline ::std::string* mutable_versionid();
  inline ::std::string* release_versionid();
  inline void set_allocated_versionid(::std::string* versionid);

  // optional string productid = 2;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductidFieldNumber = 2;
  inline const ::std::string& productid() const;
  inline void set_productid(const ::std::string& value);
  inline void set_productid(const char* value);
  inline void set_productid(const char* value, size_t size);
  inline ::std::string* mutable_productid();
  inline ::std::string* release_productid();
  inline void set_allocated_productid(::std::string* productid);

  // optional string devieip = 3;
  inline bool has_devieip() const;
  inline void clear_devieip();
  static const int kDevieipFieldNumber = 3;
  inline const ::std::string& devieip() const;
  inline void set_devieip(const ::std::string& value);
  inline void set_devieip(const char* value);
  inline void set_devieip(const char* value, size_t size);
  inline ::std::string* mutable_devieip();
  inline ::std::string* release_devieip();
  inline void set_allocated_devieip(::std::string* devieip);

  // @@protoc_insertion_point(class_scope:nv.TNVDfParam)
 private:
  inline void set_has_versionid();
  inline void clear_has_versionid();
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_devieip();
  inline void clear_has_devieip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* versionid_;
  ::std::string* productid_;
  ::std::string* devieip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TNVDfParam* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TNVDfClientParam : public ::google::protobuf::Message {
 public:
  TNVDfClientParam();
  virtual ~TNVDfClientParam();

  TNVDfClientParam(const TNVDfClientParam& from);

  inline TNVDfClientParam& operator=(const TNVDfClientParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNVDfClientParam& default_instance();

  void Swap(TNVDfClientParam* other);

  // implements Message ----------------------------------------------

  TNVDfClientParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNVDfClientParam& from);
  void MergeFrom(const TNVDfClientParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string versionid = 1;
  inline bool has_versionid() const;
  inline void clear_versionid();
  static const int kVersionidFieldNumber = 1;
  inline const ::std::string& versionid() const;
  inline void set_versionid(const ::std::string& value);
  inline void set_versionid(const char* value);
  inline void set_versionid(const char* value, size_t size);
  inline ::std::string* mutable_versionid();
  inline ::std::string* release_versionid();
  inline void set_allocated_versionid(::std::string* versionid);

  // optional string productid = 2;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductidFieldNumber = 2;
  inline const ::std::string& productid() const;
  inline void set_productid(const ::std::string& value);
  inline void set_productid(const char* value);
  inline void set_productid(const char* value, size_t size);
  inline ::std::string* mutable_productid();
  inline ::std::string* release_productid();
  inline void set_allocated_productid(::std::string* productid);

  // repeated string tagproductid = 4;
  inline int tagproductid_size() const;
  inline void clear_tagproductid();
  static const int kTagproductidFieldNumber = 4;
  inline const ::std::string& tagproductid(int index) const;
  inline ::std::string* mutable_tagproductid(int index);
  inline void set_tagproductid(int index, const ::std::string& value);
  inline void set_tagproductid(int index, const char* value);
  inline void set_tagproductid(int index, const char* value, size_t size);
  inline ::std::string* add_tagproductid();
  inline void add_tagproductid(const ::std::string& value);
  inline void add_tagproductid(const char* value);
  inline void add_tagproductid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tagproductid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tagproductid();

  // optional string ifr_name = 5;
  inline bool has_ifr_name() const;
  inline void clear_ifr_name();
  static const int kIfrNameFieldNumber = 5;
  inline const ::std::string& ifr_name() const;
  inline void set_ifr_name(const ::std::string& value);
  inline void set_ifr_name(const char* value);
  inline void set_ifr_name(const char* value, size_t size);
  inline ::std::string* mutable_ifr_name();
  inline ::std::string* release_ifr_name();
  inline void set_allocated_ifr_name(::std::string* ifr_name);

  // @@protoc_insertion_point(class_scope:nv.TNVDfClientParam)
 private:
  inline void set_has_versionid();
  inline void clear_has_versionid();
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_ifr_name();
  inline void clear_has_ifr_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* versionid_;
  ::std::string* productid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tagproductid_;
  ::std::string* ifr_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TNVDfClientParam* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TNVPingResult : public ::google::protobuf::Message {
 public:
  TNVPingResult();
  virtual ~TNVPingResult();

  TNVPingResult(const TNVPingResult& from);

  inline TNVPingResult& operator=(const TNVPingResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNVPingResult& default_instance();

  void Swap(TNVPingResult* other);

  // implements Message ----------------------------------------------

  TNVPingResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNVPingResult& from);
  void MergeFrom(const TNVPingResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nv.EmNvPingErrcode ping_errcode = 1;
  inline bool has_ping_errcode() const;
  inline void clear_ping_errcode();
  static const int kPingErrcodeFieldNumber = 1;
  inline ::nv::EmNvPingErrcode ping_errcode() const;
  inline void set_ping_errcode(::nv::EmNvPingErrcode value);

  // optional uint32 ttl = 2;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 2;
  inline ::google::protobuf::uint32 ttl() const;
  inline void set_ttl(::google::protobuf::uint32 value);

  // optional uint32 trip_time = 3;
  inline bool has_trip_time() const;
  inline void clear_trip_time();
  static const int kTripTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 trip_time() const;
  inline void set_trip_time(::google::protobuf::uint32 value);

  // optional uint32 userid = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 4;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // optional uint32 error_type = 5;
  inline bool has_error_type() const;
  inline void clear_error_type();
  static const int kErrorTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 error_type() const;
  inline void set_error_type(::google::protobuf::uint32 value);

  // optional uint32 error_code = 6;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nv.TNVPingResult)
 private:
  inline void set_has_ping_errcode();
  inline void clear_has_ping_errcode();
  inline void set_has_ttl();
  inline void clear_has_ttl();
  inline void set_has_trip_time();
  inline void clear_has_trip_time();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_error_type();
  inline void clear_has_error_type();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ping_errcode_;
  ::google::protobuf::uint32 ttl_;
  ::google::protobuf::uint32 trip_time_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 error_type_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TNVPingResult* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TNVPingCmdOption : public ::google::protobuf::Message {
 public:
  TNVPingCmdOption();
  virtual ~TNVPingCmdOption();

  TNVPingCmdOption(const TNVPingCmdOption& from);

  inline TNVPingCmdOption& operator=(const TNVPingCmdOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNVPingCmdOption& default_instance();

  void Swap(TNVPingCmdOption* other);

  // implements Message ----------------------------------------------

  TNVPingCmdOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNVPingCmdOption& from);
  void MergeFrom(const TNVPingCmdOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 packagesize = 1;
  inline bool has_packagesize() const;
  inline void clear_packagesize();
  static const int kPackagesizeFieldNumber = 1;
  inline ::google::protobuf::uint32 packagesize() const;
  inline void set_packagesize(::google::protobuf::uint32 value);

  // optional uint32 timeout = 2;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  inline ::google::protobuf::uint32 timeout() const;
  inline void set_timeout(::google::protobuf::uint32 value);

  // optional uint32 ttl = 3;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 3;
  inline ::google::protobuf::uint32 ttl() const;
  inline void set_ttl(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nv.TNVPingCmdOption)
 private:
  inline void set_has_packagesize();
  inline void clear_has_packagesize();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_ttl();
  inline void clear_has_ttl();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 packagesize_;
  ::google::protobuf::uint32 timeout_;
  ::google::protobuf::uint32 ttl_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TNVPingCmdOption* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TNVPingTestParam : public ::google::protobuf::Message {
 public:
  TNVPingTestParam();
  virtual ~TNVPingTestParam();

  TNVPingTestParam(const TNVPingTestParam& from);

  inline TNVPingTestParam& operator=(const TNVPingTestParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNVPingTestParam& default_instance();

  void Swap(TNVPingTestParam* other);

  // implements Message ----------------------------------------------

  TNVPingTestParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNVPingTestParam& from);
  void MergeFrom(const TNVPingTestParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dst_info = 1;
  inline bool has_dst_info() const;
  inline void clear_dst_info();
  static const int kDstInfoFieldNumber = 1;
  inline const ::std::string& dst_info() const;
  inline void set_dst_info(const ::std::string& value);
  inline void set_dst_info(const char* value);
  inline void set_dst_info(const char* value, size_t size);
  inline ::std::string* mutable_dst_info();
  inline ::std::string* release_dst_info();
  inline void set_allocated_dst_info(::std::string* dst_info);

  // optional .nv.TNVPingCmdOption ping_option = 2;
  inline bool has_ping_option() const;
  inline void clear_ping_option();
  static const int kPingOptionFieldNumber = 2;
  inline const ::nv::TNVPingCmdOption& ping_option() const;
  inline ::nv::TNVPingCmdOption* mutable_ping_option();
  inline ::nv::TNVPingCmdOption* release_ping_option();
  inline void set_allocated_ping_option(::nv::TNVPingCmdOption* ping_option);

  // optional uint32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nv.TNVPingTestParam)
 private:
  inline void set_has_dst_info();
  inline void clear_has_dst_info();
  inline void set_has_ping_option();
  inline void clear_has_ping_option();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dst_info_;
  ::nv::TNVPingCmdOption* ping_option_;
  ::google::protobuf::uint32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TNVPingTestParam* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TEthnetInterfaceParam : public ::google::protobuf::Message {
 public:
  TEthnetInterfaceParam();
  virtual ~TEthnetInterfaceParam();

  TEthnetInterfaceParam(const TEthnetInterfaceParam& from);

  inline TEthnetInterfaceParam& operator=(const TEthnetInterfaceParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEthnetInterfaceParam& default_instance();

  void Swap(TEthnetInterfaceParam* other);

  // implements Message ----------------------------------------------

  TEthnetInterfaceParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEthnetInterfaceParam& from);
  void MergeFrom(const TEthnetInterfaceParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // optional uint32 mask = 2;
  inline bool has_mask() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 2;
  inline ::google::protobuf::uint32 mask() const;
  inline void set_mask(::google::protobuf::uint32 value);

  // optional string mac = 3;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 3;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // @@protoc_insertion_point(class_scope:nv.TEthnetInterfaceParam)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_mask();
  inline void clear_has_mask();
  inline void set_has_mac();
  inline void clear_has_mac();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 mask_;
  ::std::string* mac_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TEthnetInterfaceParam* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TEthnetInterfaceParamList : public ::google::protobuf::Message {
 public:
  TEthnetInterfaceParamList();
  virtual ~TEthnetInterfaceParamList();

  TEthnetInterfaceParamList(const TEthnetInterfaceParamList& from);

  inline TEthnetInterfaceParamList& operator=(const TEthnetInterfaceParamList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEthnetInterfaceParamList& default_instance();

  void Swap(TEthnetInterfaceParamList* other);

  // implements Message ----------------------------------------------

  TEthnetInterfaceParamList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEthnetInterfaceParamList& from);
  void MergeFrom(const TEthnetInterfaceParamList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nv.TEthnetInterfaceParam paramList = 1;
  inline int paramlist_size() const;
  inline void clear_paramlist();
  static const int kParamListFieldNumber = 1;
  inline const ::nv::TEthnetInterfaceParam& paramlist(int index) const;
  inline ::nv::TEthnetInterfaceParam* mutable_paramlist(int index);
  inline ::nv::TEthnetInterfaceParam* add_paramlist();
  inline const ::google::protobuf::RepeatedPtrField< ::nv::TEthnetInterfaceParam >&
      paramlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::nv::TEthnetInterfaceParam >*
      mutable_paramlist();

  // @@protoc_insertion_point(class_scope:nv.TEthnetInterfaceParamList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::nv::TEthnetInterfaceParam > paramlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TEthnetInterfaceParamList* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDNSParam : public ::google::protobuf::Message {
 public:
  TDNSParam();
  virtual ~TDNSParam();

  TDNSParam(const TDNSParam& from);

  inline TDNSParam& operator=(const TDNSParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDNSParam& default_instance();

  void Swap(TDNSParam* other);

  // implements Message ----------------------------------------------

  TDNSParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDNSParam& from);
  void MergeFrom(const TDNSParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 dnsList = 1;
  inline int dnslist_size() const;
  inline void clear_dnslist();
  static const int kDnsListFieldNumber = 1;
  inline ::google::protobuf::uint32 dnslist(int index) const;
  inline void set_dnslist(int index, ::google::protobuf::uint32 value);
  inline void add_dnslist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dnslist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dnslist();

  // optional bool auto = 2;
  inline bool has_auto_() const;
  inline void clear_auto_();
  static const int kAutoFieldNumber = 2;
  inline bool auto_() const;
  inline void set_auto_(bool value);

  // @@protoc_insertion_point(class_scope:nv.TDNSParam)
 private:
  inline void set_has_auto_();
  inline void clear_has_auto_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dnslist_;
  bool auto__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TDNSParam* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDHCPLeaseInfo : public ::google::protobuf::Message {
 public:
  TDHCPLeaseInfo();
  virtual ~TDHCPLeaseInfo();

  TDHCPLeaseInfo(const TDHCPLeaseInfo& from);

  inline TDHCPLeaseInfo& operator=(const TDHCPLeaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDHCPLeaseInfo& default_instance();

  void Swap(TDHCPLeaseInfo* other);

  // implements Message ----------------------------------------------

  TDHCPLeaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDHCPLeaseInfo& from);
  void MergeFrom(const TDHCPLeaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ethernetid = 1;
  inline bool has_ethernetid() const;
  inline void clear_ethernetid();
  static const int kEthernetidFieldNumber = 1;
  inline ::google::protobuf::uint32 ethernetid() const;
  inline void set_ethernetid(::google::protobuf::uint32 value);

  // optional uint32 ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // optional uint32 mask = 3;
  inline bool has_mask() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 3;
  inline ::google::protobuf::uint32 mask() const;
  inline void set_mask(::google::protobuf::uint32 value);

  // optional uint32 gateway = 4;
  inline bool has_gateway() const;
  inline void clear_gateway();
  static const int kGatewayFieldNumber = 4;
  inline ::google::protobuf::uint32 gateway() const;
  inline void set_gateway(::google::protobuf::uint32 value);

  // optional uint32 duration = 5;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 5;
  inline ::google::protobuf::uint32 duration() const;
  inline void set_duration(::google::protobuf::uint32 value);

  // optional uint32 dnsnum = 6;
  inline bool has_dnsnum() const;
  inline void clear_dnsnum();
  static const int kDnsnumFieldNumber = 6;
  inline ::google::protobuf::uint32 dnsnum() const;
  inline void set_dnsnum(::google::protobuf::uint32 value);

  // repeated uint32 dns_server_list = 7;
  inline int dns_server_list_size() const;
  inline void clear_dns_server_list();
  static const int kDnsServerListFieldNumber = 7;
  inline ::google::protobuf::uint32 dns_server_list(int index) const;
  inline void set_dns_server_list(int index, ::google::protobuf::uint32 value);
  inline void add_dns_server_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dns_server_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dns_server_list();

  // @@protoc_insertion_point(class_scope:nv.TDHCPLeaseInfo)
 private:
  inline void set_has_ethernetid();
  inline void clear_has_ethernetid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_mask();
  inline void clear_has_mask();
  inline void set_has_gateway();
  inline void clear_has_gateway();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_dnsnum();
  inline void clear_has_dnsnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ethernetid_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 mask_;
  ::google::protobuf::uint32 gateway_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 dnsnum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dns_server_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TDHCPLeaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TDHCPStateInfo : public ::google::protobuf::Message {
 public:
  TDHCPStateInfo();
  virtual ~TDHCPStateInfo();

  TDHCPStateInfo(const TDHCPStateInfo& from);

  inline TDHCPStateInfo& operator=(const TDHCPStateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDHCPStateInfo& default_instance();

  void Swap(TDHCPStateInfo* other);

  // implements Message ----------------------------------------------

  TDHCPStateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDHCPStateInfo& from);
  void MergeFrom(const TDHCPStateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nv.TDHCPStateInfo)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_nvstructnet_2eproto();
  friend void protobuf_AssignDesc_nvstructnet_2eproto();
  friend void protobuf_ShutdownFile_nvstructnet_2eproto();

  void InitAsDefaultInstance();
  static TDHCPStateInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TNVNetUsedInfo

// optional .nv.EmNvNetAdapterWorkType used_type = 1;
inline bool TNVNetUsedInfo::has_used_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TNVNetUsedInfo::set_has_used_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TNVNetUsedInfo::clear_has_used_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TNVNetUsedInfo::clear_used_type() {
  used_type_ = 0;
  clear_has_used_type();
}
inline ::nv::EmNvNetAdapterWorkType TNVNetUsedInfo::used_type() const {
  return static_cast< ::nv::EmNvNetAdapterWorkType >(used_type_);
}
inline void TNVNetUsedInfo::set_used_type(::nv::EmNvNetAdapterWorkType value) {
  assert(::nv::EmNvNetAdapterWorkType_IsValid(value));
  set_has_used_type();
  used_type_ = value;
}

// optional uint32 ip = 2;
inline bool TNVNetUsedInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TNVNetUsedInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TNVNetUsedInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TNVNetUsedInfo::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 TNVNetUsedInfo::ip() const {
  return ip_;
}
inline void TNVNetUsedInfo::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
}

// optional uint32 mask = 3;
inline bool TNVNetUsedInfo::has_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TNVNetUsedInfo::set_has_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TNVNetUsedInfo::clear_has_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TNVNetUsedInfo::clear_mask() {
  mask_ = 0u;
  clear_has_mask();
}
inline ::google::protobuf::uint32 TNVNetUsedInfo::mask() const {
  return mask_;
}
inline void TNVNetUsedInfo::set_mask(::google::protobuf::uint32 value) {
  set_has_mask();
  mask_ = value;
}

// optional uint32 gateway_ip = 4;
inline bool TNVNetUsedInfo::has_gateway_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TNVNetUsedInfo::set_has_gateway_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TNVNetUsedInfo::clear_has_gateway_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TNVNetUsedInfo::clear_gateway_ip() {
  gateway_ip_ = 0u;
  clear_has_gateway_ip();
}
inline ::google::protobuf::uint32 TNVNetUsedInfo::gateway_ip() const {
  return gateway_ip_;
}
inline void TNVNetUsedInfo::set_gateway_ip(::google::protobuf::uint32 value) {
  set_has_gateway_ip();
  gateway_ip_ = value;
}

// optional uint32 dns = 5;
inline bool TNVNetUsedInfo::has_dns() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TNVNetUsedInfo::set_has_dns() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TNVNetUsedInfo::clear_has_dns() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TNVNetUsedInfo::clear_dns() {
  dns_ = 0u;
  clear_has_dns();
}
inline ::google::protobuf::uint32 TNVNetUsedInfo::dns() const {
  return dns_;
}
inline void TNVNetUsedInfo::set_dns(::google::protobuf::uint32 value) {
  set_has_dns();
  dns_ = value;
}

// optional uint32 dns_backup = 6;
inline bool TNVNetUsedInfo::has_dns_backup() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TNVNetUsedInfo::set_has_dns_backup() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TNVNetUsedInfo::clear_has_dns_backup() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TNVNetUsedInfo::clear_dns_backup() {
  dns_backup_ = 0u;
  clear_has_dns_backup();
}
inline ::google::protobuf::uint32 TNVNetUsedInfo::dns_backup() const {
  return dns_backup_;
}
inline void TNVNetUsedInfo::set_dns_backup(::google::protobuf::uint32 value) {
  set_has_dns_backup();
  dns_backup_ = value;
}

// -------------------------------------------------------------------

// TNVDfParam

// optional string versionid = 1;
inline bool TNVDfParam::has_versionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TNVDfParam::set_has_versionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TNVDfParam::clear_has_versionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TNVDfParam::clear_versionid() {
  if (versionid_ != &::google::protobuf::internal::kEmptyString) {
    versionid_->clear();
  }
  clear_has_versionid();
}
inline const ::std::string& TNVDfParam::versionid() const {
  return *versionid_;
}
inline void TNVDfParam::set_versionid(const ::std::string& value) {
  set_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    versionid_ = new ::std::string;
  }
  versionid_->assign(value);
}
inline void TNVDfParam::set_versionid(const char* value) {
  set_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    versionid_ = new ::std::string;
  }
  versionid_->assign(value);
}
inline void TNVDfParam::set_versionid(const char* value, size_t size) {
  set_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    versionid_ = new ::std::string;
  }
  versionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TNVDfParam::mutable_versionid() {
  set_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    versionid_ = new ::std::string;
  }
  return versionid_;
}
inline ::std::string* TNVDfParam::release_versionid() {
  clear_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = versionid_;
    versionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TNVDfParam::set_allocated_versionid(::std::string* versionid) {
  if (versionid_ != &::google::protobuf::internal::kEmptyString) {
    delete versionid_;
  }
  if (versionid) {
    set_has_versionid();
    versionid_ = versionid;
  } else {
    clear_has_versionid();
    versionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string productid = 2;
inline bool TNVDfParam::has_productid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TNVDfParam::set_has_productid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TNVDfParam::clear_has_productid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TNVDfParam::clear_productid() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    productid_->clear();
  }
  clear_has_productid();
}
inline const ::std::string& TNVDfParam::productid() const {
  return *productid_;
}
inline void TNVDfParam::set_productid(const ::std::string& value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void TNVDfParam::set_productid(const char* value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void TNVDfParam::set_productid(const char* value, size_t size) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TNVDfParam::mutable_productid() {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  return productid_;
}
inline ::std::string* TNVDfParam::release_productid() {
  clear_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productid_;
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TNVDfParam::set_allocated_productid(::std::string* productid) {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (productid) {
    set_has_productid();
    productid_ = productid;
  } else {
    clear_has_productid();
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string devieip = 3;
inline bool TNVDfParam::has_devieip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TNVDfParam::set_has_devieip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TNVDfParam::clear_has_devieip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TNVDfParam::clear_devieip() {
  if (devieip_ != &::google::protobuf::internal::kEmptyString) {
    devieip_->clear();
  }
  clear_has_devieip();
}
inline const ::std::string& TNVDfParam::devieip() const {
  return *devieip_;
}
inline void TNVDfParam::set_devieip(const ::std::string& value) {
  set_has_devieip();
  if (devieip_ == &::google::protobuf::internal::kEmptyString) {
    devieip_ = new ::std::string;
  }
  devieip_->assign(value);
}
inline void TNVDfParam::set_devieip(const char* value) {
  set_has_devieip();
  if (devieip_ == &::google::protobuf::internal::kEmptyString) {
    devieip_ = new ::std::string;
  }
  devieip_->assign(value);
}
inline void TNVDfParam::set_devieip(const char* value, size_t size) {
  set_has_devieip();
  if (devieip_ == &::google::protobuf::internal::kEmptyString) {
    devieip_ = new ::std::string;
  }
  devieip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TNVDfParam::mutable_devieip() {
  set_has_devieip();
  if (devieip_ == &::google::protobuf::internal::kEmptyString) {
    devieip_ = new ::std::string;
  }
  return devieip_;
}
inline ::std::string* TNVDfParam::release_devieip() {
  clear_has_devieip();
  if (devieip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devieip_;
    devieip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TNVDfParam::set_allocated_devieip(::std::string* devieip) {
  if (devieip_ != &::google::protobuf::internal::kEmptyString) {
    delete devieip_;
  }
  if (devieip) {
    set_has_devieip();
    devieip_ = devieip;
  } else {
    clear_has_devieip();
    devieip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TNVDfClientParam

// optional string versionid = 1;
inline bool TNVDfClientParam::has_versionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TNVDfClientParam::set_has_versionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TNVDfClientParam::clear_has_versionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TNVDfClientParam::clear_versionid() {
  if (versionid_ != &::google::protobuf::internal::kEmptyString) {
    versionid_->clear();
  }
  clear_has_versionid();
}
inline const ::std::string& TNVDfClientParam::versionid() const {
  return *versionid_;
}
inline void TNVDfClientParam::set_versionid(const ::std::string& value) {
  set_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    versionid_ = new ::std::string;
  }
  versionid_->assign(value);
}
inline void TNVDfClientParam::set_versionid(const char* value) {
  set_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    versionid_ = new ::std::string;
  }
  versionid_->assign(value);
}
inline void TNVDfClientParam::set_versionid(const char* value, size_t size) {
  set_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    versionid_ = new ::std::string;
  }
  versionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TNVDfClientParam::mutable_versionid() {
  set_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    versionid_ = new ::std::string;
  }
  return versionid_;
}
inline ::std::string* TNVDfClientParam::release_versionid() {
  clear_has_versionid();
  if (versionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = versionid_;
    versionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TNVDfClientParam::set_allocated_versionid(::std::string* versionid) {
  if (versionid_ != &::google::protobuf::internal::kEmptyString) {
    delete versionid_;
  }
  if (versionid) {
    set_has_versionid();
    versionid_ = versionid;
  } else {
    clear_has_versionid();
    versionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string productid = 2;
inline bool TNVDfClientParam::has_productid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TNVDfClientParam::set_has_productid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TNVDfClientParam::clear_has_productid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TNVDfClientParam::clear_productid() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    productid_->clear();
  }
  clear_has_productid();
}
inline const ::std::string& TNVDfClientParam::productid() const {
  return *productid_;
}
inline void TNVDfClientParam::set_productid(const ::std::string& value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void TNVDfClientParam::set_productid(const char* value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void TNVDfClientParam::set_productid(const char* value, size_t size) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TNVDfClientParam::mutable_productid() {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  return productid_;
}
inline ::std::string* TNVDfClientParam::release_productid() {
  clear_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productid_;
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TNVDfClientParam::set_allocated_productid(::std::string* productid) {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (productid) {
    set_has_productid();
    productid_ = productid;
  } else {
    clear_has_productid();
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string tagproductid = 4;
inline int TNVDfClientParam::tagproductid_size() const {
  return tagproductid_.size();
}
inline void TNVDfClientParam::clear_tagproductid() {
  tagproductid_.Clear();
}
inline const ::std::string& TNVDfClientParam::tagproductid(int index) const {
  return tagproductid_.Get(index);
}
inline ::std::string* TNVDfClientParam::mutable_tagproductid(int index) {
  return tagproductid_.Mutable(index);
}
inline void TNVDfClientParam::set_tagproductid(int index, const ::std::string& value) {
  tagproductid_.Mutable(index)->assign(value);
}
inline void TNVDfClientParam::set_tagproductid(int index, const char* value) {
  tagproductid_.Mutable(index)->assign(value);
}
inline void TNVDfClientParam::set_tagproductid(int index, const char* value, size_t size) {
  tagproductid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TNVDfClientParam::add_tagproductid() {
  return tagproductid_.Add();
}
inline void TNVDfClientParam::add_tagproductid(const ::std::string& value) {
  tagproductid_.Add()->assign(value);
}
inline void TNVDfClientParam::add_tagproductid(const char* value) {
  tagproductid_.Add()->assign(value);
}
inline void TNVDfClientParam::add_tagproductid(const char* value, size_t size) {
  tagproductid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TNVDfClientParam::tagproductid() const {
  return tagproductid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TNVDfClientParam::mutable_tagproductid() {
  return &tagproductid_;
}

// optional string ifr_name = 5;
inline bool TNVDfClientParam::has_ifr_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TNVDfClientParam::set_has_ifr_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TNVDfClientParam::clear_has_ifr_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TNVDfClientParam::clear_ifr_name() {
  if (ifr_name_ != &::google::protobuf::internal::kEmptyString) {
    ifr_name_->clear();
  }
  clear_has_ifr_name();
}
inline const ::std::string& TNVDfClientParam::ifr_name() const {
  return *ifr_name_;
}
inline void TNVDfClientParam::set_ifr_name(const ::std::string& value) {
  set_has_ifr_name();
  if (ifr_name_ == &::google::protobuf::internal::kEmptyString) {
    ifr_name_ = new ::std::string;
  }
  ifr_name_->assign(value);
}
inline void TNVDfClientParam::set_ifr_name(const char* value) {
  set_has_ifr_name();
  if (ifr_name_ == &::google::protobuf::internal::kEmptyString) {
    ifr_name_ = new ::std::string;
  }
  ifr_name_->assign(value);
}
inline void TNVDfClientParam::set_ifr_name(const char* value, size_t size) {
  set_has_ifr_name();
  if (ifr_name_ == &::google::protobuf::internal::kEmptyString) {
    ifr_name_ = new ::std::string;
  }
  ifr_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TNVDfClientParam::mutable_ifr_name() {
  set_has_ifr_name();
  if (ifr_name_ == &::google::protobuf::internal::kEmptyString) {
    ifr_name_ = new ::std::string;
  }
  return ifr_name_;
}
inline ::std::string* TNVDfClientParam::release_ifr_name() {
  clear_has_ifr_name();
  if (ifr_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ifr_name_;
    ifr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TNVDfClientParam::set_allocated_ifr_name(::std::string* ifr_name) {
  if (ifr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ifr_name_;
  }
  if (ifr_name) {
    set_has_ifr_name();
    ifr_name_ = ifr_name;
  } else {
    clear_has_ifr_name();
    ifr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TNVPingResult

// optional .nv.EmNvPingErrcode ping_errcode = 1;
inline bool TNVPingResult::has_ping_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TNVPingResult::set_has_ping_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TNVPingResult::clear_has_ping_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TNVPingResult::clear_ping_errcode() {
  ping_errcode_ = 0;
  clear_has_ping_errcode();
}
inline ::nv::EmNvPingErrcode TNVPingResult::ping_errcode() const {
  return static_cast< ::nv::EmNvPingErrcode >(ping_errcode_);
}
inline void TNVPingResult::set_ping_errcode(::nv::EmNvPingErrcode value) {
  assert(::nv::EmNvPingErrcode_IsValid(value));
  set_has_ping_errcode();
  ping_errcode_ = value;
}

// optional uint32 ttl = 2;
inline bool TNVPingResult::has_ttl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TNVPingResult::set_has_ttl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TNVPingResult::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TNVPingResult::clear_ttl() {
  ttl_ = 0u;
  clear_has_ttl();
}
inline ::google::protobuf::uint32 TNVPingResult::ttl() const {
  return ttl_;
}
inline void TNVPingResult::set_ttl(::google::protobuf::uint32 value) {
  set_has_ttl();
  ttl_ = value;
}

// optional uint32 trip_time = 3;
inline bool TNVPingResult::has_trip_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TNVPingResult::set_has_trip_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TNVPingResult::clear_has_trip_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TNVPingResult::clear_trip_time() {
  trip_time_ = 0u;
  clear_has_trip_time();
}
inline ::google::protobuf::uint32 TNVPingResult::trip_time() const {
  return trip_time_;
}
inline void TNVPingResult::set_trip_time(::google::protobuf::uint32 value) {
  set_has_trip_time();
  trip_time_ = value;
}

// optional uint32 userid = 4;
inline bool TNVPingResult::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TNVPingResult::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TNVPingResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TNVPingResult::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 TNVPingResult::userid() const {
  return userid_;
}
inline void TNVPingResult::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 error_type = 5;
inline bool TNVPingResult::has_error_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TNVPingResult::set_has_error_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TNVPingResult::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TNVPingResult::clear_error_type() {
  error_type_ = 0u;
  clear_has_error_type();
}
inline ::google::protobuf::uint32 TNVPingResult::error_type() const {
  return error_type_;
}
inline void TNVPingResult::set_error_type(::google::protobuf::uint32 value) {
  set_has_error_type();
  error_type_ = value;
}

// optional uint32 error_code = 6;
inline bool TNVPingResult::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TNVPingResult::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TNVPingResult::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TNVPingResult::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 TNVPingResult::error_code() const {
  return error_code_;
}
inline void TNVPingResult::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// TNVPingCmdOption

// optional uint32 packagesize = 1;
inline bool TNVPingCmdOption::has_packagesize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TNVPingCmdOption::set_has_packagesize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TNVPingCmdOption::clear_has_packagesize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TNVPingCmdOption::clear_packagesize() {
  packagesize_ = 0u;
  clear_has_packagesize();
}
inline ::google::protobuf::uint32 TNVPingCmdOption::packagesize() const {
  return packagesize_;
}
inline void TNVPingCmdOption::set_packagesize(::google::protobuf::uint32 value) {
  set_has_packagesize();
  packagesize_ = value;
}

// optional uint32 timeout = 2;
inline bool TNVPingCmdOption::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TNVPingCmdOption::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TNVPingCmdOption::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TNVPingCmdOption::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 TNVPingCmdOption::timeout() const {
  return timeout_;
}
inline void TNVPingCmdOption::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
}

// optional uint32 ttl = 3;
inline bool TNVPingCmdOption::has_ttl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TNVPingCmdOption::set_has_ttl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TNVPingCmdOption::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TNVPingCmdOption::clear_ttl() {
  ttl_ = 0u;
  clear_has_ttl();
}
inline ::google::protobuf::uint32 TNVPingCmdOption::ttl() const {
  return ttl_;
}
inline void TNVPingCmdOption::set_ttl(::google::protobuf::uint32 value) {
  set_has_ttl();
  ttl_ = value;
}

// optional uint32 count = 4;
inline bool TNVPingCmdOption::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TNVPingCmdOption::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TNVPingCmdOption::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TNVPingCmdOption::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TNVPingCmdOption::count() const {
  return count_;
}
inline void TNVPingCmdOption::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// TNVPingTestParam

// optional string dst_info = 1;
inline bool TNVPingTestParam::has_dst_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TNVPingTestParam::set_has_dst_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TNVPingTestParam::clear_has_dst_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TNVPingTestParam::clear_dst_info() {
  if (dst_info_ != &::google::protobuf::internal::kEmptyString) {
    dst_info_->clear();
  }
  clear_has_dst_info();
}
inline const ::std::string& TNVPingTestParam::dst_info() const {
  return *dst_info_;
}
inline void TNVPingTestParam::set_dst_info(const ::std::string& value) {
  set_has_dst_info();
  if (dst_info_ == &::google::protobuf::internal::kEmptyString) {
    dst_info_ = new ::std::string;
  }
  dst_info_->assign(value);
}
inline void TNVPingTestParam::set_dst_info(const char* value) {
  set_has_dst_info();
  if (dst_info_ == &::google::protobuf::internal::kEmptyString) {
    dst_info_ = new ::std::string;
  }
  dst_info_->assign(value);
}
inline void TNVPingTestParam::set_dst_info(const char* value, size_t size) {
  set_has_dst_info();
  if (dst_info_ == &::google::protobuf::internal::kEmptyString) {
    dst_info_ = new ::std::string;
  }
  dst_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TNVPingTestParam::mutable_dst_info() {
  set_has_dst_info();
  if (dst_info_ == &::google::protobuf::internal::kEmptyString) {
    dst_info_ = new ::std::string;
  }
  return dst_info_;
}
inline ::std::string* TNVPingTestParam::release_dst_info() {
  clear_has_dst_info();
  if (dst_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_info_;
    dst_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TNVPingTestParam::set_allocated_dst_info(::std::string* dst_info) {
  if (dst_info_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_info_;
  }
  if (dst_info) {
    set_has_dst_info();
    dst_info_ = dst_info;
  } else {
    clear_has_dst_info();
    dst_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .nv.TNVPingCmdOption ping_option = 2;
inline bool TNVPingTestParam::has_ping_option() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TNVPingTestParam::set_has_ping_option() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TNVPingTestParam::clear_has_ping_option() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TNVPingTestParam::clear_ping_option() {
  if (ping_option_ != NULL) ping_option_->::nv::TNVPingCmdOption::Clear();
  clear_has_ping_option();
}
inline const ::nv::TNVPingCmdOption& TNVPingTestParam::ping_option() const {
  return ping_option_ != NULL ? *ping_option_ : *default_instance_->ping_option_;
}
inline ::nv::TNVPingCmdOption* TNVPingTestParam::mutable_ping_option() {
  set_has_ping_option();
  if (ping_option_ == NULL) ping_option_ = new ::nv::TNVPingCmdOption;
  return ping_option_;
}
inline ::nv::TNVPingCmdOption* TNVPingTestParam::release_ping_option() {
  clear_has_ping_option();
  ::nv::TNVPingCmdOption* temp = ping_option_;
  ping_option_ = NULL;
  return temp;
}
inline void TNVPingTestParam::set_allocated_ping_option(::nv::TNVPingCmdOption* ping_option) {
  delete ping_option_;
  ping_option_ = ping_option;
  if (ping_option) {
    set_has_ping_option();
  } else {
    clear_has_ping_option();
  }
}

// optional uint32 userid = 3;
inline bool TNVPingTestParam::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TNVPingTestParam::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TNVPingTestParam::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TNVPingTestParam::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 TNVPingTestParam::userid() const {
  return userid_;
}
inline void TNVPingTestParam::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// TEthnetInterfaceParam

// optional uint32 ip = 1;
inline bool TEthnetInterfaceParam::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEthnetInterfaceParam::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEthnetInterfaceParam::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEthnetInterfaceParam::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 TEthnetInterfaceParam::ip() const {
  return ip_;
}
inline void TEthnetInterfaceParam::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
}

// optional uint32 mask = 2;
inline bool TEthnetInterfaceParam::has_mask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEthnetInterfaceParam::set_has_mask() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEthnetInterfaceParam::clear_has_mask() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEthnetInterfaceParam::clear_mask() {
  mask_ = 0u;
  clear_has_mask();
}
inline ::google::protobuf::uint32 TEthnetInterfaceParam::mask() const {
  return mask_;
}
inline void TEthnetInterfaceParam::set_mask(::google::protobuf::uint32 value) {
  set_has_mask();
  mask_ = value;
}

// optional string mac = 3;
inline bool TEthnetInterfaceParam::has_mac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEthnetInterfaceParam::set_has_mac() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEthnetInterfaceParam::clear_has_mac() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEthnetInterfaceParam::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& TEthnetInterfaceParam::mac() const {
  return *mac_;
}
inline void TEthnetInterfaceParam::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void TEthnetInterfaceParam::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void TEthnetInterfaceParam::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TEthnetInterfaceParam::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* TEthnetInterfaceParam::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TEthnetInterfaceParam::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TEthnetInterfaceParamList

// repeated .nv.TEthnetInterfaceParam paramList = 1;
inline int TEthnetInterfaceParamList::paramlist_size() const {
  return paramlist_.size();
}
inline void TEthnetInterfaceParamList::clear_paramlist() {
  paramlist_.Clear();
}
inline const ::nv::TEthnetInterfaceParam& TEthnetInterfaceParamList::paramlist(int index) const {
  return paramlist_.Get(index);
}
inline ::nv::TEthnetInterfaceParam* TEthnetInterfaceParamList::mutable_paramlist(int index) {
  return paramlist_.Mutable(index);
}
inline ::nv::TEthnetInterfaceParam* TEthnetInterfaceParamList::add_paramlist() {
  return paramlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nv::TEthnetInterfaceParam >&
TEthnetInterfaceParamList::paramlist() const {
  return paramlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::nv::TEthnetInterfaceParam >*
TEthnetInterfaceParamList::mutable_paramlist() {
  return &paramlist_;
}

// -------------------------------------------------------------------

// TDNSParam

// repeated uint32 dnsList = 1;
inline int TDNSParam::dnslist_size() const {
  return dnslist_.size();
}
inline void TDNSParam::clear_dnslist() {
  dnslist_.Clear();
}
inline ::google::protobuf::uint32 TDNSParam::dnslist(int index) const {
  return dnslist_.Get(index);
}
inline void TDNSParam::set_dnslist(int index, ::google::protobuf::uint32 value) {
  dnslist_.Set(index, value);
}
inline void TDNSParam::add_dnslist(::google::protobuf::uint32 value) {
  dnslist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TDNSParam::dnslist() const {
  return dnslist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TDNSParam::mutable_dnslist() {
  return &dnslist_;
}

// optional bool auto = 2;
inline bool TDNSParam::has_auto_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDNSParam::set_has_auto_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDNSParam::clear_has_auto_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDNSParam::clear_auto_() {
  auto__ = false;
  clear_has_auto_();
}
inline bool TDNSParam::auto_() const {
  return auto__;
}
inline void TDNSParam::set_auto_(bool value) {
  set_has_auto_();
  auto__ = value;
}

// -------------------------------------------------------------------

// TDHCPLeaseInfo

// optional uint32 ethernetid = 1;
inline bool TDHCPLeaseInfo::has_ethernetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDHCPLeaseInfo::set_has_ethernetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDHCPLeaseInfo::clear_has_ethernetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDHCPLeaseInfo::clear_ethernetid() {
  ethernetid_ = 0u;
  clear_has_ethernetid();
}
inline ::google::protobuf::uint32 TDHCPLeaseInfo::ethernetid() const {
  return ethernetid_;
}
inline void TDHCPLeaseInfo::set_ethernetid(::google::protobuf::uint32 value) {
  set_has_ethernetid();
  ethernetid_ = value;
}

// optional uint32 ip = 2;
inline bool TDHCPLeaseInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDHCPLeaseInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDHCPLeaseInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDHCPLeaseInfo::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 TDHCPLeaseInfo::ip() const {
  return ip_;
}
inline void TDHCPLeaseInfo::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
}

// optional uint32 mask = 3;
inline bool TDHCPLeaseInfo::has_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDHCPLeaseInfo::set_has_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDHCPLeaseInfo::clear_has_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDHCPLeaseInfo::clear_mask() {
  mask_ = 0u;
  clear_has_mask();
}
inline ::google::protobuf::uint32 TDHCPLeaseInfo::mask() const {
  return mask_;
}
inline void TDHCPLeaseInfo::set_mask(::google::protobuf::uint32 value) {
  set_has_mask();
  mask_ = value;
}

// optional uint32 gateway = 4;
inline bool TDHCPLeaseInfo::has_gateway() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDHCPLeaseInfo::set_has_gateway() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDHCPLeaseInfo::clear_has_gateway() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDHCPLeaseInfo::clear_gateway() {
  gateway_ = 0u;
  clear_has_gateway();
}
inline ::google::protobuf::uint32 TDHCPLeaseInfo::gateway() const {
  return gateway_;
}
inline void TDHCPLeaseInfo::set_gateway(::google::protobuf::uint32 value) {
  set_has_gateway();
  gateway_ = value;
}

// optional uint32 duration = 5;
inline bool TDHCPLeaseInfo::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDHCPLeaseInfo::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDHCPLeaseInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDHCPLeaseInfo::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 TDHCPLeaseInfo::duration() const {
  return duration_;
}
inline void TDHCPLeaseInfo::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
}

// optional uint32 dnsnum = 6;
inline bool TDHCPLeaseInfo::has_dnsnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDHCPLeaseInfo::set_has_dnsnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDHCPLeaseInfo::clear_has_dnsnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDHCPLeaseInfo::clear_dnsnum() {
  dnsnum_ = 0u;
  clear_has_dnsnum();
}
inline ::google::protobuf::uint32 TDHCPLeaseInfo::dnsnum() const {
  return dnsnum_;
}
inline void TDHCPLeaseInfo::set_dnsnum(::google::protobuf::uint32 value) {
  set_has_dnsnum();
  dnsnum_ = value;
}

// repeated uint32 dns_server_list = 7;
inline int TDHCPLeaseInfo::dns_server_list_size() const {
  return dns_server_list_.size();
}
inline void TDHCPLeaseInfo::clear_dns_server_list() {
  dns_server_list_.Clear();
}
inline ::google::protobuf::uint32 TDHCPLeaseInfo::dns_server_list(int index) const {
  return dns_server_list_.Get(index);
}
inline void TDHCPLeaseInfo::set_dns_server_list(int index, ::google::protobuf::uint32 value) {
  dns_server_list_.Set(index, value);
}
inline void TDHCPLeaseInfo::add_dns_server_list(::google::protobuf::uint32 value) {
  dns_server_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TDHCPLeaseInfo::dns_server_list() const {
  return dns_server_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TDHCPLeaseInfo::mutable_dns_server_list() {
  return &dns_server_list_;
}

// -------------------------------------------------------------------

// TDHCPStateInfo

// optional int32 state = 1;
inline bool TDHCPStateInfo::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDHCPStateInfo::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDHCPStateInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDHCPStateInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 TDHCPStateInfo::state() const {
  return state_;
}
inline void TDHCPStateInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nv

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nvstructnet_2eproto__INCLUDED
