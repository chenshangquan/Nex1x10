// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structkeydriver.proto

package com.kedacom.mt.netmanage.protobuf;

public final class KeyDriverPB {
  private KeyDriverPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface TMTKeyPressInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool key_type = 1;
    /**
     * <code>optional bool key_type = 1;</code>
     *
     * <pre>
     *keydown or keyup
     * </pre>
     */
    boolean hasKeyType();
    /**
     * <code>optional bool key_type = 1;</code>
     *
     * <pre>
     *keydown or keyup
     * </pre>
     */
    boolean getKeyType();

    // optional .mt.EmRemoteType key_source = 2;
    /**
     * <code>optional .mt.EmRemoteType key_source = 2;</code>
     *
     * <pre>
     *按键来源
     * </pre>
     */
    boolean hasKeySource();
    /**
     * <code>optional .mt.EmRemoteType key_source = 2;</code>
     *
     * <pre>
     *按键来源
     * </pre>
     */
    com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType getKeySource();

    // optional .mt.EmRemoteScanCode key_code = 3;
    /**
     * <code>optional .mt.EmRemoteScanCode key_code = 3;</code>
     *
     * <pre>
     *按键键值
     * </pre>
     */
    boolean hasKeyCode();
    /**
     * <code>optional .mt.EmRemoteScanCode key_code = 3;</code>
     *
     * <pre>
     *按键键值
     * </pre>
     */
    com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode getKeyCode();

    // optional uint32 key_count = 4;
    /**
     * <code>optional uint32 key_count = 4;</code>
     *
     * <pre>
     *按键计数
     * </pre>
     */
    boolean hasKeyCount();
    /**
     * <code>optional uint32 key_count = 4;</code>
     *
     * <pre>
     *按键计数
     * </pre>
     */
    int getKeyCount();

    // optional .mt.EmKeyState key_state = 5;
    /**
     * <code>optional .mt.EmKeyState key_state = 5;</code>
     *
     * <pre>
     *keydown,keyup,keylongpressed
     * </pre>
     */
    boolean hasKeyState();
    /**
     * <code>optional .mt.EmKeyState key_state = 5;</code>
     *
     * <pre>
     *keydown,keyup,keylongpressed
     * </pre>
     */
    com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState getKeyState();
  }
  /**
   * Protobuf type {@code mt.TMTKeyPressInfo}
   */
  public static final class TMTKeyPressInfo extends
      com.google.protobuf.GeneratedMessage
      implements TMTKeyPressInfoOrBuilder {
    // Use TMTKeyPressInfo.newBuilder() to construct.
    private TMTKeyPressInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TMTKeyPressInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TMTKeyPressInfo defaultInstance;
    public static TMTKeyPressInfo getDefaultInstance() {
      return defaultInstance;
    }

    public TMTKeyPressInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TMTKeyPressInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              keyType_ = input.readBool();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType value = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                keySource_ = value;
              }
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode value = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                keyCode_ = value;
              }
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              keyCount_ = input.readUInt32();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState value = com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                keyState_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.kedacom.mt.netmanage.protobuf.KeyDriverPB.internal_static_mt_TMTKeyPressInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.kedacom.mt.netmanage.protobuf.KeyDriverPB.internal_static_mt_TMTKeyPressInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo.class, com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<TMTKeyPressInfo> PARSER =
        new com.google.protobuf.AbstractParser<TMTKeyPressInfo>() {
      public TMTKeyPressInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TMTKeyPressInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TMTKeyPressInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool key_type = 1;
    public static final int KEY_TYPE_FIELD_NUMBER = 1;
    private boolean keyType_;
    /**
     * <code>optional bool key_type = 1;</code>
     *
     * <pre>
     *keydown or keyup
     * </pre>
     */
    public boolean hasKeyType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool key_type = 1;</code>
     *
     * <pre>
     *keydown or keyup
     * </pre>
     */
    public boolean getKeyType() {
      return keyType_;
    }

    // optional .mt.EmRemoteType key_source = 2;
    public static final int KEY_SOURCE_FIELD_NUMBER = 2;
    private com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType keySource_;
    /**
     * <code>optional .mt.EmRemoteType key_source = 2;</code>
     *
     * <pre>
     *按键来源
     * </pre>
     */
    public boolean hasKeySource() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .mt.EmRemoteType key_source = 2;</code>
     *
     * <pre>
     *按键来源
     * </pre>
     */
    public com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType getKeySource() {
      return keySource_;
    }

    // optional .mt.EmRemoteScanCode key_code = 3;
    public static final int KEY_CODE_FIELD_NUMBER = 3;
    private com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode keyCode_;
    /**
     * <code>optional .mt.EmRemoteScanCode key_code = 3;</code>
     *
     * <pre>
     *按键键值
     * </pre>
     */
    public boolean hasKeyCode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .mt.EmRemoteScanCode key_code = 3;</code>
     *
     * <pre>
     *按键键值
     * </pre>
     */
    public com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode getKeyCode() {
      return keyCode_;
    }

    // optional uint32 key_count = 4;
    public static final int KEY_COUNT_FIELD_NUMBER = 4;
    private int keyCount_;
    /**
     * <code>optional uint32 key_count = 4;</code>
     *
     * <pre>
     *按键计数
     * </pre>
     */
    public boolean hasKeyCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 key_count = 4;</code>
     *
     * <pre>
     *按键计数
     * </pre>
     */
    public int getKeyCount() {
      return keyCount_;
    }

    // optional .mt.EmKeyState key_state = 5;
    public static final int KEY_STATE_FIELD_NUMBER = 5;
    private com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState keyState_;
    /**
     * <code>optional .mt.EmKeyState key_state = 5;</code>
     *
     * <pre>
     *keydown,keyup,keylongpressed
     * </pre>
     */
    public boolean hasKeyState() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .mt.EmKeyState key_state = 5;</code>
     *
     * <pre>
     *keydown,keyup,keylongpressed
     * </pre>
     */
    public com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState getKeyState() {
      return keyState_;
    }

    private void initFields() {
      keyType_ = false;
      keySource_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType.emRemoteTypeUnknown;
      keyCode_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode.emScanCode0;
      keyCount_ = 0;
      keyState_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState.emKeyUp;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, keyType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, keySource_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, keyCode_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, keyCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, keyState_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, keyType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, keySource_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, keyCode_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, keyCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, keyState_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mt.TMTKeyPressInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.kedacom.mt.netmanage.protobuf.KeyDriverPB.internal_static_mt_TMTKeyPressInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.kedacom.mt.netmanage.protobuf.KeyDriverPB.internal_static_mt_TMTKeyPressInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo.class, com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo.Builder.class);
      }

      // Construct using com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        keyType_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        keySource_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType.emRemoteTypeUnknown;
        bitField0_ = (bitField0_ & ~0x00000002);
        keyCode_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode.emScanCode0;
        bitField0_ = (bitField0_ & ~0x00000004);
        keyCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        keyState_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState.emKeyUp;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.kedacom.mt.netmanage.protobuf.KeyDriverPB.internal_static_mt_TMTKeyPressInfo_descriptor;
      }

      public com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo getDefaultInstanceForType() {
        return com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo.getDefaultInstance();
      }

      public com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo build() {
        com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo buildPartial() {
        com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo result = new com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.keyType_ = keyType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.keySource_ = keySource_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.keyCode_ = keyCode_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.keyCount_ = keyCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.keyState_ = keyState_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo) {
          return mergeFrom((com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo other) {
        if (other == com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo.getDefaultInstance()) return this;
        if (other.hasKeyType()) {
          setKeyType(other.getKeyType());
        }
        if (other.hasKeySource()) {
          setKeySource(other.getKeySource());
        }
        if (other.hasKeyCode()) {
          setKeyCode(other.getKeyCode());
        }
        if (other.hasKeyCount()) {
          setKeyCount(other.getKeyCount());
        }
        if (other.hasKeyState()) {
          setKeyState(other.getKeyState());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.kedacom.mt.netmanage.protobuf.KeyDriverPB.TMTKeyPressInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool key_type = 1;
      private boolean keyType_ ;
      /**
       * <code>optional bool key_type = 1;</code>
       *
       * <pre>
       *keydown or keyup
       * </pre>
       */
      public boolean hasKeyType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool key_type = 1;</code>
       *
       * <pre>
       *keydown or keyup
       * </pre>
       */
      public boolean getKeyType() {
        return keyType_;
      }
      /**
       * <code>optional bool key_type = 1;</code>
       *
       * <pre>
       *keydown or keyup
       * </pre>
       */
      public Builder setKeyType(boolean value) {
        bitField0_ |= 0x00000001;
        keyType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool key_type = 1;</code>
       *
       * <pre>
       *keydown or keyup
       * </pre>
       */
      public Builder clearKeyType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        keyType_ = false;
        onChanged();
        return this;
      }

      // optional .mt.EmRemoteType key_source = 2;
      private com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType keySource_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType.emRemoteTypeUnknown;
      /**
       * <code>optional .mt.EmRemoteType key_source = 2;</code>
       *
       * <pre>
       *按键来源
       * </pre>
       */
      public boolean hasKeySource() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .mt.EmRemoteType key_source = 2;</code>
       *
       * <pre>
       *按键来源
       * </pre>
       */
      public com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType getKeySource() {
        return keySource_;
      }
      /**
       * <code>optional .mt.EmRemoteType key_source = 2;</code>
       *
       * <pre>
       *按键来源
       * </pre>
       */
      public Builder setKeySource(com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        keySource_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mt.EmRemoteType key_source = 2;</code>
       *
       * <pre>
       *按键来源
       * </pre>
       */
      public Builder clearKeySource() {
        bitField0_ = (bitField0_ & ~0x00000002);
        keySource_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteType.emRemoteTypeUnknown;
        onChanged();
        return this;
      }

      // optional .mt.EmRemoteScanCode key_code = 3;
      private com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode keyCode_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode.emScanCode0;
      /**
       * <code>optional .mt.EmRemoteScanCode key_code = 3;</code>
       *
       * <pre>
       *按键键值
       * </pre>
       */
      public boolean hasKeyCode() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .mt.EmRemoteScanCode key_code = 3;</code>
       *
       * <pre>
       *按键键值
       * </pre>
       */
      public com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode getKeyCode() {
        return keyCode_;
      }
      /**
       * <code>optional .mt.EmRemoteScanCode key_code = 3;</code>
       *
       * <pre>
       *按键键值
       * </pre>
       */
      public Builder setKeyCode(com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        keyCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mt.EmRemoteScanCode key_code = 3;</code>
       *
       * <pre>
       *按键键值
       * </pre>
       */
      public Builder clearKeyCode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        keyCode_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmRemoteScanCode.emScanCode0;
        onChanged();
        return this;
      }

      // optional uint32 key_count = 4;
      private int keyCount_ ;
      /**
       * <code>optional uint32 key_count = 4;</code>
       *
       * <pre>
       *按键计数
       * </pre>
       */
      public boolean hasKeyCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 key_count = 4;</code>
       *
       * <pre>
       *按键计数
       * </pre>
       */
      public int getKeyCount() {
        return keyCount_;
      }
      /**
       * <code>optional uint32 key_count = 4;</code>
       *
       * <pre>
       *按键计数
       * </pre>
       */
      public Builder setKeyCount(int value) {
        bitField0_ |= 0x00000008;
        keyCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 key_count = 4;</code>
       *
       * <pre>
       *按键计数
       * </pre>
       */
      public Builder clearKeyCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        keyCount_ = 0;
        onChanged();
        return this;
      }

      // optional .mt.EmKeyState key_state = 5;
      private com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState keyState_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState.emKeyUp;
      /**
       * <code>optional .mt.EmKeyState key_state = 5;</code>
       *
       * <pre>
       *keydown,keyup,keylongpressed
       * </pre>
       */
      public boolean hasKeyState() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .mt.EmKeyState key_state = 5;</code>
       *
       * <pre>
       *keydown,keyup,keylongpressed
       * </pre>
       */
      public com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState getKeyState() {
        return keyState_;
      }
      /**
       * <code>optional .mt.EmKeyState key_state = 5;</code>
       *
       * <pre>
       *keydown,keyup,keylongpressed
       * </pre>
       */
      public Builder setKeyState(com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        keyState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mt.EmKeyState key_state = 5;</code>
       *
       * <pre>
       *keydown,keyup,keylongpressed
       * </pre>
       */
      public Builder clearKeyState() {
        bitField0_ = (bitField0_ & ~0x00000010);
        keyState_ = com.kedacom.mt.netmanage.protobuf.EnumPB.EmKeyState.emKeyUp;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mt.TMTKeyPressInfo)
    }

    static {
      defaultInstance = new TMTKeyPressInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mt.TMTKeyPressInfo)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mt_TMTKeyPressInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mt_TMTKeyPressInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025structkeydriver.proto\022\002mt\032\nenum.proto\"" +
      "\247\001\n\017TMTKeyPressInfo\022\020\n\010key_type\030\001 \001(\010\022$\n" +
      "\nkey_source\030\002 \001(\0162\020.mt.EmRemoteType\022&\n\010k" +
      "ey_code\030\003 \001(\0162\024.mt.EmRemoteScanCode\022\021\n\tk" +
      "ey_count\030\004 \001(\r\022!\n\tkey_state\030\005 \001(\0162\016.mt.E" +
      "mKeyStateB0\n!com.kedacom.mt.netmanage.pr" +
      "otobufB\013KeyDriverPB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_mt_TMTKeyPressInfo_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_mt_TMTKeyPressInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mt_TMTKeyPressInfo_descriptor,
              new java.lang.String[] { "KeyType", "KeySource", "KeyCode", "KeyCount", "KeyState", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.kedacom.mt.netmanage.protobuf.EnumPB.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
