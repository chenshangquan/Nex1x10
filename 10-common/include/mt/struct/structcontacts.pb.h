// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structcontacts.proto

#ifndef PROTOBUF_structcontacts_2eproto__INCLUDED
#define PROTOBUF_structcontacts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
#include "structcommon.pb.h"
// @@protoc_insertion_point(includes)

namespace mt {

// Internal implementation detail -- do not call these.
void MTMSG_API protobuf_AddDesc_structcontacts_2eproto();
void protobuf_AssignDesc_structcontacts_2eproto();
void protobuf_ShutdownFile_structcontacts_2eproto();

class TMTCallRecord;
class TMTCallRecordList;
class TMTRecordErrInfo;
class TMTRecordSearch;
class TAddrBookGroupInfo;
class TAddrBookGroupList;
class TAddrBookRosterInfo;
class TAddrBookRosterList;

// ===================================================================

class MTMSG_API TMTCallRecord : public ::google::protobuf::Message {
 public:
  TMTCallRecord();
  virtual ~TMTCallRecord();

  TMTCallRecord(const TMTCallRecord& from);

  inline TMTCallRecord& operator=(const TMTCallRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMTCallRecord& default_instance();

  void Swap(TMTCallRecord* other);

  // implements Message ----------------------------------------------

  TMTCallRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMTCallRecord& from);
  void MergeFrom(const TMTCallRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sn = 1;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 1;
  inline ::google::protobuf::uint32 sn() const;
  inline void set_sn(::google::protobuf::uint32 value);

  // optional .mt.EmMtCallRecordType callrecordtype = 2;
  inline bool has_callrecordtype() const;
  inline void clear_callrecordtype();
  static const int kCallrecordtypeFieldNumber = 2;
  inline ::mt::EmMtCallRecordType callrecordtype() const;
  inline void set_callrecordtype(::mt::EmMtCallRecordType value);

  // optional .mt.EmMtCallType calltype = 3;
  inline bool has_calltype() const;
  inline void clear_calltype();
  static const int kCalltypeFieldNumber = 3;
  inline ::mt::EmMtCallType calltype() const;
  inline void set_calltype(::mt::EmMtCallType value);

  // optional .mt.EmMtConfMode confmode = 4;
  inline bool has_confmode() const;
  inline void clear_confmode();
  static const int kConfmodeFieldNumber = 4;
  inline ::mt::EmMtConfMode confmode() const;
  inline void set_confmode(::mt::EmMtConfMode value);

  // optional string describe = 5;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 5;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional string h323id = 6;
  inline bool has_h323id() const;
  inline void clear_h323id();
  static const int kH323IdFieldNumber = 6;
  inline const ::std::string& h323id() const;
  inline void set_h323id(const ::std::string& value);
  inline void set_h323id(const char* value);
  inline void set_h323id(const char* value, size_t size);
  inline ::std::string* mutable_h323id();
  inline ::std::string* release_h323id();
  inline void set_allocated_h323id(::std::string* h323id);

  // optional .mt.EmMtAddrType addrtype = 7;
  inline bool has_addrtype() const;
  inline void clear_addrtype();
  static const int kAddrtypeFieldNumber = 7;
  inline ::mt::EmMtAddrType addrtype() const;
  inline void set_addrtype(::mt::EmMtAddrType value);

  // optional string e164 = 8;
  inline bool has_e164() const;
  inline void clear_e164();
  static const int kE164FieldNumber = 8;
  inline const ::std::string& e164() const;
  inline void set_e164(const ::std::string& value);
  inline void set_e164(const char* value);
  inline void set_e164(const char* value, size_t size);
  inline ::std::string* mutable_e164();
  inline ::std::string* release_e164();
  inline void set_allocated_e164(::std::string* e164);

  // optional string ip = 9;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 9;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string phonenumber = 10;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhonenumberFieldNumber = 10;
  inline const ::std::string& phonenumber() const;
  inline void set_phonenumber(const ::std::string& value);
  inline void set_phonenumber(const char* value);
  inline void set_phonenumber(const char* value, size_t size);
  inline ::std::string* mutable_phonenumber();
  inline ::std::string* release_phonenumber();
  inline void set_allocated_phonenumber(::std::string* phonenumber);

  // optional uint32 rate = 11;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 11;
  inline ::google::protobuf::uint32 rate() const;
  inline void set_rate(::google::protobuf::uint32 value);

  // optional uint32 time = 12;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string memoname = 13;
  inline bool has_memoname() const;
  inline void clear_memoname();
  static const int kMemonameFieldNumber = 13;
  inline const ::std::string& memoname() const;
  inline void set_memoname(const ::std::string& value);
  inline void set_memoname(const char* value);
  inline void set_memoname(const char* value, size_t size);
  inline ::std::string* mutable_memoname();
  inline ::std::string* release_memoname();
  inline void set_allocated_memoname(::std::string* memoname);

  // @@protoc_insertion_point(class_scope:mt.TMTCallRecord)
 private:
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_callrecordtype();
  inline void clear_has_callrecordtype();
  inline void set_has_calltype();
  inline void clear_has_calltype();
  inline void set_has_confmode();
  inline void clear_has_confmode();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_h323id();
  inline void clear_has_h323id();
  inline void set_has_addrtype();
  inline void clear_has_addrtype();
  inline void set_has_e164();
  inline void clear_has_e164();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_memoname();
  inline void clear_has_memoname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sn_;
  int callrecordtype_;
  int calltype_;
  int confmode_;
  ::std::string* describe_;
  ::std::string* h323id_;
  ::std::string* e164_;
  ::std::string* ip_;
  int addrtype_;
  ::google::protobuf::uint32 rate_;
  ::std::string* phonenumber_;
  ::std::string* memoname_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcontacts_2eproto();
  friend void protobuf_AssignDesc_structcontacts_2eproto();
  friend void protobuf_ShutdownFile_structcontacts_2eproto();

  void InitAsDefaultInstance();
  static TMTCallRecord* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TMTCallRecordList : public ::google::protobuf::Message {
 public:
  TMTCallRecordList();
  virtual ~TMTCallRecordList();

  TMTCallRecordList(const TMTCallRecordList& from);

  inline TMTCallRecordList& operator=(const TMTCallRecordList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMTCallRecordList& default_instance();

  void Swap(TMTCallRecordList* other);

  // implements Message ----------------------------------------------

  TMTCallRecordList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMTCallRecordList& from);
  void MergeFrom(const TMTCallRecordList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mt.TMTCallRecord record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::mt::TMTCallRecord& record(int index) const;
  inline ::mt::TMTCallRecord* mutable_record(int index);
  inline ::mt::TMTCallRecord* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TMTCallRecord >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TMTCallRecord >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:mt.TMTCallRecordList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mt::TMTCallRecord > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcontacts_2eproto();
  friend void protobuf_AssignDesc_structcontacts_2eproto();
  friend void protobuf_ShutdownFile_structcontacts_2eproto();

  void InitAsDefaultInstance();
  static TMTCallRecordList* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TMTRecordErrInfo : public ::google::protobuf::Message {
 public:
  TMTRecordErrInfo();
  virtual ~TMTRecordErrInfo();

  TMTRecordErrInfo(const TMTRecordErrInfo& from);

  inline TMTRecordErrInfo& operator=(const TMTRecordErrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMTRecordErrInfo& default_instance();

  void Swap(TMTRecordErrInfo* other);

  // implements Message ----------------------------------------------

  TMTRecordErrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMTRecordErrInfo& from);
  void MergeFrom(const TMTRecordErrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.EmMtRecordErr error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::mt::EmMtRecordErr error() const;
  inline void set_error(::mt::EmMtRecordErr value);

  // @@protoc_insertion_point(class_scope:mt.TMTRecordErrInfo)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcontacts_2eproto();
  friend void protobuf_AssignDesc_structcontacts_2eproto();
  friend void protobuf_ShutdownFile_structcontacts_2eproto();

  void InitAsDefaultInstance();
  static TMTRecordErrInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TMTRecordSearch : public ::google::protobuf::Message {
 public:
  TMTRecordSearch();
  virtual ~TMTRecordSearch();

  TMTRecordSearch(const TMTRecordSearch& from);

  inline TMTRecordSearch& operator=(const TMTRecordSearch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMTRecordSearch& default_instance();

  void Swap(TMTRecordSearch* other);

  // implements Message ----------------------------------------------

  TMTRecordSearch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMTRecordSearch& from);
  void MergeFrom(const TMTRecordSearch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mt.EmMtRecordSearchType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mt::EmMtRecordSearchType type() const;
  inline void set_type(::mt::EmMtRecordSearchType value);

  // optional .mt.TMTCallRecord record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::mt::TMTCallRecord& record() const;
  inline ::mt::TMTCallRecord* mutable_record();
  inline ::mt::TMTCallRecord* release_record();
  inline void set_allocated_record(::mt::TMTCallRecord* record);

  // @@protoc_insertion_point(class_scope:mt.TMTRecordSearch)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_record();
  inline void clear_has_record();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mt::TMTCallRecord* record_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcontacts_2eproto();
  friend void protobuf_AssignDesc_structcontacts_2eproto();
  friend void protobuf_ShutdownFile_structcontacts_2eproto();

  void InitAsDefaultInstance();
  static TMTRecordSearch* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TAddrBookGroupInfo : public ::google::protobuf::Message {
 public:
  TAddrBookGroupInfo();
  virtual ~TAddrBookGroupInfo();

  TAddrBookGroupInfo(const TAddrBookGroupInfo& from);

  inline TAddrBookGroupInfo& operator=(const TAddrBookGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAddrBookGroupInfo& default_instance();

  void Swap(TAddrBookGroupInfo* other);

  // implements Message ----------------------------------------------

  TAddrBookGroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAddrBookGroupInfo& from);
  void MergeFrom(const TAddrBookGroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 groupsn = 1;
  inline bool has_groupsn() const;
  inline void clear_groupsn();
  static const int kGroupsnFieldNumber = 1;
  inline ::google::protobuf::uint32 groupsn() const;
  inline void set_groupsn(::google::protobuf::uint32 value);

  // optional string groupname = 2;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupnameFieldNumber = 2;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  inline void set_allocated_groupname(::std::string* groupname);

  // optional uint32 parentgroupsn = 3;
  inline bool has_parentgroupsn() const;
  inline void clear_parentgroupsn();
  static const int kParentgroupsnFieldNumber = 3;
  inline ::google::protobuf::uint32 parentgroupsn() const;
  inline void set_parentgroupsn(::google::protobuf::uint32 value);

  // optional uint32 grouplevel = 4;
  inline bool has_grouplevel() const;
  inline void clear_grouplevel();
  static const int kGrouplevelFieldNumber = 4;
  inline ::google::protobuf::uint32 grouplevel() const;
  inline void set_grouplevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mt.TAddrBookGroupInfo)
 private:
  inline void set_has_groupsn();
  inline void clear_has_groupsn();
  inline void set_has_groupname();
  inline void clear_has_groupname();
  inline void set_has_parentgroupsn();
  inline void clear_has_parentgroupsn();
  inline void set_has_grouplevel();
  inline void clear_has_grouplevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* groupname_;
  ::google::protobuf::uint32 groupsn_;
  ::google::protobuf::uint32 parentgroupsn_;
  ::google::protobuf::uint32 grouplevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcontacts_2eproto();
  friend void protobuf_AssignDesc_structcontacts_2eproto();
  friend void protobuf_ShutdownFile_structcontacts_2eproto();

  void InitAsDefaultInstance();
  static TAddrBookGroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TAddrBookGroupList : public ::google::protobuf::Message {
 public:
  TAddrBookGroupList();
  virtual ~TAddrBookGroupList();

  TAddrBookGroupList(const TAddrBookGroupList& from);

  inline TAddrBookGroupList& operator=(const TAddrBookGroupList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAddrBookGroupList& default_instance();

  void Swap(TAddrBookGroupList* other);

  // implements Message ----------------------------------------------

  TAddrBookGroupList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAddrBookGroupList& from);
  void MergeFrom(const TAddrBookGroupList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mt.TAddrBookGroupInfo array = 1;
  inline int array_size() const;
  inline void clear_array();
  static const int kArrayFieldNumber = 1;
  inline const ::mt::TAddrBookGroupInfo& array(int index) const;
  inline ::mt::TAddrBookGroupInfo* mutable_array(int index);
  inline ::mt::TAddrBookGroupInfo* add_array();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookGroupInfo >&
      array() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookGroupInfo >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:mt.TAddrBookGroupList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookGroupInfo > array_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcontacts_2eproto();
  friend void protobuf_AssignDesc_structcontacts_2eproto();
  friend void protobuf_ShutdownFile_structcontacts_2eproto();

  void InitAsDefaultInstance();
  static TAddrBookGroupList* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TAddrBookRosterInfo : public ::google::protobuf::Message {
 public:
  TAddrBookRosterInfo();
  virtual ~TAddrBookRosterInfo();

  TAddrBookRosterInfo(const TAddrBookRosterInfo& from);

  inline TAddrBookRosterInfo& operator=(const TAddrBookRosterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAddrBookRosterInfo& default_instance();

  void Swap(TAddrBookRosterInfo* other);

  // implements Message ----------------------------------------------

  TAddrBookRosterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAddrBookRosterInfo& from);
  void MergeFrom(const TAddrBookRosterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 parentgroupsn = 1;
  inline bool has_parentgroupsn() const;
  inline void clear_parentgroupsn();
  static const int kParentgroupsnFieldNumber = 1;
  inline ::google::protobuf::uint32 parentgroupsn() const;
  inline void set_parentgroupsn(::google::protobuf::uint32 value);

  // optional uint32 sn = 2;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 2;
  inline ::google::protobuf::uint32 sn() const;
  inline void set_sn(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string h323id = 4;
  inline bool has_h323id() const;
  inline void clear_h323id();
  static const int kH323IdFieldNumber = 4;
  inline const ::std::string& h323id() const;
  inline void set_h323id(const ::std::string& value);
  inline void set_h323id(const char* value);
  inline void set_h323id(const char* value, size_t size);
  inline ::std::string* mutable_h323id();
  inline ::std::string* release_h323id();
  inline void set_allocated_h323id(::std::string* h323id);

  // optional string e164 = 5;
  inline bool has_e164() const;
  inline void clear_e164();
  static const int kE164FieldNumber = 5;
  inline const ::std::string& e164() const;
  inline void set_e164(const ::std::string& value);
  inline void set_e164(const char* value);
  inline void set_e164(const char* value, size_t size);
  inline ::std::string* mutable_e164();
  inline ::std::string* release_e164();
  inline void set_allocated_e164(::std::string* e164);

  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 rate = 7;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 7;
  inline ::google::protobuf::uint32 rate() const;
  inline void set_rate(::google::protobuf::uint32 value);

  // optional string describe = 8;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 8;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional string tele = 9;
  inline bool has_tele() const;
  inline void clear_tele();
  static const int kTeleFieldNumber = 9;
  inline const ::std::string& tele() const;
  inline void set_tele(const ::std::string& value);
  inline void set_tele(const char* value);
  inline void set_tele(const char* value, size_t size);
  inline ::std::string* mutable_tele();
  inline ::std::string* release_tele();
  inline void set_allocated_tele(::std::string* tele);

  // @@protoc_insertion_point(class_scope:mt.TAddrBookRosterInfo)
 private:
  inline void set_has_parentgroupsn();
  inline void clear_has_parentgroupsn();
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_h323id();
  inline void clear_has_h323id();
  inline void set_has_e164();
  inline void clear_has_e164();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_tele();
  inline void clear_has_tele();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 parentgroupsn_;
  ::google::protobuf::uint32 sn_;
  ::std::string* name_;
  ::std::string* h323id_;
  ::std::string* e164_;
  ::std::string* ip_;
  ::std::string* describe_;
  ::std::string* tele_;
  ::google::protobuf::uint32 rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcontacts_2eproto();
  friend void protobuf_AssignDesc_structcontacts_2eproto();
  friend void protobuf_ShutdownFile_structcontacts_2eproto();

  void InitAsDefaultInstance();
  static TAddrBookRosterInfo* default_instance_;
};
// -------------------------------------------------------------------

class MTMSG_API TAddrBookRosterList : public ::google::protobuf::Message {
 public:
  TAddrBookRosterList();
  virtual ~TAddrBookRosterList();

  TAddrBookRosterList(const TAddrBookRosterList& from);

  inline TAddrBookRosterList& operator=(const TAddrBookRosterList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAddrBookRosterList& default_instance();

  void Swap(TAddrBookRosterList* other);

  // implements Message ----------------------------------------------

  TAddrBookRosterList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAddrBookRosterList& from);
  void MergeFrom(const TAddrBookRosterList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mt.TAddrBookRosterInfo array = 2;
  inline int array_size() const;
  inline void clear_array();
  static const int kArrayFieldNumber = 2;
  inline const ::mt::TAddrBookRosterInfo& array(int index) const;
  inline ::mt::TAddrBookRosterInfo* mutable_array(int index);
  inline ::mt::TAddrBookRosterInfo* add_array();
  inline const ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookRosterInfo >&
      array() const;
  inline ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookRosterInfo >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:mt.TAddrBookRosterList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookRosterInfo > array_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void MTMSG_API protobuf_AddDesc_structcontacts_2eproto();
  friend void protobuf_AssignDesc_structcontacts_2eproto();
  friend void protobuf_ShutdownFile_structcontacts_2eproto();

  void InitAsDefaultInstance();
  static TAddrBookRosterList* default_instance_;
};
// ===================================================================


// ===================================================================

// TMTCallRecord

// optional uint32 sn = 1;
inline bool TMTCallRecord::has_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMTCallRecord::set_has_sn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMTCallRecord::clear_has_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMTCallRecord::clear_sn() {
  sn_ = 0u;
  clear_has_sn();
}
inline ::google::protobuf::uint32 TMTCallRecord::sn() const {
  return sn_;
}
inline void TMTCallRecord::set_sn(::google::protobuf::uint32 value) {
  set_has_sn();
  sn_ = value;
}

// optional .mt.EmMtCallRecordType callrecordtype = 2;
inline bool TMTCallRecord::has_callrecordtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMTCallRecord::set_has_callrecordtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMTCallRecord::clear_has_callrecordtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMTCallRecord::clear_callrecordtype() {
  callrecordtype_ = 0;
  clear_has_callrecordtype();
}
inline ::mt::EmMtCallRecordType TMTCallRecord::callrecordtype() const {
  return static_cast< ::mt::EmMtCallRecordType >(callrecordtype_);
}
inline void TMTCallRecord::set_callrecordtype(::mt::EmMtCallRecordType value) {
  assert(::mt::EmMtCallRecordType_IsValid(value));
  set_has_callrecordtype();
  callrecordtype_ = value;
}

// optional .mt.EmMtCallType calltype = 3;
inline bool TMTCallRecord::has_calltype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMTCallRecord::set_has_calltype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMTCallRecord::clear_has_calltype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMTCallRecord::clear_calltype() {
  calltype_ = 0;
  clear_has_calltype();
}
inline ::mt::EmMtCallType TMTCallRecord::calltype() const {
  return static_cast< ::mt::EmMtCallType >(calltype_);
}
inline void TMTCallRecord::set_calltype(::mt::EmMtCallType value) {
  assert(::mt::EmMtCallType_IsValid(value));
  set_has_calltype();
  calltype_ = value;
}

// optional .mt.EmMtConfMode confmode = 4;
inline bool TMTCallRecord::has_confmode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMTCallRecord::set_has_confmode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TMTCallRecord::clear_has_confmode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TMTCallRecord::clear_confmode() {
  confmode_ = 0;
  clear_has_confmode();
}
inline ::mt::EmMtConfMode TMTCallRecord::confmode() const {
  return static_cast< ::mt::EmMtConfMode >(confmode_);
}
inline void TMTCallRecord::set_confmode(::mt::EmMtConfMode value) {
  assert(::mt::EmMtConfMode_IsValid(value));
  set_has_confmode();
  confmode_ = value;
}

// optional string describe = 5;
inline bool TMTCallRecord::has_describe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMTCallRecord::set_has_describe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TMTCallRecord::clear_has_describe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TMTCallRecord::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& TMTCallRecord::describe() const {
  return *describe_;
}
inline void TMTCallRecord::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void TMTCallRecord::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void TMTCallRecord::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TMTCallRecord::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* TMTCallRecord::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TMTCallRecord::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string h323id = 6;
inline bool TMTCallRecord::has_h323id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TMTCallRecord::set_has_h323id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TMTCallRecord::clear_has_h323id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TMTCallRecord::clear_h323id() {
  if (h323id_ != &::google::protobuf::internal::kEmptyString) {
    h323id_->clear();
  }
  clear_has_h323id();
}
inline const ::std::string& TMTCallRecord::h323id() const {
  return *h323id_;
}
inline void TMTCallRecord::set_h323id(const ::std::string& value) {
  set_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    h323id_ = new ::std::string;
  }
  h323id_->assign(value);
}
inline void TMTCallRecord::set_h323id(const char* value) {
  set_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    h323id_ = new ::std::string;
  }
  h323id_->assign(value);
}
inline void TMTCallRecord::set_h323id(const char* value, size_t size) {
  set_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    h323id_ = new ::std::string;
  }
  h323id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TMTCallRecord::mutable_h323id() {
  set_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    h323id_ = new ::std::string;
  }
  return h323id_;
}
inline ::std::string* TMTCallRecord::release_h323id() {
  clear_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = h323id_;
    h323id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TMTCallRecord::set_allocated_h323id(::std::string* h323id) {
  if (h323id_ != &::google::protobuf::internal::kEmptyString) {
    delete h323id_;
  }
  if (h323id) {
    set_has_h323id();
    h323id_ = h323id;
  } else {
    clear_has_h323id();
    h323id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mt.EmMtAddrType addrtype = 7;
inline bool TMTCallRecord::has_addrtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TMTCallRecord::set_has_addrtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TMTCallRecord::clear_has_addrtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TMTCallRecord::clear_addrtype() {
  addrtype_ = 0;
  clear_has_addrtype();
}
inline ::mt::EmMtAddrType TMTCallRecord::addrtype() const {
  return static_cast< ::mt::EmMtAddrType >(addrtype_);
}
inline void TMTCallRecord::set_addrtype(::mt::EmMtAddrType value) {
  assert(::mt::EmMtAddrType_IsValid(value));
  set_has_addrtype();
  addrtype_ = value;
}

// optional string e164 = 8;
inline bool TMTCallRecord::has_e164() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TMTCallRecord::set_has_e164() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TMTCallRecord::clear_has_e164() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TMTCallRecord::clear_e164() {
  if (e164_ != &::google::protobuf::internal::kEmptyString) {
    e164_->clear();
  }
  clear_has_e164();
}
inline const ::std::string& TMTCallRecord::e164() const {
  return *e164_;
}
inline void TMTCallRecord::set_e164(const ::std::string& value) {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  e164_->assign(value);
}
inline void TMTCallRecord::set_e164(const char* value) {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  e164_->assign(value);
}
inline void TMTCallRecord::set_e164(const char* value, size_t size) {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  e164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TMTCallRecord::mutable_e164() {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  return e164_;
}
inline ::std::string* TMTCallRecord::release_e164() {
  clear_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = e164_;
    e164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TMTCallRecord::set_allocated_e164(::std::string* e164) {
  if (e164_ != &::google::protobuf::internal::kEmptyString) {
    delete e164_;
  }
  if (e164) {
    set_has_e164();
    e164_ = e164;
  } else {
    clear_has_e164();
    e164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 9;
inline bool TMTCallRecord::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TMTCallRecord::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TMTCallRecord::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TMTCallRecord::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& TMTCallRecord::ip() const {
  return *ip_;
}
inline void TMTCallRecord::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TMTCallRecord::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TMTCallRecord::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TMTCallRecord::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* TMTCallRecord::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TMTCallRecord::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phonenumber = 10;
inline bool TMTCallRecord::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TMTCallRecord::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TMTCallRecord::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TMTCallRecord::clear_phonenumber() {
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    phonenumber_->clear();
  }
  clear_has_phonenumber();
}
inline const ::std::string& TMTCallRecord::phonenumber() const {
  return *phonenumber_;
}
inline void TMTCallRecord::set_phonenumber(const ::std::string& value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
}
inline void TMTCallRecord::set_phonenumber(const char* value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
}
inline void TMTCallRecord::set_phonenumber(const char* value, size_t size) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TMTCallRecord::mutable_phonenumber() {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    phonenumber_ = new ::std::string;
  }
  return phonenumber_;
}
inline ::std::string* TMTCallRecord::release_phonenumber() {
  clear_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phonenumber_;
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TMTCallRecord::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumber_;
  }
  if (phonenumber) {
    set_has_phonenumber();
    phonenumber_ = phonenumber;
  } else {
    clear_has_phonenumber();
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 rate = 11;
inline bool TMTCallRecord::has_rate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TMTCallRecord::set_has_rate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TMTCallRecord::clear_has_rate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TMTCallRecord::clear_rate() {
  rate_ = 0u;
  clear_has_rate();
}
inline ::google::protobuf::uint32 TMTCallRecord::rate() const {
  return rate_;
}
inline void TMTCallRecord::set_rate(::google::protobuf::uint32 value) {
  set_has_rate();
  rate_ = value;
}

// optional uint32 time = 12;
inline bool TMTCallRecord::has_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TMTCallRecord::set_has_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TMTCallRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TMTCallRecord::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TMTCallRecord::time() const {
  return time_;
}
inline void TMTCallRecord::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional string memoname = 13;
inline bool TMTCallRecord::has_memoname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TMTCallRecord::set_has_memoname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TMTCallRecord::clear_has_memoname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TMTCallRecord::clear_memoname() {
  if (memoname_ != &::google::protobuf::internal::kEmptyString) {
    memoname_->clear();
  }
  clear_has_memoname();
}
inline const ::std::string& TMTCallRecord::memoname() const {
  return *memoname_;
}
inline void TMTCallRecord::set_memoname(const ::std::string& value) {
  set_has_memoname();
  if (memoname_ == &::google::protobuf::internal::kEmptyString) {
    memoname_ = new ::std::string;
  }
  memoname_->assign(value);
}
inline void TMTCallRecord::set_memoname(const char* value) {
  set_has_memoname();
  if (memoname_ == &::google::protobuf::internal::kEmptyString) {
    memoname_ = new ::std::string;
  }
  memoname_->assign(value);
}
inline void TMTCallRecord::set_memoname(const char* value, size_t size) {
  set_has_memoname();
  if (memoname_ == &::google::protobuf::internal::kEmptyString) {
    memoname_ = new ::std::string;
  }
  memoname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TMTCallRecord::mutable_memoname() {
  set_has_memoname();
  if (memoname_ == &::google::protobuf::internal::kEmptyString) {
    memoname_ = new ::std::string;
  }
  return memoname_;
}
inline ::std::string* TMTCallRecord::release_memoname() {
  clear_has_memoname();
  if (memoname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = memoname_;
    memoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TMTCallRecord::set_allocated_memoname(::std::string* memoname) {
  if (memoname_ != &::google::protobuf::internal::kEmptyString) {
    delete memoname_;
  }
  if (memoname) {
    set_has_memoname();
    memoname_ = memoname;
  } else {
    clear_has_memoname();
    memoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TMTCallRecordList

// repeated .mt.TMTCallRecord record = 1;
inline int TMTCallRecordList::record_size() const {
  return record_.size();
}
inline void TMTCallRecordList::clear_record() {
  record_.Clear();
}
inline const ::mt::TMTCallRecord& TMTCallRecordList::record(int index) const {
  return record_.Get(index);
}
inline ::mt::TMTCallRecord* TMTCallRecordList::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::mt::TMTCallRecord* TMTCallRecordList::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TMTCallRecord >&
TMTCallRecordList::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TMTCallRecord >*
TMTCallRecordList::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// TMTRecordErrInfo

// optional .mt.EmMtRecordErr error = 1;
inline bool TMTRecordErrInfo::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMTRecordErrInfo::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMTRecordErrInfo::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMTRecordErrInfo::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::mt::EmMtRecordErr TMTRecordErrInfo::error() const {
  return static_cast< ::mt::EmMtRecordErr >(error_);
}
inline void TMTRecordErrInfo::set_error(::mt::EmMtRecordErr value) {
  assert(::mt::EmMtRecordErr_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// TMTRecordSearch

// optional .mt.EmMtRecordSearchType type = 1;
inline bool TMTRecordSearch::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMTRecordSearch::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMTRecordSearch::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMTRecordSearch::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mt::EmMtRecordSearchType TMTRecordSearch::type() const {
  return static_cast< ::mt::EmMtRecordSearchType >(type_);
}
inline void TMTRecordSearch::set_type(::mt::EmMtRecordSearchType value) {
  assert(::mt::EmMtRecordSearchType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .mt.TMTCallRecord record = 2;
inline bool TMTRecordSearch::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMTRecordSearch::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMTRecordSearch::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMTRecordSearch::clear_record() {
  if (record_ != NULL) record_->::mt::TMTCallRecord::Clear();
  clear_has_record();
}
inline const ::mt::TMTCallRecord& TMTRecordSearch::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::mt::TMTCallRecord* TMTRecordSearch::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::mt::TMTCallRecord;
  return record_;
}
inline ::mt::TMTCallRecord* TMTRecordSearch::release_record() {
  clear_has_record();
  ::mt::TMTCallRecord* temp = record_;
  record_ = NULL;
  return temp;
}
inline void TMTRecordSearch::set_allocated_record(::mt::TMTCallRecord* record) {
  delete record_;
  record_ = record;
  if (record) {
    set_has_record();
  } else {
    clear_has_record();
  }
}

// -------------------------------------------------------------------

// TAddrBookGroupInfo

// optional uint32 groupsn = 1;
inline bool TAddrBookGroupInfo::has_groupsn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAddrBookGroupInfo::set_has_groupsn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAddrBookGroupInfo::clear_has_groupsn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAddrBookGroupInfo::clear_groupsn() {
  groupsn_ = 0u;
  clear_has_groupsn();
}
inline ::google::protobuf::uint32 TAddrBookGroupInfo::groupsn() const {
  return groupsn_;
}
inline void TAddrBookGroupInfo::set_groupsn(::google::protobuf::uint32 value) {
  set_has_groupsn();
  groupsn_ = value;
}

// optional string groupname = 2;
inline bool TAddrBookGroupInfo::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAddrBookGroupInfo::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAddrBookGroupInfo::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAddrBookGroupInfo::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& TAddrBookGroupInfo::groupname() const {
  return *groupname_;
}
inline void TAddrBookGroupInfo::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void TAddrBookGroupInfo::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void TAddrBookGroupInfo::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TAddrBookGroupInfo::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* TAddrBookGroupInfo::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TAddrBookGroupInfo::set_allocated_groupname(::std::string* groupname) {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (groupname) {
    set_has_groupname();
    groupname_ = groupname;
  } else {
    clear_has_groupname();
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 parentgroupsn = 3;
inline bool TAddrBookGroupInfo::has_parentgroupsn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAddrBookGroupInfo::set_has_parentgroupsn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAddrBookGroupInfo::clear_has_parentgroupsn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAddrBookGroupInfo::clear_parentgroupsn() {
  parentgroupsn_ = 0u;
  clear_has_parentgroupsn();
}
inline ::google::protobuf::uint32 TAddrBookGroupInfo::parentgroupsn() const {
  return parentgroupsn_;
}
inline void TAddrBookGroupInfo::set_parentgroupsn(::google::protobuf::uint32 value) {
  set_has_parentgroupsn();
  parentgroupsn_ = value;
}

// optional uint32 grouplevel = 4;
inline bool TAddrBookGroupInfo::has_grouplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAddrBookGroupInfo::set_has_grouplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAddrBookGroupInfo::clear_has_grouplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAddrBookGroupInfo::clear_grouplevel() {
  grouplevel_ = 0u;
  clear_has_grouplevel();
}
inline ::google::protobuf::uint32 TAddrBookGroupInfo::grouplevel() const {
  return grouplevel_;
}
inline void TAddrBookGroupInfo::set_grouplevel(::google::protobuf::uint32 value) {
  set_has_grouplevel();
  grouplevel_ = value;
}

// -------------------------------------------------------------------

// TAddrBookGroupList

// repeated .mt.TAddrBookGroupInfo array = 1;
inline int TAddrBookGroupList::array_size() const {
  return array_.size();
}
inline void TAddrBookGroupList::clear_array() {
  array_.Clear();
}
inline const ::mt::TAddrBookGroupInfo& TAddrBookGroupList::array(int index) const {
  return array_.Get(index);
}
inline ::mt::TAddrBookGroupInfo* TAddrBookGroupList::mutable_array(int index) {
  return array_.Mutable(index);
}
inline ::mt::TAddrBookGroupInfo* TAddrBookGroupList::add_array() {
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookGroupInfo >&
TAddrBookGroupList::array() const {
  return array_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookGroupInfo >*
TAddrBookGroupList::mutable_array() {
  return &array_;
}

// -------------------------------------------------------------------

// TAddrBookRosterInfo

// optional uint32 parentgroupsn = 1;
inline bool TAddrBookRosterInfo::has_parentgroupsn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAddrBookRosterInfo::set_has_parentgroupsn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAddrBookRosterInfo::clear_has_parentgroupsn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAddrBookRosterInfo::clear_parentgroupsn() {
  parentgroupsn_ = 0u;
  clear_has_parentgroupsn();
}
inline ::google::protobuf::uint32 TAddrBookRosterInfo::parentgroupsn() const {
  return parentgroupsn_;
}
inline void TAddrBookRosterInfo::set_parentgroupsn(::google::protobuf::uint32 value) {
  set_has_parentgroupsn();
  parentgroupsn_ = value;
}

// optional uint32 sn = 2;
inline bool TAddrBookRosterInfo::has_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAddrBookRosterInfo::set_has_sn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAddrBookRosterInfo::clear_has_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAddrBookRosterInfo::clear_sn() {
  sn_ = 0u;
  clear_has_sn();
}
inline ::google::protobuf::uint32 TAddrBookRosterInfo::sn() const {
  return sn_;
}
inline void TAddrBookRosterInfo::set_sn(::google::protobuf::uint32 value) {
  set_has_sn();
  sn_ = value;
}

// optional string name = 3;
inline bool TAddrBookRosterInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAddrBookRosterInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAddrBookRosterInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAddrBookRosterInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TAddrBookRosterInfo::name() const {
  return *name_;
}
inline void TAddrBookRosterInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TAddrBookRosterInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TAddrBookRosterInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TAddrBookRosterInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TAddrBookRosterInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TAddrBookRosterInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string h323id = 4;
inline bool TAddrBookRosterInfo::has_h323id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAddrBookRosterInfo::set_has_h323id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAddrBookRosterInfo::clear_has_h323id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAddrBookRosterInfo::clear_h323id() {
  if (h323id_ != &::google::protobuf::internal::kEmptyString) {
    h323id_->clear();
  }
  clear_has_h323id();
}
inline const ::std::string& TAddrBookRosterInfo::h323id() const {
  return *h323id_;
}
inline void TAddrBookRosterInfo::set_h323id(const ::std::string& value) {
  set_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    h323id_ = new ::std::string;
  }
  h323id_->assign(value);
}
inline void TAddrBookRosterInfo::set_h323id(const char* value) {
  set_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    h323id_ = new ::std::string;
  }
  h323id_->assign(value);
}
inline void TAddrBookRosterInfo::set_h323id(const char* value, size_t size) {
  set_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    h323id_ = new ::std::string;
  }
  h323id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TAddrBookRosterInfo::mutable_h323id() {
  set_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    h323id_ = new ::std::string;
  }
  return h323id_;
}
inline ::std::string* TAddrBookRosterInfo::release_h323id() {
  clear_has_h323id();
  if (h323id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = h323id_;
    h323id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TAddrBookRosterInfo::set_allocated_h323id(::std::string* h323id) {
  if (h323id_ != &::google::protobuf::internal::kEmptyString) {
    delete h323id_;
  }
  if (h323id) {
    set_has_h323id();
    h323id_ = h323id;
  } else {
    clear_has_h323id();
    h323id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string e164 = 5;
inline bool TAddrBookRosterInfo::has_e164() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAddrBookRosterInfo::set_has_e164() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAddrBookRosterInfo::clear_has_e164() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAddrBookRosterInfo::clear_e164() {
  if (e164_ != &::google::protobuf::internal::kEmptyString) {
    e164_->clear();
  }
  clear_has_e164();
}
inline const ::std::string& TAddrBookRosterInfo::e164() const {
  return *e164_;
}
inline void TAddrBookRosterInfo::set_e164(const ::std::string& value) {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  e164_->assign(value);
}
inline void TAddrBookRosterInfo::set_e164(const char* value) {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  e164_->assign(value);
}
inline void TAddrBookRosterInfo::set_e164(const char* value, size_t size) {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  e164_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TAddrBookRosterInfo::mutable_e164() {
  set_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    e164_ = new ::std::string;
  }
  return e164_;
}
inline ::std::string* TAddrBookRosterInfo::release_e164() {
  clear_has_e164();
  if (e164_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = e164_;
    e164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TAddrBookRosterInfo::set_allocated_e164(::std::string* e164) {
  if (e164_ != &::google::protobuf::internal::kEmptyString) {
    delete e164_;
  }
  if (e164) {
    set_has_e164();
    e164_ = e164;
  } else {
    clear_has_e164();
    e164_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 6;
inline bool TAddrBookRosterInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAddrBookRosterInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAddrBookRosterInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAddrBookRosterInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& TAddrBookRosterInfo::ip() const {
  return *ip_;
}
inline void TAddrBookRosterInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TAddrBookRosterInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TAddrBookRosterInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TAddrBookRosterInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* TAddrBookRosterInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TAddrBookRosterInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 rate = 7;
inline bool TAddrBookRosterInfo::has_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAddrBookRosterInfo::set_has_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAddrBookRosterInfo::clear_has_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAddrBookRosterInfo::clear_rate() {
  rate_ = 0u;
  clear_has_rate();
}
inline ::google::protobuf::uint32 TAddrBookRosterInfo::rate() const {
  return rate_;
}
inline void TAddrBookRosterInfo::set_rate(::google::protobuf::uint32 value) {
  set_has_rate();
  rate_ = value;
}

// optional string describe = 8;
inline bool TAddrBookRosterInfo::has_describe() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAddrBookRosterInfo::set_has_describe() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAddrBookRosterInfo::clear_has_describe() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAddrBookRosterInfo::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& TAddrBookRosterInfo::describe() const {
  return *describe_;
}
inline void TAddrBookRosterInfo::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void TAddrBookRosterInfo::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void TAddrBookRosterInfo::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TAddrBookRosterInfo::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* TAddrBookRosterInfo::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TAddrBookRosterInfo::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tele = 9;
inline bool TAddrBookRosterInfo::has_tele() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAddrBookRosterInfo::set_has_tele() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAddrBookRosterInfo::clear_has_tele() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAddrBookRosterInfo::clear_tele() {
  if (tele_ != &::google::protobuf::internal::kEmptyString) {
    tele_->clear();
  }
  clear_has_tele();
}
inline const ::std::string& TAddrBookRosterInfo::tele() const {
  return *tele_;
}
inline void TAddrBookRosterInfo::set_tele(const ::std::string& value) {
  set_has_tele();
  if (tele_ == &::google::protobuf::internal::kEmptyString) {
    tele_ = new ::std::string;
  }
  tele_->assign(value);
}
inline void TAddrBookRosterInfo::set_tele(const char* value) {
  set_has_tele();
  if (tele_ == &::google::protobuf::internal::kEmptyString) {
    tele_ = new ::std::string;
  }
  tele_->assign(value);
}
inline void TAddrBookRosterInfo::set_tele(const char* value, size_t size) {
  set_has_tele();
  if (tele_ == &::google::protobuf::internal::kEmptyString) {
    tele_ = new ::std::string;
  }
  tele_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TAddrBookRosterInfo::mutable_tele() {
  set_has_tele();
  if (tele_ == &::google::protobuf::internal::kEmptyString) {
    tele_ = new ::std::string;
  }
  return tele_;
}
inline ::std::string* TAddrBookRosterInfo::release_tele() {
  clear_has_tele();
  if (tele_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tele_;
    tele_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TAddrBookRosterInfo::set_allocated_tele(::std::string* tele) {
  if (tele_ != &::google::protobuf::internal::kEmptyString) {
    delete tele_;
  }
  if (tele) {
    set_has_tele();
    tele_ = tele;
  } else {
    clear_has_tele();
    tele_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TAddrBookRosterList

// repeated .mt.TAddrBookRosterInfo array = 2;
inline int TAddrBookRosterList::array_size() const {
  return array_.size();
}
inline void TAddrBookRosterList::clear_array() {
  array_.Clear();
}
inline const ::mt::TAddrBookRosterInfo& TAddrBookRosterList::array(int index) const {
  return array_.Get(index);
}
inline ::mt::TAddrBookRosterInfo* TAddrBookRosterList::mutable_array(int index) {
  return array_.Mutable(index);
}
inline ::mt::TAddrBookRosterInfo* TAddrBookRosterList::add_array() {
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookRosterInfo >&
TAddrBookRosterList::array() const {
  return array_;
}
inline ::google::protobuf::RepeatedPtrField< ::mt::TAddrBookRosterInfo >*
TAddrBookRosterList::mutable_array() {
  return &array_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mt

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_structcontacts_2eproto__INCLUDED
